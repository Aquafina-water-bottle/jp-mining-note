{{~! =======   ORIGINAL YOMICHAN TEMPLATE CODE ABOVE   ======= ~}}


{{~! NOTE: this should be put at the very bottom of the templates section! ~}}

{{~!
    ==================
     helper functions
    ==================
~}}

{{#*inline "s"}}{{/inline}}

{{~! categorizes into 4 types: "ignored", "bilingual", "utility", or "monolingual" ~}}
{{~#*inline "jpmn-get-dict-type"~}}

    {{~#scope~}}
        {{~#set "rx-match-ignored" ~}}
            {{~#regexMatch (get "ignored-dict-regex") "gu"~}}{{dictionaryName}}{{~/regexMatch~}}
        {{/set~}}
        {{~#set "rx-match-bilingual" ~}}
            {{~#regexMatch (get "bilingual-dict-regex") "gu"~}}{{dictionaryName}}{{~/regexMatch~}}
        {{/set~}}
        {{~#set "rx-match-utility" ~}}
            {{~#regexMatch (get "utility-dict-regex") "gu"~}}{{dictionaryName}}{{~/regexMatch~}}
        {{/set~}}


        {{~#if (op "!==" (get "rx-match-ignored") "")~}}
            ignored
        {{~else if (op "!==" (get "rx-match-bilingual") "")~}}
            bilingual
        {{~else if (op "!==" (get "rx-match-utility") "")~}}
            utility
        {{~else~}}
            {{~! assumed that anything else is a monolingual dictionary ~}}
            monolingual
        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}



{{~! returns "" if selection text is disabled, or if none existed in the first place ~}}
{{~#*inline "_jpmn-selection-text"~}}
    {{~! text-mode != "" and text-mode > 0 ~}}
    {{~#if (op "===" (get "opt-selection-text-enabled") true)~}}
        {{~! removes leading and trailing whitespace ~}}
        {{~#regexReplace "^\s+|\s+$" "" "g"~}}
            {{~#getMedia "selectionText"}}{{/getMedia~}}
        {{~/regexReplace~}}
    {{~/if~}}
{{~/inline~}}

{{~! checks that the selection text is indeed a dictionary (returns the text if true, nothing if false) ~}}
{{~#*inline "_jpmn-check-dictionary"~}}
    {{~#scope~}}
        {{~#set "selection-is-dictionary" false}}{{/set~}}

        {{~#each definition.definitions~}}
            {{~#if (op "===" (get "selection") dictionary)~}}
                {{~#set "selection-is-dictionary" true ~}}{{~/set~}}
            {{~/if~}}
        {{~/each~}}

        {{~#if (op "===" (get "selection-is-dictionary") true)~}}
            {{~get "selection"~}}
        {{~else~}}
            {{~! null ~}}
        {{~/if~}}
    {{~/scope~}}
{{~/inline~}}



{{~! gives the raw glossary as the search string (for searching to see if the selected text
is a part of a dictionary) ~}}
{{#*inline "_jpmn-glossary-single-search"}}

    {{~#scope~}}
        {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}}
    {{~/scope~}}

{{/inline}}



{{~! escape a regex string: https://stackoverflow.com/a/6969486~}}
{{~! /[.*+?^${}()|[\]\\]/g, '\\$&' ~}}
{{~! escapes the `regexString` regex to allow it to be used like a normal search in a string ~}}
{{#*inline "_jpmn-escape-regex"}}
    {{~#regexReplace "[.*+?^${}()|[\]\\]" "\$&" "g"~}}{{~regexString~}}{{~/regexReplace~}}
{{/inline}}


{{~#*inline "_jpmn-get-dict-if-glossary-selected"~}}
    {{~#scope~}}
        {{~#set "result-dictionary" null}}{{/set~}}
        {{~#set "search-selection"}}{{~> _jpmn-escape-regex regexString=(get "selection") ~}}{{/set~}}

        {{~#each definition.definitions~}}
            {{~#set "search-def"}}{{~> _jpmn-glossary-single-search . brief=../brief noDictionaryTag=../noDictionaryTag ~}}{{/set~}}

            {{~set "search-regex-match" (regexMatch (get "search-selection") "gu" (get "search-def"))}}
            {{~#if (op "&&"
                (op "===" (get "result-dictionary") null)
                (op "!==" (get "search-regex-match") "")
            )~}}
                {{~#set "result-dictionary" dictionary}}{{/set~}}
            {{~/if~}}

        {{~/each~}}
        {{~get "result-dictionary" ~}}
    {{~/scope~}}
{{~/inline~}}




{{~!
    searches dictionary, determined by `opt-first-definition-type`
    - (opt-first-definition-type === bilingual) -> bilingual dictionaries are searched first
    - (opt-first-definition-type === monolingual) -> monolingual dictionaries are searched first
~}}
{{~#*inline "_jpmn-search-primary-definition-dict"~}}
    {{~#scope~}}
        {{~#if (op "===" (get "opt-first-definition-type") "bilingual")~}}
            {{~#set "first-definition-search-type-1" "bilingual"}}{{/set~}}
            {{~#set "first-definition-search-type-2" "monolingual"}}{{/set~}}
        {{~else~}}
            {{~#set "first-definition-search-type-1" "monolingual"}}{{/set~}}
            {{~#set "first-definition-search-type-2" "bilingual"}}{{/set~}}
        {{~/if~}}


        {{~! first-dictionary === null <=> no valid dictionary was found ~}}
        {{~#set "first-dictionary" null}}{{/set~}}

        {{~#each definition.definitions~}}

            {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
            {{~#if (op "===" (get "test-dict-name") (get "first-definition-search-type-1"))~}}
                {{~#if (op "===" null (get "first-dictionary"))~}}
                    {{~#set "first-dictionary" dictionary~}}{{~/set~}}
                {{~/if~}}
            {{~/if~}}

        {{~/each~}}


        {{~! uses other dictionary type, last resort ~}}
        {{~#if (op "===" (get "first-dictionary") null)~}}

            {{~#each definition.definitions~}}

                {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
                {{~#if (op "===" (get "test-dict-name") (get "first-definition-search-type-2"))~}}
                    {{~#if (op "===" null (get "first-dictionary"))~}}
                        {{~#set "first-dictionary" dictionary~}}{{~/set~}}
                    {{~/if~}}
                {{~/if~}}

            {{~/each~}}

        {{~/if~}}

        {{~#get "first-dictionary"~}}{{~/get~}}
    {{~/scope~}}
{{~/inline~}}


{{~!
    if (selection-text exists):
        if (selection-text is exactly a dictionary):
            return dictionary
        if (able to detect dictionary of which the selection-text is highlighting):
            return dictionary
        return null
~}}
{{~#*inline "_jpmn-check-dictionary-and-glossary"~}}
    {{~#scope~}}

        {{~#set "result" ""}}{{/set~}}

        {{~! checks if the selected text matches a dictionary ~}}
        {{~#if (op "===" (get "opt-selection-text-dictionary") true)~}}
            {{~#set "result"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}}
        {{~/if~}}

        {{~! checks if the selected text matches a definition in a dictionary ~}}
        {{~#if
            (op "&&" (op "===" (get "result") "")
                (op "&&"
                    (op "===" (get "opt-selection-text-glossary") true)
                    (op "===" (get "opt-selection-text-glossary-attempt-bold") true)
                )
            )
        ~}}
            {{~#set "result"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}}
        {{~/if~}}

        {{~get "result" ~}}

    {{~/scope~}}
{{~/inline~}}


{{~!
    if (selection-text exists):
        if (selection-text is exactly a dictionary):
            return null
        if (able to detect dictionary of which the selection-text is highlighting):
            return "uses-glossary"
        return null
~}}
{{~#*inline "_jpmn-selection-uses-glossary"~}}
    {{~#scope~}}

        {{~#set "result" ""}}{{/set~}}

        {{~! checks if the selected text matches a dictionary ~}}
        {{~#if (op "===" (get "opt-selection-text-dictionary") true)~}}
            {{~#set "result"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}}
        {{~/if~}}

        {{~! checks if the selected text matches a definition in a dictionary ~}}
        {{~#if (op "!==" (get "result") "") ~}}
            {{~! selection-text is a dictionary -> null ~}}
        {{~else if
            (op "&&"
                (op "===" (get "opt-selection-text-glossary") true)
                (op "===" (get "opt-selection-text-glossary-attempt-bold") true)
            )
        ~}}
            {{~#set "result"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}}
            {{~#if (op "!==" (get "result") "") ~}}
                {{~! selection-text dict found -> "uses-glossary" ~}}
                uses-glossary
            {{~/if~}}
        {{~/if~}}

    {{~/scope~}}
{{~/inline~}}




{{~!
    if (selection-text exists):
        if (selection-text is exactly a dictionary):
            return dictionary
        if (able to detect dictionary of which the selection-text is highlighting):
            return dictionary
        if (selection-text-glossary is not enabled):
            return first-dictionary (determined by `opt-first-definition-type`)
        return null

    else:
        return first-dictionary (determined by `opt-first-definition-type`)
~}}
{{~#*inline "_jpmn-get-primary-definition-dict"~}}
    {{~#scope~}}

        {{~! first checks selection text ~}}
        {{~#set "selection"}}{{~> _jpmn-selection-text ~}}{{/set~}}
        {{~#if (op "!==" (get "selection") "")~}}

            {{~#set "result"}}{{~> _jpmn-check-dictionary-and-glossary . ~}}{{/set~}}

            {{~! doesn't return a dictionary if opt-selection-text-glossary is false b/c ~}}
            {{~#if
                (op "&&"
                    (op "===" (get "result") "")
                    (op "===" (get "opt-selection-text-glossary") false)
                )
            ~}}
                {{~#set "result"}}{{~> _jpmn-search-primary-definition-dict . ~}}{{/set~}}
            {{~/if~}}

            {{~get "result" ~}}

        {{~! no selection text ~}}
        {{~else~}}
            {{~> _jpmn-search-primary-definition-dict . ~}}
        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}


{{~#*inline "_jpmn-get-primary-definition-value"~}}
    {{~#scope~}}

        <ol>
        {{~#each definition.definitions~}}
            {{~#if (op "===" dictionary (get "primary-dictionary"))~}}
                <li data-details="{{~dictionary~}}">
                    {{~> _jpmn-glossary-single . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
                </li>
            {{~/if~}}
        {{~/each~}}
        </ol>

    {{~/scope~}}

{{~/inline~}}






{{~! custom glossary-single function for additional regex parsing per dictionary ~}}
{{~! OVERRIDES brief and noDictionaryTag ~}}
{{#*inline "_jpmn-glossary-single"}}
    {{~#scope~}}

        {{~#if (op "===" dictionary "NHK日本語発音アクセント新辞典")~}}
            {{~#regexReplace "<br> ・" "<br>" "g"~}}
                {{~> _jpmn-glossary-single2 . ~}}
            {{~/regexReplace~}}
        {{~else~}}
            {{~> _jpmn-glossary-single2 . ~}}
        {{~/if~}}

    {{~/scope~}}
{{/inline}}



{{~! custom glossary-single function to add custom html around the dictionary and tags ~}}
{{#*inline "_jpmn-glossary-single2"}}

    {{~#scope~}}

        <span class="dict-group__tag-list"> {{~s~}}

            {{~! only italics if jp-characters-regex finds no matches ~}}
            {{~#set "italics-start"}}{{/set~}}
            {{~#set "italics-end"}}{{/set~}}

            {{~#set "any" false}}{{/set~}}
            {{~#each definitionTags~}}

                <span class="dict-group__tag dict-group__tag--name"> {{~s~}}
                    <span class="dict-group__tag-inner"> {{~s~}}
                        {{~name~}}
                    </span> {{~s~}}
                </span> {{~s~}}

            {{~/each~}}

            <span class="dict-group__tag dict-group__tag--dict"> {{~s~}}
                <span class="dict-group__tag-inner"> {{~s~}}
                    {{~dictionary~}}
                </span> {{~s~}}
            </span> {{~s~}}

            {{~#if (get "any")}}){{#get "italics-end"}}{{/get}} {{/if~}}

        </span> {{~s~}}

        <span class="dict-group__glossary"> {{~s~}}

            {{~! ^(<.*?>)? is to attempt to select any tag at the beginning (only works for 1 tag) ~}}
            {{#regexReplace
                    "^(<.*?>)?(.*?)<br>"
                    "$1<span class=\"dict-group__glossary--first-line\">$2</span><span class=\"dict-group__glossary--first-line-break\"><br></span>"
                }}
            {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}}
            {{~/regexReplace~}}

        </span> {{~s~}}

    {{~/scope~}}

    {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}}
{{/inline}}


{{~!
    =============
     frequencies
    =============
~}}

{{#*inline "jpmn-frequencies"}}
    {{~#if (op ">" definition.frequencies.length 0)~}}
        {{~#each definition.frequencies~}}
            <div class="frequencies__group" data-details="{{~dictionary~}}"> {{~s~}}
                <div class="frequencies__number"> {{~s~}}
                    <span class="frequencies__number-inner"> {{~s~}}
                        {{~! removes the "X" in JPDB's frequency and replaces it with a less assuming character
                            (it interferes with the color of the card, since you see red
                            at the top corner which is somewhat distracting) ~}}
                        {{~#regexReplace "❌" "✖" "g"~}}
                            {{~frequency~}}
                        {{~/regexReplace~}}
                    </span> {{~s~}}
                </div> {{~s~}}
                <div class="frequencies__dictionary"> {{~s~}}
                    <span class="frequencies__dictionary-inner"> {{~s~}}
                        {{~dictionary~}}
                    </span> {{~s~}}
                </div> {{~s~}}
            </div>
        {{~/each~}}
    {{~/if~}}
{{/inline}}

{{~! taken from here: https://github.com/MarvNC/JP-Resources#sorting-mined-anki-cards-by-frequency ~}}
{{~#*inline "jpmn-min-freq"~}}
    {{~#scope~}}
        {{~#set "min-freq" 0~}}{{~/set~}}
            {{~#each definition.frequencies~}}
                {{~#if (op "||" (op "===" (get "min-freq") 0) (op ">" (op "+" (get "min-freq")) (op "+" (regexMatch "\d" "g" this.frequency))))}}
                    {{~#set "min-freq" (op "+" (regexMatch "\d" "g" this.frequency))}}{{/set~}}
                {{~/if~}}
            {{~/each~}}
        {{~get "min-freq"~}}
    {{~/scope~}}
{{/inline}}


{{~!
    ==============
     pitch accent
    ==============
~}}

{{#*inline "jpmn-pitch-accent-graphs"}}
    {{~#if (op ">" pitchCount 0)~}}
        {{~#each pitches~}}
            <div class="pa-graphs__group" data-details="{{dictionary}}"> {{~s~}}
                <div class="pa-graphs__dictionary"> {{~s~}}
                    <div class="pa-graphs__dictionary-inner"> {{~s~}}
                        {{~dictionary~}}
                    </div> {{~s~}}
                </div> {{~s~}}
                <ol> {{~s~}}
                    {{~#each pitches~}}
                        <li>
                            {{~> pitch-accent-item-disambiguation~}}

                            {{~#scope~}}
                                {{~#set "any" false}}{{/set~}}
                                {{~#each tags~}}
                                    {{~#if (get "any")}}, {{else}}({{/if~}}
                                    {{name}}
                                    {{~#set "any" true}}{{/set~}}
                                {{~/each~}}
                                {{~#if (get "any")}}) {{/if~}}
                            {{~/scope~}}

                            {{~> pitch-accent-item format="graph"~}}
                        </li>
                    {{~/each~}}
                </ol> {{~s~}}
            </div>
        {{~/each~}}
    {{~/if~}}
{{/inline}}


{{#*inline "jpmn-pitch-accent-positions"}}
    {{~#if (op ">" pitchCount 0)~}}
        {{~#each pitches~}}
            <div class="pa-positions__group" data-details="{{dictionary}}"> {{~s~}}
                <div class="pa-positions__dictionary"> {{~s~}}
                    <div class="pa-positions__dictionary-inner"> {{~s~}}
                        {{~dictionary~}}
                    </div> {{~s~}}
                </div> {{~s~}}
                <ol> {{~s~}}
                    {{~#each pitches~}}
                        <li>
                            {{~> pitch-accent-item-disambiguation~}}

                            {{~#scope~}}
                                {{~#set "any" false}}{{/set~}}
                                {{~#each tags~}}
                                    {{~#if (get "any")}}, {{else}}({{/if~}}
                                    {{name}}
                                    {{~#set "any" true}}{{/set~}}
                                {{~/each~}}
                                {{~#if (get "any")}}) {{/if~}}
                            {{~/scope~}}

                            {{~> pitch-accent-item format="position"~}}
                        </li>
                    {{~/each~}}
                </ol> {{~s~}}
            </div>
        {{~/each~}}
    {{~/if~}}
{{/inline}}


{{~!
    ==============
     dictionaries
    ==============
~}}


{{~! primary def: first monolingual (or first bilingual if no monolingual dicts found) ~}}
{{~! does the reverse if opt-first-definition-type is "bilingual" ~}}
{{~#*inline "jpmn-primary-definition"~}}

    {{~#scope~}}

        {{~#set "primary-dictionary"}}{{~> _jpmn-get-primary-definition-dict . ~}}{{/set~}}

        {{~#if (op "===" (get "primary-dictionary") "")~}}
            {{~> _jpmn-selection-text ~}}
        {{~else~}}
            {{~#set "selection"}}{{~> _jpmn-selection-text ~}}{{/set~}}
            {{~#set "selection-uses-glossary"~}}
                {{~> _jpmn-selection-uses-glossary . ~}}
            {{~/set~}}

            {{~! not "" <=> is a filled string ~}}
            {{~#if (op "!==" (get "selection-uses-glossary") "")~}}

                {{~#set "search-selection"}}{{~> _jpmn-escape-regex regexString=(get "selection") ~}}{{/set~}}
                {{~#set "search-selection-bold"}}<b>{{~ get "selection" ~}}</b>{{/set~}}

                {{~#regexReplace (get "search-selection") (get "search-selection-bold") "g"~}}
                    {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
                {{~/regexReplace~}}

            {{~else~}}
                {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
            {{~/if~}}

        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}


{{~! extra def: bilingual defs (excluding primary def) ~}}
{{~#*inline "jpmn-secondary-definition"~}}

    {{~#scope~}}

        {{~#set "primary-dictionary"}}{{~> _jpmn-get-primary-definition-dict . ~}}{{/set~}}

        {{~! looks to see if another dictionary exists ~}}
        {{~#set "valid-dict" false}}{{/set~}}

        {{~#each definition.definitions~}}
            {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
            {{~#if (op "&&" (op "===" (get "test-dict-name") "bilingual") (op "!==" (get "primary-dictionary") dictionary))~}}
                {{~#set "valid-dict" true}}{{/set~}}
            {{~/if~}}
        {{~/each~}}

        {{~#if (get "valid-dict") ~}}
            <ol>
            {{~#each definition.definitions~}}
                {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
                {{~#if (op "&&" (op "===" (get "test-dict-name") "bilingual") (op "!==" (get "primary-dictionary") dictionary))~}}

                    <li data-details="{{~dictionary~}}">
                        {{~> _jpmn-glossary-single . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
                    </li>

                {{~/if~}}
            {{~/each~}}
            </ol>
        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}


{{~! extra def: monolingual defs (excluding primary def) ~}}
{{~#*inline "jpmn-extra-definitions"~}}

    {{~#scope~}}

        {{~#set "primary-dictionary"}}{{~> _jpmn-get-primary-definition-dict . ~}}{{/set~}}

        {{~! looks to see if another dictionary exists ~}}
        {{~#set "valid-dict" false}}{{/set~}}

        {{~#each definition.definitions~}}
            {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
            {{~#if (op "&&" (op "===" (get "test-dict-name") "monolingual") (op "!==" (get "primary-dictionary") dictionary))~}}
                {{~#set "valid-dict" true}}{{/set~}}
            {{~/if~}}
        {{~/each~}}

        {{~#if (get "valid-dict") ~}}
            <ol>
            {{~#each definition.definitions~}}
                {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
                {{~#if (op "&&" (op "===" (get "test-dict-name") "monolingual") (op "!==" (get "primary-dictionary") dictionary))~}}
                    <li data-details="{{~dictionary~}}">
                        {{~> _jpmn-glossary-single . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
                    </li>
                {{~/if~}}
            {{~/each~}}
            </ol>
        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}



{{~! pitch accent info: all pitch accent info dictionaries ~}}

{{~#*inline "jpmn-utility-dictionaries"~}}

    {{~#scope~}}

        {{~! looks to see if another dictionary exists ~}}
        {{~#set "valid-dict" false}}{{/set~}}

        {{~#each definition.definitions~}}
            {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
            {{~#if (op "===" (get "test-dict-name") "utility")~}}
                {{~#set "valid-dict" true}}{{/set~}}
            {{~/if~}}
        {{~/each~}}

        {{~#if (get "valid-dict") ~}}
            <ol>
            {{~#each definition.definitions~}}
                {{~#set "test-dict-name"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}}
                {{~#if (op "===" (get "test-dict-name") "utility")~}}
                    <li data-details="{{~dictionary~}}">
                        {{~> _jpmn-glossary-single . brief=../brief noDictionaryTag=../noDictionaryTag ~}}
                    </li>
                {{~/if~}}
            {{~/each~}}
            </ol>
        {{~/if~}}

    {{~/scope~}}

{{~/inline~}}



{{~!
    =======
     other
    =======
~}}

{{~#*inline "jpmn-word-reading-hiragana"~}}
    {{~#set "word-reading" ~}}{{> reading}}{{/set~}}

    {{~#if (op "" (get "word-reading")) ~}}
        {{~#set "word-reading" ~}}{{> expression}}{{/set~}}
    {{~/if~}}

    {{#hiragana (get "word-reading") keepProlongedSoundMarks=false}}{{/hiragana}}
{{~/inline~}}



{{~!
thanks to:
- https://github.com/FooSoft/yomichan/issues/1952#issuecomment-922671489 for the base code
- DaNautics#8833 for finding the above + removing the span classes
~}}
{{#*inline "jpmn-sentence-bolded-furigana-plain"}}
    {{~#if definition.cloze~}}

        {{~#regexReplace "(<span class=\"term\">)|(</span>)" "" "g"~}}
        {{~#regexReplace "<ruby>(.+?)<rt>(.+?)</rt></ruby>" " $1[$2]" "g"~}}

            {{~#if (hasMedia "textFurigana" definition.cloze.prefix)~}}
                {{~#getMedia "textFurigana" definition.cloze.prefix escape=false}}{{/getMedia~}}
            {{~else~}}
                {{~definition.cloze.prefix~}}
            {{~/if~}}

            <b>
            {{~#if (hasMedia "textFurigana" definition.cloze.body)~}}
                {{~#getMedia "textFurigana" definition.cloze.body escape=false}}{{/getMedia~}}
            {{~else~}}
                {{~definition.cloze.body~}}
            {{~/if~}}
            </b>

            {{~#if (hasMedia "textFurigana" definition.cloze.suffix)~}}
                {{~#getMedia "textFurigana" definition.cloze.suffix escape=false}}{{/getMedia~}}
            {{~else~}}
                {{~definition.cloze.suffix~}}
            {{~/if~}}

        {{~/regexReplace~}}
        {{~/regexReplace~}}

    {{~/if~}}
{{/inline}}



{{#*inline "jpmn-filled-if-word-is-hiragana"}}
    {{~#scope~}}
        {{~#set "expression" ~}}{{> expression}}{{/set~}}
        {{~#set "reading" ~}}{{> reading}}{{/set~}}
        {{~#set "expression-hiragana" ~}}{{> jpmn-word-reading-hiragana}}{{/set~}}

        {{~#if (op "&&" (op "===" (get "expression") (get "reading")) (op "===" (get "expression") (get "expression-hiragana")))~}}
            1
        {{~/if~}}
    {{~/scope~}}
{{/inline}}

{{#*inline "jpmn-filled-if-word-is-not-hiragana"}}
    {{~#scope~}}
        {{~#set "filled" ~}}{{> jpmn-filled-if-word-is-hiragana}}{{/set~}}
        {{~#if (op "===" (get "filled") "")~}}
            1
        {{~/if~}}
    {{~/scope~}}
{{/inline}}



{{~! a test to check if your dictionaries are correctly classified. ~}}
{{~! Only meant to be used for debugging purposes, not Anki. ~}}
{{~#*inline "jpmn-test-dict-type"~}}
{{~#scope~}}
{{~#each definition.definitions~}}
「{{dictionary}}」: {{> jpmn-get-dict-type . dictionaryName=dictionary}}
{{/each~}}
{{~/scope~}}
{{~/inline~}}

