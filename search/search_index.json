{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to jp-mining-note's documentation! Click here to get started, or head over to the table of contents to the left of this page. Demos \u00b6 GUI (click here) Fields (click here) Card Creation (click here) P.S. There is a bulb icon at the top if you want to toggle the website between light and dark mode.","title":"Home"},{"location":"#demos","text":"GUI (click here) Fields (click here) Card Creation (click here) P.S. There is a bulb icon at the top if you want to toggle the website between light and dark mode.","title":"Demos"},{"location":"alternatives/","text":"This page is dedicated to recording a (non-exhaustive) list of various note types, that isn't JPMN . P.S. Feel free to let me know of any note types you find interesting (including your own note type, or modified versions of this note), and I will very likely add it here! (Brownie points if you make a pull request for it too!) Anime Cards \u00b6 Official project website \u30fb Download Example image Lazy Guide's Modified Anime Card \u00b6 Website & download Example images (monolingual, modern) Dark Light Example images (monolingual, simple) Dark Dark (alternative) Light stegatxins0's Modified Anime Card \u00b6 Website & download Example image Tatsumoto's TSC \u00b6 Official website \u30fb Download \u30fb Mirror TSC is short for \"Targeted sentence cards\" JPMN is a heavily modified version of this (to the point of it being completely rewritten) Example image AJATT-Tool's AnkiNoteTypes \u00b6 Website A collection of user-created notes Most are based off of the above TSC template Eminent Note Type \u00b6 Official project website & download Example images Front Back Elax's Note Type \u00b6 Download Example images Front | Dark Back | Dark Front | Light Back | Light Description from the author This is my anki card format it is based in the Gruvbox color scheme ( https://github.com/morhetz/gruvbox ) and changes dynamically with your Anki theme, you will need this handlebars in yomichan for it to work: https://pastebin.com/KSjbwrHk (It is a modified version of the one in animecards, the only thing it changes is the color of the pitch pattern so it changes dynamically with the Anki theme) although if you're going to use the dark theme and you already have the animecards handlebars is not neccessary to download it although I still recommend it. You can change between vocab card, sentence card, vocab audio card, and sentence audio card. ( Original discord message , on TMW server ) Timm's Anki Template \u00b6 Download \u30fb Download (alternative theme) Examples Image Video Description from the author UPDATE1: tango wasn't being colored in the sentence so i fixed it, check yomichan screen shot and add the css UPDATE2: added css Here is my anki template, which is the result of bits I liked from other templates which I tried to glue together with my limited knowledge of programming. https://streamable.com/j3etpw Includes a card mined from the VN Steins;Gate 0 and a card from the LN \u5fd8\u5374\u63a2\u5075 Yomichan: https://i.imgur.com/vuHoVlM.png Add this to the styling page of the template in anki Handlebars: https://pastebin.com/TeSJc6ij Features: Automatic pitch coloring from https://ankiweb.net/shared/info/1557722832 iirc Semi-automatic title generation, so you know from which anime/VN etc. a word is from drop down page for multiple definitions, that are automatically added The same features as look below (you can reverse a word to be a sentence card, audio card etc, with one click) has full coverage with the intergration of embedded websites (more on this in the next section) NSFW filter to blur pictures from here https://rentry.co/mining stroke order for vocab that can be activated if you do so (most of the time the stroke order is clear, but what i implemented it for, is for that \u4e07\u304c\u4e00 case where a word has a weird stroke order, making it easier to remember) horrible and clusstered code made by me Note: This template is has following imperfections: Idk how to insert a line break when a word has multiple readings, picture of the problem https://i.imgur.com/YQpRgOj.png Websites for more coverage are not displayed correct on mobile, also idk how to fix it I think images are not responsively sized on mobile DM me if you have problems recreating the template (\u7de8\u96c6\u6e08) CSS update: Add this to the styling of the template in anki and check the yomichan screenshot above . jpsentence { margin : 20 px 0 0 0 ; font-size : 35 px ; text-align : center ; } . pcolor { display : inline-block ; } add this to .img2 and .img: display : flex ; justify-content : center ; align-items : center ; margin : 0 auto ; add this exclusively to .img2: margin-bottom : 25px ; Remove on the front template the div with jpsentence for the tango ( Original discord message , on TMW server ) Tigy01's Note Type \u00b6 Google docs guide \u30fb Download Example images Front Back Stazor's Note Type \u00b6 Download Example images Front Front (on hover) Back Back (light) Description from the author Features: Cute Font, nsfw Blur for VN (if tags has NSFW) Has similar setup from eminent's note type 2.3 https://cademcniven.com/projects/notetype2/ wordDictionaryForm > Vocab reading > VocabReading definition > Glossary (Hidden by Default) and Glossary Monolingual wordAudio > Audio Target field is used to highlight the same word found on the card You can remove #main_image styling from the css if you don't want the dotted line marker for nsfw blurring, more in depth explanation of how the scripts work https://github.com/MarvNC/JP-Resources#sharex-hotkey-for-nsfw-cards ( Original discord message , on Perdition's server ) MoonieBiloney's Note Types \u00b6 Google docs page \u30fb Download Some require a Patreon subscription to access Various note types for non-Japanese learning purposes \u00b6 Prettify Modern Card Themes Anki Cards Templates SuperList Raagaception's 12STD CBSE Deck (Science stream, PCM)","title":"Alternatives"},{"location":"alternatives/#anime-cards","text":"Official project website \u30fb Download Example image","title":"Anime Cards"},{"location":"alternatives/#lazy-guides-modified-anime-card","text":"Website & download Example images (monolingual, modern) Dark Light Example images (monolingual, simple) Dark Dark (alternative) Light","title":"Lazy Guide's Modified Anime Card"},{"location":"alternatives/#stegatxins0s-modified-anime-card","text":"Website & download Example image","title":"stegatxins0's Modified Anime Card"},{"location":"alternatives/#tatsumotos-tsc","text":"Official website \u30fb Download \u30fb Mirror TSC is short for \"Targeted sentence cards\" JPMN is a heavily modified version of this (to the point of it being completely rewritten) Example image","title":"Tatsumoto's TSC"},{"location":"alternatives/#ajatt-tools-ankinotetypes","text":"Website A collection of user-created notes Most are based off of the above TSC template","title":"AJATT-Tool's AnkiNoteTypes"},{"location":"alternatives/#eminent-note-type","text":"Official project website & download Example images Front Back","title":"Eminent Note Type"},{"location":"alternatives/#elaxs-note-type","text":"Download Example images Front | Dark Back | Dark Front | Light Back | Light Description from the author This is my anki card format it is based in the Gruvbox color scheme ( https://github.com/morhetz/gruvbox ) and changes dynamically with your Anki theme, you will need this handlebars in yomichan for it to work: https://pastebin.com/KSjbwrHk (It is a modified version of the one in animecards, the only thing it changes is the color of the pitch pattern so it changes dynamically with the Anki theme) although if you're going to use the dark theme and you already have the animecards handlebars is not neccessary to download it although I still recommend it. You can change between vocab card, sentence card, vocab audio card, and sentence audio card. ( Original discord message , on TMW server )","title":"Elax's Note Type"},{"location":"alternatives/#timms-anki-template","text":"Download \u30fb Download (alternative theme) Examples Image Video Description from the author UPDATE1: tango wasn't being colored in the sentence so i fixed it, check yomichan screen shot and add the css UPDATE2: added css Here is my anki template, which is the result of bits I liked from other templates which I tried to glue together with my limited knowledge of programming. https://streamable.com/j3etpw Includes a card mined from the VN Steins;Gate 0 and a card from the LN \u5fd8\u5374\u63a2\u5075 Yomichan: https://i.imgur.com/vuHoVlM.png Add this to the styling page of the template in anki Handlebars: https://pastebin.com/TeSJc6ij Features: Automatic pitch coloring from https://ankiweb.net/shared/info/1557722832 iirc Semi-automatic title generation, so you know from which anime/VN etc. a word is from drop down page for multiple definitions, that are automatically added The same features as look below (you can reverse a word to be a sentence card, audio card etc, with one click) has full coverage with the intergration of embedded websites (more on this in the next section) NSFW filter to blur pictures from here https://rentry.co/mining stroke order for vocab that can be activated if you do so (most of the time the stroke order is clear, but what i implemented it for, is for that \u4e07\u304c\u4e00 case where a word has a weird stroke order, making it easier to remember) horrible and clusstered code made by me Note: This template is has following imperfections: Idk how to insert a line break when a word has multiple readings, picture of the problem https://i.imgur.com/YQpRgOj.png Websites for more coverage are not displayed correct on mobile, also idk how to fix it I think images are not responsively sized on mobile DM me if you have problems recreating the template (\u7de8\u96c6\u6e08) CSS update: Add this to the styling of the template in anki and check the yomichan screenshot above . jpsentence { margin : 20 px 0 0 0 ; font-size : 35 px ; text-align : center ; } . pcolor { display : inline-block ; } add this to .img2 and .img: display : flex ; justify-content : center ; align-items : center ; margin : 0 auto ; add this exclusively to .img2: margin-bottom : 25px ; Remove on the front template the div with jpsentence for the tango ( Original discord message , on TMW server )","title":"Timm's Anki Template"},{"location":"alternatives/#tigy01s-note-type","text":"Google docs guide \u30fb Download Example images Front Back","title":"Tigy01's Note Type"},{"location":"alternatives/#stazors-note-type","text":"Download Example images Front Front (on hover) Back Back (light) Description from the author Features: Cute Font, nsfw Blur for VN (if tags has NSFW) Has similar setup from eminent's note type 2.3 https://cademcniven.com/projects/notetype2/ wordDictionaryForm > Vocab reading > VocabReading definition > Glossary (Hidden by Default) and Glossary Monolingual wordAudio > Audio Target field is used to highlight the same word found on the card You can remove #main_image styling from the css if you don't want the dotted line marker for nsfw blurring, more in depth explanation of how the scripts work https://github.com/MarvNC/JP-Resources#sharex-hotkey-for-nsfw-cards ( Original discord message , on Perdition's server )","title":"Stazor's Note Type"},{"location":"alternatives/#mooniebiloneys-note-types","text":"Google docs page \u30fb Download Some require a Patreon subscription to access","title":"MoonieBiloney's Note Types"},{"location":"alternatives/#various-note-types-for-non-japanese-learning-purposes","text":"Prettify Modern Card Themes Anki Cards Templates SuperList Raagaception's 12STD CBSE Deck (Science stream, PCM)","title":"Various note types for non-Japanese learning purposes"},{"location":"autopa/","text":"This page is dedicated to explaining the details of the auto-pitch-accent module. If you want a quick summary of how to set the the pitch accent in the card, see the usage page . How Pitch Accent is Selected \u00b6 Pitch accent is selected based on the following priority: (1) PAOverride number \u00b6 format is any integer (i.e. 0 , 1 , 3 , etc.) represents mora on which the downstep happens ( 0 means no downstep / \u5e73\u677f) -1 sets the downstep to be right before the last mora other negative numbers won't work ( -1 is a special number for the \u8d77\u4f0f pattern) primary way to set/override the pitch accent (2) PAOverride raw text \u00b6 set to whatever you want to be displayed example is the \u4e0d\u5be9\u8005 example card (TODO picture) (3) PAPositions field \u00b6 first bolded text found this will be chosen otherwise first pitch in first dictionary is chosen this is usually the pitch that is shown on cards (4) AJTWordPitch field \u00b6 occasionally, pitch accent info not found in your Yomichan dictionaries can show up in the auto-generated AJTWordPitch field in this case, as there is no other option, AJTWordPitch field is used Note If the module is disabled in options file , the displayed pitch accent will be exactly what is shown in AJTWordPitch (or PAOverride ). How the Reading is Selected \u00b6 AJT word pitch by default can include devoiced and nasal info usually katakana with long vowel marks some words don't have long vowel marks (i.e. adjectives ending with \u301c\u3057\u3044 will be displayed as \u301c\u30b7\u30a4 and not \u301c\u30b7\u30fc) ajt word reading must match the reading found in WordReading , otherwise this field is ignored some pre-processing is done to turn this reading into hiragana to be properly searched Otherwise, the card uses the reading from WordReading in katakana. This reading can be changed to hiragana, katakana, or katakana with long vowel marks in options file : \"auto-pitch-accent\": { // 0: hiragana // 1: katakana // 2: katakana with long vowel marks \"reading-display-mode\": 1, ... } Colored Pitch Accent \u00b6 The reading, word and pitch overline can be automatically colored in Migaku style colors, according to the pitch accent. This automatic coloring behavior is disabled by default , and must be enabled in the options file : Enabling colored pitch accent (click here) \"auto-pitch-accent\" : { \"enabled\" : true , // (1)! \"colored-pitch-accent\" : { \"enabled\" : true , // ... } // ... } The auto-pitch-accent module must be enabled to use colored pitch accent. Note The \u8d77\u4f0f pattern is not automatically detected. To use this color, you must manually set the PAOverride field to -1 . Colored Pitch Accent Summary \u00b6 Anki Tag \u65e5\u672c\u8a9e Example Reading heiban \u5e73\u677f \u81ea\u7136 \u3057\u305c\u3093\uffe3 atamadaka \u982d\u9ad8 \u4eba\u751f \u3058\uff3c\u3093\u305b\u3044 nakadaka \u4e2d\u9ad8 \u5f31\u70b9 \u3058\u3083\u304f\u3066\uff3c\u3093 odaka \u5c3e\u9ad8 \u9053\u5177 \u3069\u3046\u3050\uff3c kifuku \u8d77\u4f0f \u9a5a\u304f \u304a\u3069\u308d\uff3c\u304f Position Selection \u00b6 In most all cases, the position should be automatically found and the word can be colored. However, there are two cases where the position cannot be automatically calculated: PAPositions is not filled, but AJTWordPitch is. PAOverride is a non-integer value. Override Colors \u00b6 To manually set the color, the main way (as described above) is by manually setting PAOverride to the correct number number. However, if you are using a non-integer value in PAOverride to override the entire display, you must add the correct tag to your note. The exact tags that can be used are shown in the summary table above, under the Anki Tag and \u65e5\u672c\u8a9e sections. For example, the tag can be heiban , \u5e73\u677f , etc. Note The tag only overrides the pitch accent color, and does not affect the pitch accent representation itself. This fact can be useful for certain exceptions, such as how \u901a\u308b is [1] instead of [2]. If you want to use the \u8d77\u4f0f pattern on \u901a\u308b, you will have to set the PAOverride value to 1 , and then add the \u8d77\u4f0f tag. TODO image of above (without tag, with tag) Pitch Accent Styling Details \u00b6 TODO outdated TODO only if you care about the exact text value TODO what bold does Editing the content in AJTWordPitch requires some special attention. To preserve the style and get expected results, you must use Ctrl + Shift + x when editing the field, and edit the html tags directly. Use other cards as examples of what the html should look like. TODO more details + example (\u83ef) TODO replace with positions :eyes: example of something that has all possible formats (bold, overline, downstep, nasal, devoiced) \u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span >< span class = \"nopron\" > \u30af </ span > \u30bb\u30a4 < b > \u30fb\u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span >< span class = \"nopron\" > \u30af </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30bb\u30a4 </ b > The AJTWordPitch field may have more than one pitch accent for a given word. To choose which pitch accent is correct to the sentence, one can bold the unused pitch accents to grey them out. Bolding the last downstep \u00b6 TODO doesn't work by default with basic ctrl+b attempts seems to be a weird quirk with css injector only solution I know of atm is to edit the raw html and move the </b> to the very end of the html previous: < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30ca </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30b5\u30b1 < b > \u30fb\u30ca < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30b5\u30b1 </ span ></ b >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > after editing the raw html: < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30ca </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30b5\u30b1 < b > \u30fb\u30ca < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30b5\u30b1 </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span ></ b >","title":"Auto Pitch Accent (TODO)"},{"location":"autopa/#how-pitch-accent-is-selected","text":"Pitch accent is selected based on the following priority:","title":"How Pitch Accent is Selected"},{"location":"autopa/#1-paoverride-number","text":"format is any integer (i.e. 0 , 1 , 3 , etc.) represents mora on which the downstep happens ( 0 means no downstep / \u5e73\u677f) -1 sets the downstep to be right before the last mora other negative numbers won't work ( -1 is a special number for the \u8d77\u4f0f pattern) primary way to set/override the pitch accent","title":"(1) PAOverride number"},{"location":"autopa/#2-paoverride-raw-text","text":"set to whatever you want to be displayed example is the \u4e0d\u5be9\u8005 example card (TODO picture)","title":"(2) PAOverride raw text"},{"location":"autopa/#3-papositions-field","text":"first bolded text found this will be chosen otherwise first pitch in first dictionary is chosen this is usually the pitch that is shown on cards","title":"(3) PAPositions field"},{"location":"autopa/#4-ajtwordpitch-field","text":"occasionally, pitch accent info not found in your Yomichan dictionaries can show up in the auto-generated AJTWordPitch field in this case, as there is no other option, AJTWordPitch field is used Note If the module is disabled in options file , the displayed pitch accent will be exactly what is shown in AJTWordPitch (or PAOverride ).","title":"(4) AJTWordPitch field"},{"location":"autopa/#how-the-reading-is-selected","text":"AJT word pitch by default can include devoiced and nasal info usually katakana with long vowel marks some words don't have long vowel marks (i.e. adjectives ending with \u301c\u3057\u3044 will be displayed as \u301c\u30b7\u30a4 and not \u301c\u30b7\u30fc) ajt word reading must match the reading found in WordReading , otherwise this field is ignored some pre-processing is done to turn this reading into hiragana to be properly searched Otherwise, the card uses the reading from WordReading in katakana. This reading can be changed to hiragana, katakana, or katakana with long vowel marks in options file : \"auto-pitch-accent\": { // 0: hiragana // 1: katakana // 2: katakana with long vowel marks \"reading-display-mode\": 1, ... }","title":"How the Reading is Selected"},{"location":"autopa/#colored-pitch-accent","text":"The reading, word and pitch overline can be automatically colored in Migaku style colors, according to the pitch accent. This automatic coloring behavior is disabled by default , and must be enabled in the options file : Enabling colored pitch accent (click here) \"auto-pitch-accent\" : { \"enabled\" : true , // (1)! \"colored-pitch-accent\" : { \"enabled\" : true , // ... } // ... } The auto-pitch-accent module must be enabled to use colored pitch accent. Note The \u8d77\u4f0f pattern is not automatically detected. To use this color, you must manually set the PAOverride field to -1 .","title":"Colored Pitch Accent"},{"location":"autopa/#colored-pitch-accent-summary","text":"Anki Tag \u65e5\u672c\u8a9e Example Reading heiban \u5e73\u677f \u81ea\u7136 \u3057\u305c\u3093\uffe3 atamadaka \u982d\u9ad8 \u4eba\u751f \u3058\uff3c\u3093\u305b\u3044 nakadaka \u4e2d\u9ad8 \u5f31\u70b9 \u3058\u3083\u304f\u3066\uff3c\u3093 odaka \u5c3e\u9ad8 \u9053\u5177 \u3069\u3046\u3050\uff3c kifuku \u8d77\u4f0f \u9a5a\u304f \u304a\u3069\u308d\uff3c\u304f","title":"Colored Pitch Accent Summary"},{"location":"autopa/#position-selection","text":"In most all cases, the position should be automatically found and the word can be colored. However, there are two cases where the position cannot be automatically calculated: PAPositions is not filled, but AJTWordPitch is. PAOverride is a non-integer value.","title":"Position Selection"},{"location":"autopa/#override-colors","text":"To manually set the color, the main way (as described above) is by manually setting PAOverride to the correct number number. However, if you are using a non-integer value in PAOverride to override the entire display, you must add the correct tag to your note. The exact tags that can be used are shown in the summary table above, under the Anki Tag and \u65e5\u672c\u8a9e sections. For example, the tag can be heiban , \u5e73\u677f , etc. Note The tag only overrides the pitch accent color, and does not affect the pitch accent representation itself. This fact can be useful for certain exceptions, such as how \u901a\u308b is [1] instead of [2]. If you want to use the \u8d77\u4f0f pattern on \u901a\u308b, you will have to set the PAOverride value to 1 , and then add the \u8d77\u4f0f tag. TODO image of above (without tag, with tag)","title":"Override Colors"},{"location":"autopa/#pitch-accent-styling-details","text":"TODO outdated TODO only if you care about the exact text value TODO what bold does Editing the content in AJTWordPitch requires some special attention. To preserve the style and get expected results, you must use Ctrl + Shift + x when editing the field, and edit the html tags directly. Use other cards as examples of what the html should look like. TODO more details + example (\u83ef) TODO replace with positions :eyes: example of something that has all possible formats (bold, overline, downstep, nasal, devoiced) \u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span >< span class = \"nopron\" > \u30af </ span > \u30bb\u30a4 < b > \u30fb\u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span >< span class = \"nopron\" > \u30af </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30bb\u30a4 </ b > The AJTWordPitch field may have more than one pitch accent for a given word. To choose which pitch accent is correct to the sentence, one can bold the unused pitch accents to grey them out.","title":"Pitch Accent Styling Details"},{"location":"autopa/#bolding-the-last-downstep","text":"TODO doesn't work by default with basic ctrl+b attempts seems to be a weird quirk with css injector only solution I know of atm is to edit the raw html and move the </b> to the very end of the html previous: < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30ca </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30b5\u30b1 < b > \u30fb\u30ca < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30b5\u30b1 </ span ></ b >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > after editing the raw html: < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30ca </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30b5\u30b1 < b > \u30fb\u30ca < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30b5\u30b1 </ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span ></ b >","title":"Bolding the last downstep"},{"location":"building/","text":"Technical Summary \u00b6 The Anki card template is generated through jinja templates, which is a popular templating engine for Python . All of these templates are located under the (root)/src folder. The Anki templates are generated through a combination of sass (for css) and jinja (for everything else), through the tools/make.py script. You must build the note to use compile-time options . Additionally, if you want to use bleeding edge features (the absolute latest features, which are potentially riddled with bugs), you must build and install the note from the master branch. More info about this is shown later. Note The instructions listed below will be primarily Linux based. Notes for other operating systems may be shown, but are not guaranteed. It is also assumed that you have knowledge of basic command line. Building \u00b6 Prerequisites \u00b6 Python 3.10.6 or higher I recommend pyenv to upgrade your python version if you're running linux. and have a lower version of Python. sass (dart implementation) The dart implementation is required to use the latest features of sass. Anki 2.1.49 or higher (2.1.54+ is highly recommended) Anki-Connect addon Initialization \u00b6 The following creates a custom python environment with venv , so that packages aren't installed into your global python environment. git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git cd jp-mining-note # alternatively, if you already have the repository on your system: git pull origin/master # You may have to use `python` instead of `python3`, and `pip` instead of `pip3`. python3 -m venv . # The following is for POSIX (bash/zsh) only. # See how to activate venv on your system in the official documentation: # https://docs.python.org/3/library/venv.html source ./bin/activate pip3 install -r tools/requirements.txt Some additional options with venv are shown below. Disabling the venv deactivate Resetting the venv # run this only if you're already in a venv deactivate rm -r bin lib python3 -m venv . source ./bin/activate pip3 install -r tools/requirements.txt Don't want to use venv? It is highly recommended that you use venv , or something else that isolates the python environment. However, in case you don't want to use venv , you can manually install the dependencies (including dependencies for building documentation): pip3 install \\ JSON-minify jinja2 black pytest \\ mkdocs mkdocs-video mkdocs-material mkdocs-macros-plugin \\ mkdocs-git-revision-date-localized-plugin Note The master branch is the bleeding edge version of the note. If you want to build a more stable version of the note, do the following: git fetch git checkout tags/TAG_NAME # or if you want to create a new branch as well: git checkout tags/TAG_NAME -b BRANCH_NAME # to return back to the master branch, after you're done building: git checkout master Building and Installing \u00b6 After setting up the venv , you are ready to build and install the note. cd tools # Builds into a temporary folder and installs # WARNING: completely overrides current note that is installed python3 ./main.py Note Running the main.py script is equivalent of running: # builds the note into the ./build folder python3 make.py # installs the note from the ./build folder python3 install.py --from-build --update Note If you are attempting to (build and) install the bleeding edge version of the note on an Anki profile that does NOT already have the note installed, you have to run the installation script twice. For example: python3 main.py python3 install.py --from-build --update Additional things you can do with the project are shown below. Running Tests \u00b6 cd tools python3 -m pytest ./tests Building the Documentation \u00b6 To \"build\" the documentation, all you have to do is the following: cd docs # you should now be in (root)/docs, where the mkdocs.yml is. mkdocs serve This will allow you to preview the website (usually at http://127.0.0.1:8000/jp-mining-note/ ). If you are looking to edit the documentation, all related files should be found under this docs folder. The important markdown files are found under: (root) L docs L docs L index.md # the home page L preface.md L setup.md L ... L mkdocs.yml Common Errors \u00b6 (TODO) Fill this out as people start working with this note Conclusion \u00b6 After your first successful build, you can now use compile-time options! See this page for more info.","title":"Building"},{"location":"building/#technical-summary","text":"The Anki card template is generated through jinja templates, which is a popular templating engine for Python . All of these templates are located under the (root)/src folder. The Anki templates are generated through a combination of sass (for css) and jinja (for everything else), through the tools/make.py script. You must build the note to use compile-time options . Additionally, if you want to use bleeding edge features (the absolute latest features, which are potentially riddled with bugs), you must build and install the note from the master branch. More info about this is shown later. Note The instructions listed below will be primarily Linux based. Notes for other operating systems may be shown, but are not guaranteed. It is also assumed that you have knowledge of basic command line.","title":"Technical Summary"},{"location":"building/#building","text":"","title":"Building"},{"location":"building/#prerequisites","text":"Python 3.10.6 or higher I recommend pyenv to upgrade your python version if you're running linux. and have a lower version of Python. sass (dart implementation) The dart implementation is required to use the latest features of sass. Anki 2.1.49 or higher (2.1.54+ is highly recommended) Anki-Connect addon","title":"Prerequisites"},{"location":"building/#initialization","text":"The following creates a custom python environment with venv , so that packages aren't installed into your global python environment. git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git cd jp-mining-note # alternatively, if you already have the repository on your system: git pull origin/master # You may have to use `python` instead of `python3`, and `pip` instead of `pip3`. python3 -m venv . # The following is for POSIX (bash/zsh) only. # See how to activate venv on your system in the official documentation: # https://docs.python.org/3/library/venv.html source ./bin/activate pip3 install -r tools/requirements.txt Some additional options with venv are shown below. Disabling the venv deactivate Resetting the venv # run this only if you're already in a venv deactivate rm -r bin lib python3 -m venv . source ./bin/activate pip3 install -r tools/requirements.txt Don't want to use venv? It is highly recommended that you use venv , or something else that isolates the python environment. However, in case you don't want to use venv , you can manually install the dependencies (including dependencies for building documentation): pip3 install \\ JSON-minify jinja2 black pytest \\ mkdocs mkdocs-video mkdocs-material mkdocs-macros-plugin \\ mkdocs-git-revision-date-localized-plugin Note The master branch is the bleeding edge version of the note. If you want to build a more stable version of the note, do the following: git fetch git checkout tags/TAG_NAME # or if you want to create a new branch as well: git checkout tags/TAG_NAME -b BRANCH_NAME # to return back to the master branch, after you're done building: git checkout master","title":"Initialization"},{"location":"building/#building-and-installing","text":"After setting up the venv , you are ready to build and install the note. cd tools # Builds into a temporary folder and installs # WARNING: completely overrides current note that is installed python3 ./main.py Note Running the main.py script is equivalent of running: # builds the note into the ./build folder python3 make.py # installs the note from the ./build folder python3 install.py --from-build --update Note If you are attempting to (build and) install the bleeding edge version of the note on an Anki profile that does NOT already have the note installed, you have to run the installation script twice. For example: python3 main.py python3 install.py --from-build --update Additional things you can do with the project are shown below.","title":"Building and Installing"},{"location":"building/#running-tests","text":"cd tools python3 -m pytest ./tests","title":"Running Tests"},{"location":"building/#building-the-documentation","text":"To \"build\" the documentation, all you have to do is the following: cd docs # you should now be in (root)/docs, where the mkdocs.yml is. mkdocs serve This will allow you to preview the website (usually at http://127.0.0.1:8000/jp-mining-note/ ). If you are looking to edit the documentation, all related files should be found under this docs folder. The important markdown files are found under: (root) L docs L docs L index.md # the home page L preface.md L setup.md L ... L mkdocs.yml","title":"Building the Documentation"},{"location":"building/#common-errors","text":"(TODO) Fill this out as people start working with this note","title":"Common Errors"},{"location":"building/#conclusion","text":"After your first successful build, you can now use compile-time options! See this page for more info.","title":"Conclusion"},{"location":"cardtypes/","text":"Previously, this note type only had vocab and sentence cards. Although I was originally fine with this, I started to realize some issues with only having these two card types: Vocab cards that require context have to be turned into sentence cards, and Sentence cards take a very long time to review, and can create context-based memories. I found that many vocab cards had to be turned into sentence cards, since either the context was fundamental to understanding the definition, or there were other parts of the sentence that I wanted to test. This lead to many sentence cards, which naturally meant that Anki sessions lasted longer. I attempted to tackle these exact issues by introducing new card types outside of the fundamental vocab and sentence cards. Vocab Card \u00b6 A vocab card simply shows the target word at the front. You test yourself on the reading and definition of the word. How to create: This is the default card type. Nothing has to be done for the card to be a vocab card. Sentence Card \u00b6 A sentence card simply shows the entire sentence at the front. You test yourself on the reading and meaning of the entire sentence. How to create: Fill the IsSentenceCard field. Targetted Sentence Card (TSC) \u00b6 A targetted sentence card is a special case of the sentence card. The sentence is shown at the front, but only the highlighted content (only the word by default) is tested. This allows you to have all the information and context of the sentence, but you don't have to waste your time testing other parts of the sentence. This card type was originally defined here . How to create: Fill the IsTargetedSentenceCard field. Hybrid Cards \u00b6 Hybrid cards are a group of card types that attempt to combine the power of sentence cards and vocab cards into one. They all have the distinct feature that the word is shown at the front, but the sentence can be shown through some natural means. Additionally, all hybrid cards have some form of underline beneath the tested word, to differentiate it between a vocab card. The primary reason why this exists is to prevent context-based memories. For example, in a TSC or sentence card, you may only remember the tested word due to its surrounding context. Note For all forms of hybrid cards, you can press \"n\" to toggle whether the sentence is shown or not. Hover Vocab Card \u00b6 A hover vocab word shows the tested word at the front. When you hover over the word, you can see the full sentence, with the tested word highlighted. This acts similarly to a vocab card. However, you are given the option to see the full sentence without failing the card. This is also known as the fallback card . Indicator: Grey & dotted underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. If you are able to guess both the reading and definition of the word, flip the card. Otherwise, hover over the word and guess the reading and definition of the word with the entire sentence. How to create: Fill the IsHoverCard field. Click Vocab Card \u00b6 A click vocab word shows the tested word at the front. When you click on the word, you can see the full sentence, with the tested word highlighted. This card acts as an intermediary between the hover vocab card and the vocab card itself. You must guess the reading BEFORE revealing the sentence, but you can use the sentence to guess the definition. Indicator: Grey & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, you can optionally click on the word to reveal the entire sentence to guess the definition. In other words, if you can only guess the definition by reading the sentence, then the card should still be passed. How to create: Fill the IsClickCard field. Hover Sentence Card \u00b6 This acts similarly to the hover vocab card. However, the tested content is the entire sentence, so you must hover over the word to test the entire sentence. Indicator: Colored word & dotted underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. Regardless of whether you are able to guess the reading and definition of the word, hover over the word and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsHoverCard and IsSentenceCard fields. Click Sentence Card \u00b6 This acts similar to the click vocab card. However, similarly to the hover sentence card, the tested content is the entire display, so you must click the word to test the entire display Indicator: Colored word & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, click on the word to reveal the entire sentence, and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsClickCard and IsSentenceCard fields. Hybrid TSC \u00b6 Similarly to the normal TSC, if you want to use the hover sentence card or click sentence card to only test a specific portion of the sentence, you can bold the desired selection of the sentence and fill IsTargetedSentenceCard . The above example is a Hover TSC, with the last sentence was bolded. Card Creation Summary \u00b6 IsSentenceCard IsTargetedSentenceCard IsClickCard IsHoverCard Result (Card Type) Vocab Card x Sentence Card x TSC x Click Vocab x x Click Sentence x x Click TSC x Hover Vocab x x Hover Sentence x x Hover TSC","title":"Card Types"},{"location":"cardtypes/#vocab-card","text":"A vocab card simply shows the target word at the front. You test yourself on the reading and definition of the word. How to create: This is the default card type. Nothing has to be done for the card to be a vocab card.","title":"Vocab Card"},{"location":"cardtypes/#sentence-card","text":"A sentence card simply shows the entire sentence at the front. You test yourself on the reading and meaning of the entire sentence. How to create: Fill the IsSentenceCard field.","title":"Sentence Card"},{"location":"cardtypes/#targetted-sentence-card-tsc","text":"A targetted sentence card is a special case of the sentence card. The sentence is shown at the front, but only the highlighted content (only the word by default) is tested. This allows you to have all the information and context of the sentence, but you don't have to waste your time testing other parts of the sentence. This card type was originally defined here . How to create: Fill the IsTargetedSentenceCard field.","title":"Targetted Sentence Card (TSC)"},{"location":"cardtypes/#hybrid-cards","text":"Hybrid cards are a group of card types that attempt to combine the power of sentence cards and vocab cards into one. They all have the distinct feature that the word is shown at the front, but the sentence can be shown through some natural means. Additionally, all hybrid cards have some form of underline beneath the tested word, to differentiate it between a vocab card. The primary reason why this exists is to prevent context-based memories. For example, in a TSC or sentence card, you may only remember the tested word due to its surrounding context. Note For all forms of hybrid cards, you can press \"n\" to toggle whether the sentence is shown or not.","title":"Hybrid Cards"},{"location":"cardtypes/#hover-vocab-card","text":"A hover vocab word shows the tested word at the front. When you hover over the word, you can see the full sentence, with the tested word highlighted. This acts similarly to a vocab card. However, you are given the option to see the full sentence without failing the card. This is also known as the fallback card . Indicator: Grey & dotted underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. If you are able to guess both the reading and definition of the word, flip the card. Otherwise, hover over the word and guess the reading and definition of the word with the entire sentence. How to create: Fill the IsHoverCard field.","title":"Hover Vocab Card"},{"location":"cardtypes/#click-vocab-card","text":"A click vocab word shows the tested word at the front. When you click on the word, you can see the full sentence, with the tested word highlighted. This card acts as an intermediary between the hover vocab card and the vocab card itself. You must guess the reading BEFORE revealing the sentence, but you can use the sentence to guess the definition. Indicator: Grey & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, you can optionally click on the word to reveal the entire sentence to guess the definition. In other words, if you can only guess the definition by reading the sentence, then the card should still be passed. How to create: Fill the IsClickCard field.","title":"Click Vocab Card"},{"location":"cardtypes/#hover-sentence-card","text":"This acts similarly to the hover vocab card. However, the tested content is the entire sentence, so you must hover over the word to test the entire sentence. Indicator: Colored word & dotted underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. Regardless of whether you are able to guess the reading and definition of the word, hover over the word and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsHoverCard and IsSentenceCard fields.","title":"Hover Sentence Card"},{"location":"cardtypes/#click-sentence-card","text":"This acts similar to the click vocab card. However, similarly to the hover sentence card, the tested content is the entire display, so you must click the word to test the entire display Indicator: Colored word & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, click on the word to reveal the entire sentence, and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsClickCard and IsSentenceCard fields.","title":"Click Sentence Card"},{"location":"cardtypes/#hybrid-tsc","text":"Similarly to the normal TSC, if you want to use the hover sentence card or click sentence card to only test a specific portion of the sentence, you can bold the desired selection of the sentence and fill IsTargetedSentenceCard . The above example is a Hover TSC, with the last sentence was bolded.","title":"Hybrid TSC"},{"location":"cardtypes/#card-creation-summary","text":"IsSentenceCard IsTargetedSentenceCard IsClickCard IsHoverCard Result (Card Type) Vocab Card x Sentence Card x TSC x Click Vocab x x Click Sentence x x Click TSC x Hover Vocab x x Hover Sentence x x Hover TSC","title":"Card Creation Summary"},{"location":"compileopts/","text":"Overview \u00b6 After building the note , a new file config/config.py should appear. The compile-time options can be found in this file. To use these compile-time options, edit the config.py file, and then re-build the note. Warning Do not edit the config/example_config.py file. The example config file can be updated at any time, so if you update the example config, it may result in unnecessary merge conflicts. Optimized Vocab Card Example \u00b6 An example set of compile-time options to create a more optimized vocab card is shown below. Vocab card compile-time options example \"compile-options\" : { \"keybinds-enabled\" : False , \"hardcoded-runtime-options\" : True , \"always-filled-fields\" : [], \"never-filled-fields\" : [ \"PAShowInfo\" , \"PATestOnlyWord\" , \"PADoNotTest\" , \"PASeparateWordCard\" , \"PASeparateSentenceCard\" , \"AltDisplayPASentenceCard\" , \"SeparateClozeDeletionCard\" , \"IsClickCard\" , \"IsHoverCard\" , \"IsSentenceCard\" , \"IsTargetedSentenceCard\" , ], \"enabled-modules\" : [ # HIGHLY RECOMMENDED t o have t his e na bled i f you wa nt a n ice looki n g card # (u nless you are n o t usi n g images i n your cards o f course) \"img-utils\" , # \"sent-utils\" , # \"kanji-hover\" , # \"auto-pitch-accent\" , # \"open_on_new\" , ], } Always filled & Never filled fields \u00b6 You can set a field to act as if it has always been filled, or it has never been filled, using the always-filled-fields and never-filled-fields options. This will remove the conditional Anki templates ( {{#FIELD}} and {{^FIELD}} markers) for the specified fields. Example If your compile-options is: \"compile-options\": { ... \"always-filled-fields\": [\"A\"], \"never-filled-fields\": [\"B\"], ... } and your card template is: {{#A}} A is filled {{/A}} {{^A}} A is not filled {{/A}} {{#B}} B is filled {{/B}} {{^B}} B is not filled {{/B}} {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} then upon card build, the resulting card template will be: A is filled B is not filled {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} This usually renders the actual field value useless. In other words, filling the field for a note will have no effect on the cards. Warning Do not delete the field from the fields list! See here for more details. Custom Runtime Options \u00b6 The runtime options file (default: config/jpmn_opts.jsonc ) can be specified at build time. It is highly recommended that you create your own runtime options file, so you can edit the options at build time. Here is how you can create and use a custom runtime options file: Create the local runtime options file (e.g. user_jpmn_opts.jsonc ) cd config cp jpmn_opts.jsonc user_jpmn_opts.jsonc Change opts-path under config/config.py : \"opts-path\": \"user_jpmn_opts.jsonc\", (optional) Make the runtime options hard-coded to remove the file dependency during runtime, by changing the following setting in config/config.py : \"compile-options\": { \"hardcoded-runtime-options\": True, } Build and install the note as normal. Note If you are not using hard-coded runtime options and you have edited the contents of the local runtime options file, please run the installation script with --install-options to replace the existing options file in Anki's media folder. Custom External Links \u00b6 New in version 0.10.3.0 (latest version: 0.10.3.0 ) Custom external links can be specified under the external-links section. Creating external links is self explanatory and is explained further in the config file. Additionally, some commented-out examples are provided within the file. If you want to remove all external links, do the following: \"external-links\": {}, Multiple Character Icons \u00b6 When using text instead of a picture, it is recommended that you use single characters (e.g. one kanji) to represent the icon. However, in the cases where you want to use more characters, the default CSS rules causes the icon will use the minimum amount of space, which may mis-aligned the surrounding icons. Using the custom SCSS , you can specify the amount of space it takes (in terms of number of icons): @use \"../base/common\" as common ; .glossary__external-links a [ data-details = \"DICTIONARY_ID\" ] { // (1)! width : common .maxWidthForXIcons ( 2 ); } The DICTIONARY_ID are the key values of external-links . For example, the id of the jpdb.io entry below is exactly jpdb.io . \"jpdb.io\" : { \"icon-type\" : \"image\" , \"icon-image-light\" : \"_icon_jpdb_lightmode.png\" , \"icon-image-dark\" : \"_icon_jpdb_darkmode.png\" , \"url\" : \"https://jpdb.io/search?q={{text:Word}}\" } Warning This SCSS code is NOT CSS . This cannot be added directly to the template's style sheet in Anki. Please see the link above to see how to use custom SCSS. An example of this can be found in src/scss/dictionaries/style.scss Conclusion \u00b6 Although compile-time options are useful for various simple tasks, they may not give you everything you want. See the modding page to see how to make changes to your heart's content.","title":"Compile-Time Options"},{"location":"compileopts/#overview","text":"After building the note , a new file config/config.py should appear. The compile-time options can be found in this file. To use these compile-time options, edit the config.py file, and then re-build the note. Warning Do not edit the config/example_config.py file. The example config file can be updated at any time, so if you update the example config, it may result in unnecessary merge conflicts.","title":"Overview"},{"location":"compileopts/#optimized-vocab-card-example","text":"An example set of compile-time options to create a more optimized vocab card is shown below. Vocab card compile-time options example \"compile-options\" : { \"keybinds-enabled\" : False , \"hardcoded-runtime-options\" : True , \"always-filled-fields\" : [], \"never-filled-fields\" : [ \"PAShowInfo\" , \"PATestOnlyWord\" , \"PADoNotTest\" , \"PASeparateWordCard\" , \"PASeparateSentenceCard\" , \"AltDisplayPASentenceCard\" , \"SeparateClozeDeletionCard\" , \"IsClickCard\" , \"IsHoverCard\" , \"IsSentenceCard\" , \"IsTargetedSentenceCard\" , ], \"enabled-modules\" : [ # HIGHLY RECOMMENDED t o have t his e na bled i f you wa nt a n ice looki n g card # (u nless you are n o t usi n g images i n your cards o f course) \"img-utils\" , # \"sent-utils\" , # \"kanji-hover\" , # \"auto-pitch-accent\" , # \"open_on_new\" , ], }","title":"Optimized Vocab Card Example"},{"location":"compileopts/#always-filled-never-filled-fields","text":"You can set a field to act as if it has always been filled, or it has never been filled, using the always-filled-fields and never-filled-fields options. This will remove the conditional Anki templates ( {{#FIELD}} and {{^FIELD}} markers) for the specified fields. Example If your compile-options is: \"compile-options\": { ... \"always-filled-fields\": [\"A\"], \"never-filled-fields\": [\"B\"], ... } and your card template is: {{#A}} A is filled {{/A}} {{^A}} A is not filled {{/A}} {{#B}} B is filled {{/B}} {{^B}} B is not filled {{/B}} {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} then upon card build, the resulting card template will be: A is filled B is not filled {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} This usually renders the actual field value useless. In other words, filling the field for a note will have no effect on the cards. Warning Do not delete the field from the fields list! See here for more details.","title":"Always filled &amp; Never filled fields"},{"location":"compileopts/#custom-runtime-options","text":"The runtime options file (default: config/jpmn_opts.jsonc ) can be specified at build time. It is highly recommended that you create your own runtime options file, so you can edit the options at build time. Here is how you can create and use a custom runtime options file: Create the local runtime options file (e.g. user_jpmn_opts.jsonc ) cd config cp jpmn_opts.jsonc user_jpmn_opts.jsonc Change opts-path under config/config.py : \"opts-path\": \"user_jpmn_opts.jsonc\", (optional) Make the runtime options hard-coded to remove the file dependency during runtime, by changing the following setting in config/config.py : \"compile-options\": { \"hardcoded-runtime-options\": True, } Build and install the note as normal. Note If you are not using hard-coded runtime options and you have edited the contents of the local runtime options file, please run the installation script with --install-options to replace the existing options file in Anki's media folder.","title":"Custom Runtime Options"},{"location":"compileopts/#custom-external-links","text":"New in version 0.10.3.0 (latest version: 0.10.3.0 ) Custom external links can be specified under the external-links section. Creating external links is self explanatory and is explained further in the config file. Additionally, some commented-out examples are provided within the file. If you want to remove all external links, do the following: \"external-links\": {},","title":"Custom External Links"},{"location":"compileopts/#multiple-character-icons","text":"When using text instead of a picture, it is recommended that you use single characters (e.g. one kanji) to represent the icon. However, in the cases where you want to use more characters, the default CSS rules causes the icon will use the minimum amount of space, which may mis-aligned the surrounding icons. Using the custom SCSS , you can specify the amount of space it takes (in terms of number of icons): @use \"../base/common\" as common ; .glossary__external-links a [ data-details = \"DICTIONARY_ID\" ] { // (1)! width : common .maxWidthForXIcons ( 2 ); } The DICTIONARY_ID are the key values of external-links . For example, the id of the jpdb.io entry below is exactly jpdb.io . \"jpdb.io\" : { \"icon-type\" : \"image\" , \"icon-image-light\" : \"_icon_jpdb_lightmode.png\" , \"icon-image-dark\" : \"_icon_jpdb_darkmode.png\" , \"url\" : \"https://jpdb.io/search?q={{text:Word}}\" } Warning This SCSS code is NOT CSS . This cannot be added directly to the template's style sheet in Anki. Please see the link above to see how to use custom SCSS. An example of this can be found in src/scss/dictionaries/style.scss","title":"Multiple Character Icons"},{"location":"compileopts/#conclusion","text":"Although compile-time options are useful for various simple tasks, they may not give you everything you want. See the modding page to see how to make changes to your heart's content.","title":"Conclusion"},{"location":"faq/","text":"Errors & Warnings \u00b6 This section documents frequent errors that may show up on the info circle at the top right. (Error) AnkiConnect failed to issue request. \u00b6 This is an indication that Anki-Connect is failing. There are two main reasons that Anki-Connect can fail: Ensure that Anki-Connect is installed. If it is installed, be sure to restart Anki to ensure the add-on is actually running. If you are using an older version of Anki (2.1.49 and below), see the note in the Anki-Connect setup section here . (Warning) JPMNOpts was not defined in the options file. Was there an error? \u00b6 If you see this as an isolated warning without any other errors, it is very likely that you are using Anki version 2.1.49 or below. Please check your Anki version to confirm this: Main Window \u2192 Help \u2192 About... If your Anki version is indeed 2.1.49 or below, then this should only appear on the front side of your first card of the session. To check, try flipping the card and back. This warning should dissappear once you do. The only side effect of this is that the user-defined runtime options will not be used for the front side of the first card, and the defaults will be used instead. There are two ways to fix this: Update Anki to a higher version. Compile the card with hard-coded defaults . Why this happens (click here) The <script ... src=\"_jpmn-options.js\"> tag seems to runs asynchronously on 2.1.49 and below, meaning that the order of when this is ran is not constant compared to the main javascript block. With that being said, the exact tag seems to run synchronously on 2.1.50 and above, so it is guaranteed to run before the main javascript block on these versions. With my current knowledge, the only way to guarantee the order of this import is asynchronous functions, or some other asynchronous features. For example, a simple await import(...) should work. However, asynchronous features have been avoided throughout the development of this, as it currently seems to behave unpredictably within Anki. General Error Troubleshooting \u00b6 If none of the above worked, the following will be some general troubleshooting tips that can help you figure out what the error is: Try disabling all of your add-ons other than the mandatory ones listed in the setup page. Note that you have to restart Anki after disabling the add-ons for the changes to take effect. If it works after this step, please let me know which add-on(s) conflicts with this note type! To do this, re-enable the add-ons one-by-one (remembering to restart Anki each time!). With all of your non-mandatory add-ons disabled, try to upgrade Anki to the latest version, and see if the issue still persists. If this works but an add-on you consider mandatory no longer works, please let me know! (I won't be able to upgrade the add-on for you, but I can potentially point to alternatives and/or add it to the documentation somewhere so others are aware of the issue.) If you can't manage to fix it, please reach out to me on Discord , or submit an issue! Troubleshooting \u00b6 The sentence quotes are on completely different lines! \u00b6 If your card looks like this: then your Sentence field is likely formatted internally similar to the following example: < div > \u305d\u3046\u30c7\u30b9\u30b5\u30fc\u30f4\u30a1\u30f3\u30c8\u306e\u51f8\u5b88\u3092 < b > \u5dee\u3057\u7f6e\u3044\u3066 </ b ></ div > < div > \u30de\u30b9\u30bf\u30fc\u3068\u884c\u52d5\u3092\u5171\u306b\u3059\u308b\u3068\u306f\u4e07\u6b7b\u306b\u5024\u3059\u308b\u30c7\u30fc\u30b9 </ div > To fix this, edit the Sentence field html to remove the <div> tags, and add <br> tags wherever a line break should appear. For example, the above should be changed into: \u305d\u3046\u30c7\u30b9\u30b5\u30fc\u30f4\u30a1\u30f3\u30c8\u306e\u51f8\u5b88\u3092 < b > \u5dee\u3057\u7f6e\u3044\u3066 </ b >< br > \u30de\u30b9\u30bf\u30fc\u3068\u884c\u52d5\u3092\u5171\u306b\u3059\u308b\u3068\u306f\u4e07\u6b7b\u306b\u5024\u3059\u308b\u30c7\u30fc\u30b9 Why this can happen (click here) This happens if you copy/paste directly from certain pages into the sentence field, such as some texthooker pages. This can also happen if you copy/paste from a texthooker page to a different field, say AdditionalNotes , and then copy a section of AdditionalNotes to Sentence . The updating sentence with clipboard hotkey shouldn't have this problem, as <div> tags are not present by default. The Show/Hide button doesn't do anything. \u00b6 The show/hide button requires that the displayed sentence has a bolded element. For example, this means if the currently displayed sentence comes from the AltDisplay field and nothing in that field is bolded, then the show/hide button will do nothing. The replay audio button plays the sentence, word, and then sentence. \u00b6 This is playing the audio from the front of the card, and then the back of the card, in sequence. To fix it so you only hear the audio displayed in the back of the card, go to: Decks (main anki browser) \u2192 Deck settings (the gear beside your deck) \u2192 Options \u2192 Audio section \u2192 Toggle Skip question when replaying answer Card Editing \u00b6 How do I use this note type as an Anime Card? \u00b6 Anime Cards are simply regular vocab cards with a non-collapsable hint field. To use this as an Anime Card, follow the steps to make a vocab card ( here ), and use the HintNotHidden field for your hint. How do I change the default value of a binary field? \u00b6 In Yomichan Format, you can simply toggle the field. Any new card that is created will now default to that default value. Of course, this will not affect existing cards. To change existing cards, I recommend bulk-editing your cards, say, with this add-on . Warning As always, before mass editing your collection, please backup your Anki data . Alternatively, you can use the following commands to bulk edit your cards in the current deck: # assuming you are at the root of the repo, # i.e. after the `git clone ...` and `cd jp-mining-note` cd ./tools # sets all `IsSentenceCard` fields to be filled python3 batch.py --fill-field \"IsSentenceCard\" # empties all `IsSentenceCard` fields python3 batch.py --empty-field \"IsSentenceCard\" Note You technically have a second option, and that is to change the code itself (i.e. flip # with ^ for the desired field). However, you should only do this if you know what you are doing, and are fine with knowing that you may lose those changes if you update this note. How do I remove an empty card without deleting the entire note? \u00b6 Quote To remove the empty cards, go to Tools \u2192 Empty Cards in the main window. You will be shown a list of empty cards and be given the option to delete them. Taken from the official Anki documentation . How do I edit the field's raw HTML? \u00b6 Within the card browser, select a field to edit, and then type ctrl+shift+x . Alternatively, on newer versions of Anki, you can click on the top-right corner on the code button. Other Questions \u00b6 Where is the (X) folder in Anki? \u00b6 See the official documentation to find the Anki2 folder. Your profile folder is under Anki2/PROFILE_NAME . Your media folder is under Anki2/PROFILE_NAME/collections.media . Your addons folder is under Anki2/addons21 . How do I backup my Anki data? \u00b6 The following makes a complete backup of your collection, including media. Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package The following makes a temporary backup of your collection, not including media Main Window \u2192 File (top left corner) \u2192 Create Backup See the official documentation for more info. How do I backup Yomichan settings? \u00b6 Navigate to Yomichan Settings. Go to the Backup section Select Export Settings What card type should I use? \u00b6 The short answer is: whichever one you want. :) The long answer is: whichever one you want, because everyone has their own preferences on what card types they like. I recommend being open about it and experiment with them, to see which one you like. What is the point of the PASilence field? \u00b6 This is a hack to not play the sentence audio on the front side, even if you set-up your Anki client to do so. Removing this field will affect cards where you test pitch accent, i.e. with PAShowInfo filled. How do you see the currently installed version of this note? \u00b6 Preview any card. At the top left corner, the version should be displayed. Do you plan on supporting any other language other than Japanese? \u00b6 Unfortunately, other languages outside of Japanese will not be supported. The reason for this decision is best explained in the \"When are you going to add support for $MYLANGUAGE?\" question within Yomichan's README : Quote Developing Yomichan requires a decent understanding of Japanese sentence structure and grammar, and other languages are likely to have their own unique set of rules for syntax, grammar, inflection, and so on. Supporting additional languages would not only require many additional changes to the codebase, it would also incur significant maintenance overhead and knowledge demands for the developers. Therefore, suggestions and contributions for supporting new languages will be declined, allowing Yomichan's focus to remain Japanese-centric. Discord Contact Info \u00b6 Username: Aquafina water bottle#3026 (user id: 244677612272746496 ) Servers: TheMoeWay and Refold (JP) server.","title":"FAQ & Troubleshooting"},{"location":"faq/#errors-warnings","text":"This section documents frequent errors that may show up on the info circle at the top right.","title":"Errors &amp; Warnings"},{"location":"faq/#error-ankiconnect-failed-to-issue-request","text":"This is an indication that Anki-Connect is failing. There are two main reasons that Anki-Connect can fail: Ensure that Anki-Connect is installed. If it is installed, be sure to restart Anki to ensure the add-on is actually running. If you are using an older version of Anki (2.1.49 and below), see the note in the Anki-Connect setup section here .","title":"(Error) AnkiConnect failed to issue request."},{"location":"faq/#warning-jpmnopts-was-not-defined-in-the-options-file-was-there-an-error","text":"If you see this as an isolated warning without any other errors, it is very likely that you are using Anki version 2.1.49 or below. Please check your Anki version to confirm this: Main Window \u2192 Help \u2192 About... If your Anki version is indeed 2.1.49 or below, then this should only appear on the front side of your first card of the session. To check, try flipping the card and back. This warning should dissappear once you do. The only side effect of this is that the user-defined runtime options will not be used for the front side of the first card, and the defaults will be used instead. There are two ways to fix this: Update Anki to a higher version. Compile the card with hard-coded defaults . Why this happens (click here) The <script ... src=\"_jpmn-options.js\"> tag seems to runs asynchronously on 2.1.49 and below, meaning that the order of when this is ran is not constant compared to the main javascript block. With that being said, the exact tag seems to run synchronously on 2.1.50 and above, so it is guaranteed to run before the main javascript block on these versions. With my current knowledge, the only way to guarantee the order of this import is asynchronous functions, or some other asynchronous features. For example, a simple await import(...) should work. However, asynchronous features have been avoided throughout the development of this, as it currently seems to behave unpredictably within Anki.","title":"(Warning) JPMNOpts was not defined in the options file. Was there an error?"},{"location":"faq/#general-error-troubleshooting","text":"If none of the above worked, the following will be some general troubleshooting tips that can help you figure out what the error is: Try disabling all of your add-ons other than the mandatory ones listed in the setup page. Note that you have to restart Anki after disabling the add-ons for the changes to take effect. If it works after this step, please let me know which add-on(s) conflicts with this note type! To do this, re-enable the add-ons one-by-one (remembering to restart Anki each time!). With all of your non-mandatory add-ons disabled, try to upgrade Anki to the latest version, and see if the issue still persists. If this works but an add-on you consider mandatory no longer works, please let me know! (I won't be able to upgrade the add-on for you, but I can potentially point to alternatives and/or add it to the documentation somewhere so others are aware of the issue.) If you can't manage to fix it, please reach out to me on Discord , or submit an issue!","title":"General Error Troubleshooting"},{"location":"faq/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"faq/#the-sentence-quotes-are-on-completely-different-lines","text":"If your card looks like this: then your Sentence field is likely formatted internally similar to the following example: < div > \u305d\u3046\u30c7\u30b9\u30b5\u30fc\u30f4\u30a1\u30f3\u30c8\u306e\u51f8\u5b88\u3092 < b > \u5dee\u3057\u7f6e\u3044\u3066 </ b ></ div > < div > \u30de\u30b9\u30bf\u30fc\u3068\u884c\u52d5\u3092\u5171\u306b\u3059\u308b\u3068\u306f\u4e07\u6b7b\u306b\u5024\u3059\u308b\u30c7\u30fc\u30b9 </ div > To fix this, edit the Sentence field html to remove the <div> tags, and add <br> tags wherever a line break should appear. For example, the above should be changed into: \u305d\u3046\u30c7\u30b9\u30b5\u30fc\u30f4\u30a1\u30f3\u30c8\u306e\u51f8\u5b88\u3092 < b > \u5dee\u3057\u7f6e\u3044\u3066 </ b >< br > \u30de\u30b9\u30bf\u30fc\u3068\u884c\u52d5\u3092\u5171\u306b\u3059\u308b\u3068\u306f\u4e07\u6b7b\u306b\u5024\u3059\u308b\u30c7\u30fc\u30b9 Why this can happen (click here) This happens if you copy/paste directly from certain pages into the sentence field, such as some texthooker pages. This can also happen if you copy/paste from a texthooker page to a different field, say AdditionalNotes , and then copy a section of AdditionalNotes to Sentence . The updating sentence with clipboard hotkey shouldn't have this problem, as <div> tags are not present by default.","title":"The sentence quotes are on completely different lines!"},{"location":"faq/#the-showhide-button-doesnt-do-anything","text":"The show/hide button requires that the displayed sentence has a bolded element. For example, this means if the currently displayed sentence comes from the AltDisplay field and nothing in that field is bolded, then the show/hide button will do nothing.","title":"The Show/Hide button doesn't do anything."},{"location":"faq/#the-replay-audio-button-plays-the-sentence-word-and-then-sentence","text":"This is playing the audio from the front of the card, and then the back of the card, in sequence. To fix it so you only hear the audio displayed in the back of the card, go to: Decks (main anki browser) \u2192 Deck settings (the gear beside your deck) \u2192 Options \u2192 Audio section \u2192 Toggle Skip question when replaying answer","title":"The replay audio button plays the sentence, word, and then sentence."},{"location":"faq/#card-editing","text":"","title":"Card Editing"},{"location":"faq/#how-do-i-use-this-note-type-as-an-anime-card","text":"Anime Cards are simply regular vocab cards with a non-collapsable hint field. To use this as an Anime Card, follow the steps to make a vocab card ( here ), and use the HintNotHidden field for your hint.","title":"How do I use this note type as an Anime Card?"},{"location":"faq/#how-do-i-change-the-default-value-of-a-binary-field","text":"In Yomichan Format, you can simply toggle the field. Any new card that is created will now default to that default value. Of course, this will not affect existing cards. To change existing cards, I recommend bulk-editing your cards, say, with this add-on . Warning As always, before mass editing your collection, please backup your Anki data . Alternatively, you can use the following commands to bulk edit your cards in the current deck: # assuming you are at the root of the repo, # i.e. after the `git clone ...` and `cd jp-mining-note` cd ./tools # sets all `IsSentenceCard` fields to be filled python3 batch.py --fill-field \"IsSentenceCard\" # empties all `IsSentenceCard` fields python3 batch.py --empty-field \"IsSentenceCard\" Note You technically have a second option, and that is to change the code itself (i.e. flip # with ^ for the desired field). However, you should only do this if you know what you are doing, and are fine with knowing that you may lose those changes if you update this note.","title":"How do I change the default value of a binary field?"},{"location":"faq/#how-do-i-remove-an-empty-card-without-deleting-the-entire-note","text":"Quote To remove the empty cards, go to Tools \u2192 Empty Cards in the main window. You will be shown a list of empty cards and be given the option to delete them. Taken from the official Anki documentation .","title":"How do I remove an empty card without deleting the entire note?"},{"location":"faq/#how-do-i-edit-the-fields-raw-html","text":"Within the card browser, select a field to edit, and then type ctrl+shift+x . Alternatively, on newer versions of Anki, you can click on the top-right corner on the code button.","title":"How do I edit the field's raw HTML?"},{"location":"faq/#other-questions","text":"","title":"Other Questions"},{"location":"faq/#where-is-the-x-folder-in-anki","text":"See the official documentation to find the Anki2 folder. Your profile folder is under Anki2/PROFILE_NAME . Your media folder is under Anki2/PROFILE_NAME/collections.media . Your addons folder is under Anki2/addons21 .","title":"Where is the (X) folder in Anki?"},{"location":"faq/#how-do-i-backup-my-anki-data","text":"The following makes a complete backup of your collection, including media. Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package The following makes a temporary backup of your collection, not including media Main Window \u2192 File (top left corner) \u2192 Create Backup See the official documentation for more info.","title":"How do I backup my Anki data?"},{"location":"faq/#how-do-i-backup-yomichan-settings","text":"Navigate to Yomichan Settings. Go to the Backup section Select Export Settings","title":"How do I backup Yomichan settings?"},{"location":"faq/#what-card-type-should-i-use","text":"The short answer is: whichever one you want. :) The long answer is: whichever one you want, because everyone has their own preferences on what card types they like. I recommend being open about it and experiment with them, to see which one you like.","title":"What card type should I use?"},{"location":"faq/#what-is-the-point-of-the-pasilence-field","text":"This is a hack to not play the sentence audio on the front side, even if you set-up your Anki client to do so. Removing this field will affect cards where you test pitch accent, i.e. with PAShowInfo filled.","title":"What is the point of the PASilence field?"},{"location":"faq/#how-do-you-see-the-currently-installed-version-of-this-note","text":"Preview any card. At the top left corner, the version should be displayed.","title":"How do you see the currently installed version of this note?"},{"location":"faq/#do-you-plan-on-supporting-any-other-language-other-than-japanese","text":"Unfortunately, other languages outside of Japanese will not be supported. The reason for this decision is best explained in the \"When are you going to add support for $MYLANGUAGE?\" question within Yomichan's README : Quote Developing Yomichan requires a decent understanding of Japanese sentence structure and grammar, and other languages are likely to have their own unique set of rules for syntax, grammar, inflection, and so on. Supporting additional languages would not only require many additional changes to the codebase, it would also incur significant maintenance overhead and knowledge demands for the developers. Therefore, suggestions and contributions for supporting new languages will be declined, allowing Yomichan's focus to remain Japanese-centric.","title":"Do you plan on supporting any other language other than Japanese?"},{"location":"faq/#discord-contact-info","text":"Username: Aquafina water bottle#3026 (user id: 244677612272746496 ) Servers: TheMoeWay and Refold (JP) server.","title":"Discord Contact Info"},{"location":"importing/","text":"This section is dedicated to explaining how you can change other Anki cards into this note format. Note If you are simply importing old JPMN notes, updating JPMN will properly update all the notes in place. See this section instead. Introduction \u00b6 Unfortunately, there are so many card formats out there that it would be impossible to cover how to import from every format with detailed rigor. Instead, this section will give you some general tips on operations that will likely be common across most or all formats, as well as present a small example for Anime Cards. Additionally, although you maybe able to import most of the card, it is unlikely that you will have complete 100% full functionality after importing the notes. The biggest example is frequency list information, as it requires special HTML + css formatting that can only be specified in the Yomichan Templates section. Prerequisites \u00b6 Before doing anything that affects your Anki collection in a major way (for example, basically everything on this page), please make a complete backup of your collection. Note Transferring your previous notes shouldn't change your media files at all. However I recommend exporting with media just in case, so long as you have the disk space for it. Anki \u00b6 Anki provides a feature to switch between note types, without affecting scheduling information. To do this, follow the proceeding steps: Head to the Card Browser window: Main Window \u2192 Browse Select all the cards that you want to switch. Tip ctrl+a selects all cards in the browser. Right click the selection \u2192 Notes \u2192 Change Note Type... Mapping Fields \u00b6 Here is where I can't give specific advice, as every note is different. However, here are a few tips: Your card likely doesn't have a separate Key and Word field, and instead only contains one Word field. To import this correctly into JPMN, make sure JPMN's Key and Word field are exactly your old card's Word field. AJTWordPitch and SentenceReading can be left empty, as the AJT plugins can batch generate both word pitches and sentence furigana. You may have some word pitch fields already in your card. Pitch accent graphs should be mapped to PAGraphs , and pitch accent positions should be mapped to PAPositions . FrequencySort maps to the frequency value used to sort by frequency, which works exactly the same as Marv's Frequency field as documented in this page. If you have a field that stores the source of the media, you can likely map that to AdditionalNotes . FrequenciesStylized is a field that holds information for multiple frequency lists. If your card already has a field that contains that information (say, with the built-in {frequencies} marker that comes with Yomichan), please be aware that mapping this to FrequenciesStylized will likely not work as you would expect . This is because FrequenciesStylized uses a custom set of handlebars to store the frequency info in a way that css styles can be easily applied without javascript. There is currently no convenience function to convert it to the proper format. An example with Anime cards is shown below. Example for Anime Cards (click here) Anki Fields Yomichan Format Key front Word front WordReading Reading PAOverride AJTWordPitch PrimaryDefinition Glossary Sentence Sentence SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard IsHoverCard IsTargetedSentenceCard PAShowInfo PATestOnlyWord PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Hint Picture Picture WordAudio Audio SentenceAudio SentenceAudio PAGraphs Graph PAPositions PASilence FrequenciesStylized FrequencySort SecondaryDefinition ExtraDefinitions UtilityDictionaries Comment Note Anything not specified should be set to (Nothing) Batch Editing \u00b6 After switching your notes, you will have to do the following few steps: (1) Porting formatted Sentence fields \u00b6 If your sentence fields have been highlighted in a way that isn't using <b> , then it will be incompatable with JPMN by default. To see what the formatting of the sentence is, view the raw HTML of the Sentence field. If the tested content is highlighted with <b> , then it is already formatted correctly. You can skip this step. If the tested content is not highlighted in any way, there is unfortunately no easy way to add highlighting to existing sentences. As there is nothing to do, you can skip this step. Finally, if the tested content is highlighted with something that isn't <b> , then continue with the following instructions to change it. Instructions to port formatted sentences (click here) Note You may want to make another backup before doing the following, just in case. Determine how the sentence is formatted. For this example, we will be assuming that the highlightted word is highlighted by a <span> with a custom color. \u8996\u8a8d\u3059\u308b\u6642\u9593\u3082\u3001\u8a00\u8449\u3092\u4ea4\u308f\u3059 < span style = \"color: #ffc2c7\" > \u7336\u4e88 </ span > \u3082\u3001\u80cc\u4e2d\u3092\u898b\u305b\u3066\u8d70\u308a\u51fa\u3059\u6a5f\u4f1a\u3055\u3048\u306a\u304b\u3063\u305f\u3002 The above is created from the following Yomichan fields: {cloze-prefix}<span style=\"color: #ffc2c7\">{cloze-body}</span>{cloze-suffix} Testing the Conversion. In the Anki card viewer, select only one of your old notes. Afterwards, right click the selection, and head over to: Notes \u2192 Find and Replace... Setting the fields. Set the Find field to something that can find your highlighted content. We will use the above as an example. It is extremely likely that you will have to change the Find field according to your note's sentence format. Field name Value Find: <span style=\"color: #ffc2c7\">(?P<t>.*?)</span> Replace With: <b>$t</b> In: Sentence Selected notes only Checked ( ) Ignore case Unchecked ( ) Treat input as a regular expression Checked ( ) Example image (click here) Verify. Press Ok, and then preview the card. If the highlight is yellow (or blue on light mode), then it it was successful! Repeat steps 2 and 3, except select all of the affected notes instead of just one. If it was not successful, you likely have to adjust the Find field. See here to see Anki's official documentation on regex. (2) Batch generate pitch accents and sentence furigana \u00b6 Head to the Card Browser window: Main Window \u2192 Browse Select all of your newly imported notes. Tip The following query should reveal all of your newly imported notes. Make sure you include the double quotes in the query search. \"note:JP Mining Note\" Afterwards, you can do ctrl+a to select all of the resulting cards. Head over to: Edit (top left corner) \u2192 Bulk-add pitch accents . Again, head over to: Edit (top left corner) \u2192 Bulk-add furigana . (3) Batch set PASilence field \u00b6 This will ensure all PASilence are filled correctly. Head to the Card Browser window. Right click a card, and then head to: Notes \u2192 Find and Replace... Set the fields to the following: Field name Value Find: .* Replace With: [sound:_silence.wav] In: PASilence (IMPORTANT!!! Don't forget to set this field) Selected notes only Unchecked ( ) Ignore case Unchecked ( ) Treat input as a regular expression Checked ( ) Example image (click here) (4) (Optional) Formatting WordReading \u00b6 Your WordReading field is likely formatted in one of three ways: Kanji with furigana in brackets (Yomichan: {furigana-plain} ). Example: \u6210[\u306a]\u308a \u7acb[\u305f]\u3064 Kanji with ruby text (Yomichan: {furigana} ). Example: \u6210 \u306a \u308a \u7acb \u305f \u3064 Kana only (Yomichan: {reading} ). Example: \u306a\u308a\u305f\u3064 If your WordReading is formatted in either of the first two ways, you can skip this step. However, if your old cards only had a kana reading, then it might be nice to have the WordReading as the kanji word with furigana. If this is desirable, see the instructions below. Converting kana readings to furigana readings (click here) The solution provided below is imperfect, but passable. This will format all of the WordReading fields to be Word[WordReading] , which means kana will repeated. For example, a card with Word as \u6210\u308a\u7acb\u3064, and WordReading as \u306a\u308a\u305f\u3064, will turn into: \u6210\u308a\u7acb\u3064 \u306a\u308a\u305f\u3064 To do this, you will have to run a Python script from the repository. For Windows users, see the first 3 steps for the Windows instructions here if you haven't use Python before. Afterwards, create a backup and run the following: python batch.py -f quick_fix_convert_kana_only_reading_all_notes The above will affect ALL notes. If you instead want to affect certain notes, add the kanaonlyreading tag to all affected notes, and then run: python batch.py -f quick_fix_convert_kana_only_reading_with_tag Final Notes \u00b6 Auto-generating frequency info (with the correct css, html, etc.) doesn't seem trivial, and I currently provide no way of doing that (primarily because I'm not sure how to do it in the first place). If you know of a way or would like to help me out with doing this, please let me know!","title":"Transfer Existing Notes"},{"location":"importing/#introduction","text":"Unfortunately, there are so many card formats out there that it would be impossible to cover how to import from every format with detailed rigor. Instead, this section will give you some general tips on operations that will likely be common across most or all formats, as well as present a small example for Anime Cards. Additionally, although you maybe able to import most of the card, it is unlikely that you will have complete 100% full functionality after importing the notes. The biggest example is frequency list information, as it requires special HTML + css formatting that can only be specified in the Yomichan Templates section.","title":"Introduction"},{"location":"importing/#prerequisites","text":"Before doing anything that affects your Anki collection in a major way (for example, basically everything on this page), please make a complete backup of your collection. Note Transferring your previous notes shouldn't change your media files at all. However I recommend exporting with media just in case, so long as you have the disk space for it.","title":"Prerequisites"},{"location":"importing/#anki","text":"Anki provides a feature to switch between note types, without affecting scheduling information. To do this, follow the proceeding steps: Head to the Card Browser window: Main Window \u2192 Browse Select all the cards that you want to switch. Tip ctrl+a selects all cards in the browser. Right click the selection \u2192 Notes \u2192 Change Note Type...","title":"Anki"},{"location":"importing/#mapping-fields","text":"Here is where I can't give specific advice, as every note is different. However, here are a few tips: Your card likely doesn't have a separate Key and Word field, and instead only contains one Word field. To import this correctly into JPMN, make sure JPMN's Key and Word field are exactly your old card's Word field. AJTWordPitch and SentenceReading can be left empty, as the AJT plugins can batch generate both word pitches and sentence furigana. You may have some word pitch fields already in your card. Pitch accent graphs should be mapped to PAGraphs , and pitch accent positions should be mapped to PAPositions . FrequencySort maps to the frequency value used to sort by frequency, which works exactly the same as Marv's Frequency field as documented in this page. If you have a field that stores the source of the media, you can likely map that to AdditionalNotes . FrequenciesStylized is a field that holds information for multiple frequency lists. If your card already has a field that contains that information (say, with the built-in {frequencies} marker that comes with Yomichan), please be aware that mapping this to FrequenciesStylized will likely not work as you would expect . This is because FrequenciesStylized uses a custom set of handlebars to store the frequency info in a way that css styles can be easily applied without javascript. There is currently no convenience function to convert it to the proper format. An example with Anime cards is shown below. Example for Anime Cards (click here) Anki Fields Yomichan Format Key front Word front WordReading Reading PAOverride AJTWordPitch PrimaryDefinition Glossary Sentence Sentence SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard IsHoverCard IsTargetedSentenceCard PAShowInfo PATestOnlyWord PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Hint Picture Picture WordAudio Audio SentenceAudio SentenceAudio PAGraphs Graph PAPositions PASilence FrequenciesStylized FrequencySort SecondaryDefinition ExtraDefinitions UtilityDictionaries Comment Note Anything not specified should be set to (Nothing)","title":"Mapping Fields"},{"location":"importing/#batch-editing","text":"After switching your notes, you will have to do the following few steps:","title":"Batch Editing"},{"location":"importing/#1-porting-formatted-sentence-fields","text":"If your sentence fields have been highlighted in a way that isn't using <b> , then it will be incompatable with JPMN by default. To see what the formatting of the sentence is, view the raw HTML of the Sentence field. If the tested content is highlighted with <b> , then it is already formatted correctly. You can skip this step. If the tested content is not highlighted in any way, there is unfortunately no easy way to add highlighting to existing sentences. As there is nothing to do, you can skip this step. Finally, if the tested content is highlighted with something that isn't <b> , then continue with the following instructions to change it. Instructions to port formatted sentences (click here) Note You may want to make another backup before doing the following, just in case. Determine how the sentence is formatted. For this example, we will be assuming that the highlightted word is highlighted by a <span> with a custom color. \u8996\u8a8d\u3059\u308b\u6642\u9593\u3082\u3001\u8a00\u8449\u3092\u4ea4\u308f\u3059 < span style = \"color: #ffc2c7\" > \u7336\u4e88 </ span > \u3082\u3001\u80cc\u4e2d\u3092\u898b\u305b\u3066\u8d70\u308a\u51fa\u3059\u6a5f\u4f1a\u3055\u3048\u306a\u304b\u3063\u305f\u3002 The above is created from the following Yomichan fields: {cloze-prefix}<span style=\"color: #ffc2c7\">{cloze-body}</span>{cloze-suffix} Testing the Conversion. In the Anki card viewer, select only one of your old notes. Afterwards, right click the selection, and head over to: Notes \u2192 Find and Replace... Setting the fields. Set the Find field to something that can find your highlighted content. We will use the above as an example. It is extremely likely that you will have to change the Find field according to your note's sentence format. Field name Value Find: <span style=\"color: #ffc2c7\">(?P<t>.*?)</span> Replace With: <b>$t</b> In: Sentence Selected notes only Checked ( ) Ignore case Unchecked ( ) Treat input as a regular expression Checked ( ) Example image (click here) Verify. Press Ok, and then preview the card. If the highlight is yellow (or blue on light mode), then it it was successful! Repeat steps 2 and 3, except select all of the affected notes instead of just one. If it was not successful, you likely have to adjust the Find field. See here to see Anki's official documentation on regex.","title":"(1) Porting formatted Sentence fields"},{"location":"importing/#2-batch-generate-pitch-accents-and-sentence-furigana","text":"Head to the Card Browser window: Main Window \u2192 Browse Select all of your newly imported notes. Tip The following query should reveal all of your newly imported notes. Make sure you include the double quotes in the query search. \"note:JP Mining Note\" Afterwards, you can do ctrl+a to select all of the resulting cards. Head over to: Edit (top left corner) \u2192 Bulk-add pitch accents . Again, head over to: Edit (top left corner) \u2192 Bulk-add furigana .","title":"(2) Batch generate pitch accents and sentence furigana"},{"location":"importing/#3-batch-set-pasilence-field","text":"This will ensure all PASilence are filled correctly. Head to the Card Browser window. Right click a card, and then head to: Notes \u2192 Find and Replace... Set the fields to the following: Field name Value Find: .* Replace With: [sound:_silence.wav] In: PASilence (IMPORTANT!!! Don't forget to set this field) Selected notes only Unchecked ( ) Ignore case Unchecked ( ) Treat input as a regular expression Checked ( ) Example image (click here)","title":"(3) Batch set PASilence field"},{"location":"importing/#4-optional-formatting-wordreading","text":"Your WordReading field is likely formatted in one of three ways: Kanji with furigana in brackets (Yomichan: {furigana-plain} ). Example: \u6210[\u306a]\u308a \u7acb[\u305f]\u3064 Kanji with ruby text (Yomichan: {furigana} ). Example: \u6210 \u306a \u308a \u7acb \u305f \u3064 Kana only (Yomichan: {reading} ). Example: \u306a\u308a\u305f\u3064 If your WordReading is formatted in either of the first two ways, you can skip this step. However, if your old cards only had a kana reading, then it might be nice to have the WordReading as the kanji word with furigana. If this is desirable, see the instructions below. Converting kana readings to furigana readings (click here) The solution provided below is imperfect, but passable. This will format all of the WordReading fields to be Word[WordReading] , which means kana will repeated. For example, a card with Word as \u6210\u308a\u7acb\u3064, and WordReading as \u306a\u308a\u305f\u3064, will turn into: \u6210\u308a\u7acb\u3064 \u306a\u308a\u305f\u3064 To do this, you will have to run a Python script from the repository. For Windows users, see the first 3 steps for the Windows instructions here if you haven't use Python before. Afterwards, create a backup and run the following: python batch.py -f quick_fix_convert_kana_only_reading_all_notes The above will affect ALL notes. If you instead want to affect certain notes, add the kanaonlyreading tag to all affected notes, and then run: python batch.py -f quick_fix_convert_kana_only_reading_with_tag","title":"(4) (Optional) Formatting WordReading"},{"location":"importing/#final-notes","text":"Auto-generating frequency info (with the correct css, html, etc.) doesn't seem trivial, and I currently provide no way of doing that (primarily because I'm not sure how to do it in the first place). If you know of a way or would like to help me out with doing this, please let me know!","title":"Final Notes"},{"location":"jpresources/","text":"A collection of tips and tricks, primarily related to CSS, Yomichan templates, and ShareX. This page was inspired by Marv's resources page , which has a bunch of different but equally awesome resources. I highly recommend checking it out! If you encounter any problems, have any questions, etc., feel free to contact me on discord Aquafina water bottle#3026 , or submit an issue . I exist on the TheMoeWay and Refold (Japanese) servers. CSS (Yomichan) \u00b6 How-To: Add Custom CSS In Yomichan \u00b6 To add custom CSS in Yomichan, do the following: Head over to Yomichan settings (Yomichan extension marker -> cogwheel) Go to Appearance \u2192 Configure custom CSS... Add the CSS to the top section. Close the window. Demo (click here) Not selecting or copying furigana \u00b6 If you want to select / copy the main word within Yomichan without copying the furigana, you can use the following CSS: . headword-term ruby rt { user-select : none ; } Note The above is actually general enough to use for Anki cards itself, say with the following CSS: ruby rt { user-select : none ; } Limiting the number of frequency lists \u00b6 /* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; } (Thanks Marv#5144 for the CSS) Demo (click here) Limiting the number of pitch accent dictionaries \u00b6 The following CSS displays only the first 2 pitch accent dictionaries: /* Only shows the first 2 pitch accent dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } Make the pitch accent dictionary text a bit grey by default, and to make specifically the \"NHK\" and \"\u5927\u8f9e\u6cc9\" white (change these two to any dictionary you find to be of higher quality) /* Greys out all pitch accent dictionary names */ /* Sets NHK and \u5927\u8f9e\u6cc9 pitch accent dictionaries to a white name */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } Demo (click here) Hide the dictionary, but allow it to be used by Anki \u00b6 The default way to hide a dictionary is by disabling the dictionary under Yomichan's Dictionaries section. However, if you disable the dictionary, you cannot export it into Anki, which is a problem if you are using a bilingual profile but you want to export monolingual definitions. Steps : Ensure that the dictionary is enabled in your Yomichan profile. Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] { display : none ; } Example CSS for JMdict (click here) li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } Demo (click here) Hide bilingual definitions until hover \u00b6 Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'DICTIONARY' ] : hover . gloss-list { opacity : 1 ; } Example CSS for JMdict (click here) li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } Demo (click here) Remove the \"Add Reading\" button \u00b6 This removes the small green button to add the reading. button [ title ^= \"Add reading\" ] { display : none ; } Demo (click here) Left: without CSS. Right: with CSS. CSS (Other) \u00b6 Ensuring \u300c\u300d properly quotes the text \u00b6 . jp-quote-text { text-indent : -1 em ; padding-left : 1 em ; } On the example to the right, the first quote is the standard display without any custom CSS. The second quote is with the aforementioned CSS. An example JSFiddle can be found here . Changing the Japanese font on Discord \u00b6 Note Discord's codebase is always subject to change, so this method may not work in the future. Get BetterDiscord so you can use custom CSS. In Discord Settings -> Custom CSS section, add the following: : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , YOUR-PREFERRED-FONT , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Example CSS for Noto Sans (click here) : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Discord's default CSS (click here) : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Note If you are using the browser version of Discord, you can also change the font with the Stylus extension . I personally don't use this, so I'll leave it to the user to figure out the settings. ;) Yomichan Templates / Handlebars \u00b6 Note If you are using the jp-mining-note template, most things here will likely not be useful for you as the Yomichan templates that comes with the note already contains most of these features and more. How-To: Edit Yomichan Fields \u00b6 Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Demo (click here) The above showcases option 2 of this example . How-To: Edit Yomichan Templates (Handlebars) \u00b6 Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... Demo (click here) Grab only the first pitch accent dictionary \u00b6 Adds the following Yomichan Fields: {pitch-accents-single-dict} : Pitch accent in text (downstep) format {pitch-accent-graphs-single-dict} : Pitch accent in svg graph format {pitch-accent-positions-single-dict} : Pitch accent in positions (number) format Template code (click here) {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }} <ol> {{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} <li> {{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} No pitch accent data {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'position' ~ }} {{ /inline }} Modified version of the above for Anime Cards (click here) {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ #regexReplace \"<(.|\\n)*?>\" \"\" }}{{ ~> pitch-accent-list-single-dict format = 'position' ~ }}{{ /regexReplace }} {{ /inline }} Thanks An#7416 for the template code. Export only the selected text (only if text is selected) \u00b6 Adds: {selection-text-or-glossary} Allows you to export only a section of a glossary by highlighting over it, and uses the glossary by default if you don't have anything highlighted. Template code (click here) {{ #*inline \"selection-text-or-glossary\" }} {{ ~#if (op \"!= = \" (getMedia \" selectionText \") \"\")~}} {{~#getMedia \" selectionText \" }}{{ /getMedia~ }} {{ ~else~ }} {{ ~> glossary ~ }} {{ /if~ }} {{ /inline }} Note Related Github issue . Grab only the first dictionary \u00b6 Adds: {first-dictionary} The following grabs the first dictionary (including every definition within said dictionary). For further customization on how the first dictionary is selected (say, for automatic bilingual / monolingual separation), see the handlebars code used by jp-mining-note here . Template code (click here) {{ ~#*inline \"glossary-first\" ~ }} {{ ~#scope~ }} {{ ~#set \"first-dictionary\" null }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#if (op \"== = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" != = \" null (get \" first-dictionary \"))~}} <div style=\" text-align : left ; \"><ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" first-dictionary \" )) ~ }} <li> {{ ~> glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol></div> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} Automatically highlight the tested word within the sentence upon card creation \u00b6 Option 1: Bold only Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Option 2: Bold + Styling (recommended) Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Anki Note CSS (the Styling page under the editing card templates page): b { color : #fffd9e ; /* bright yellow */ } If your card template is formatted like <div class=\"sentence\">{{ Sentence }}</div> : . sentence b { color : #fffd9e ; /* bright yellow */ /* if you want to make the word not bolded, un-comment the following */ /*font-weight: normal;*/ } Option 3: Custom div Yomichan Fields : {cloze-prefix}<span class=\"word-highlight\">{cloze-body}</span>{cloze-suffix} Anki Note CSS : . word-highlight { color : #fffd9e ; } Note I personally prefer using Option 2 (bold + styling) over a custom div because it makes editing the note easier. For example, if you want to edit the highlighted region, you only have to bold the desired region (say, with ctrl+b) instead of having to edit the raw HTML of the field (say, with ctrl+shift+x). Further Reading \u00b6 Official documentation om Yomichan's templates: Yomichan template helper functions Yomichan template structure Example template code can be found here: Markers for individual dictionaries: here This has certain extended capabilities over my template code, such as removing the first line. Template code for this note: here and here Old template code for this note (NO LONGER USED / MAINTAINED): here ShareX Scripts \u00b6 Many people have already documented how to setup your ShareX to work with Anki, such as: stegatxins0 (recommended) Anime Cards Instead of re-telling the steps they have already showed, I present alternative ShareX scripts (the long one-liner to paste within the Actions argument section) for stegatxins0's guide. The following scripts have the following changes: They all with jp-mining-note by default. They have been rewritten so it can be presented in human-readable format right below the one-liner. The one-liners can be re-compiled from the source code at your own discretion (by building the documentation ). All the powershell source code can be found here . Screenshot and Clipboard Hotkey \u00b6 Features \u00b6 Adds the selected image to the note. This image is automatically shrunk (within the field viewer only, if you are using Anki versions 2.1.50+). Adds a tag to the note. The tag is exactly the window name of the current application. Sets the AdditionalNotes to the current clipboard. I use this for copying/pasting context (the lines surrounding the sentence). How-To \u00b6 Follow the steps for setting up the screenshot hotkey , and use this script in place of step 8's argument . ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne \\\"\\\"}) -join \\\"<br>\\\"; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_clipboard = $clipboard; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_clipboard = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; AdditionalNotes = $result_clipboard; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag']; } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $clipboard = ( Get-Clipboard | where { $_ -ne \"\" }) -join \"<br>\" ; # gets only the file name $media_name = '$input' | Split-Path -leaf ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; # attempts to bold the found word within the clipboard $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; $curr_note_sent = $curr_note_data . result . fields . Sentence . value ; $result_clipboard = $clipboard ; if ( $curr_note_sent -match '<b>(?<bolded>.+)</b>' ) { $bolded = $matches [ 'bolded' ]; # may not replace anything $result_clipboard = $clipboard . replace ( $bolded , \"<b>$bolded</b>\" ); }; Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Picture = \"<img data-editor-shrink= `\" true `\" src= `\" $media_name `\" >\" ; AdditionalNotes = $result_clipboard ; } } } }; if ( $media_name -match '(?<tag>.+)_.*' ) { $tag = $matches [ 'tag' ]; } Run-Json @{ action = 'addTags' ; version = 6 ; params = @{ notes = @( $curr_note_id ); tags = $tag ; } }; Screenshot (only) Hotkey \u00b6 This is the same as the above, but without setting the AdditionalNotes field to the current clipboard. ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Picture = \"<img data-editor-shrink= `\" true `\" src= `\" $media_name `\" >\" ; } } } }; if ( $media_name -match '(?<tag>.+)_.*' ) { $tag = $matches [ 'tag' ] } Run-Json @{ action = 'addTags' ; version = 6 ; params = @{ notes = @( $curr_note_id ); tags = $tag ; } }; Audio Hotkey \u00b6 This script works exactly the same as stegatxins0's version, except rewritten in a more readable format. If you already have the audio hotkey setup, there is no reason to change the old script. To use this, follow the steps for setting up the audio hotkey , and use this script in place of step 14's Argument . ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \\\"[sound:$media_name]\\\"; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ SentenceAudio = \"[sound:$media_name]\" ; } } } }; Anki Scripts \u00b6 These are a set of scripts that may help you to prevent doing repetitive actions when adding notes. Unlike the above, these scripts are not meant to be used with audio or picture files. Rather, they are stand-alone scripts that modify the most recent cards added. These scripts are written in two formats: one that works automatically with your usual ShareX setup, and one in Python for cross-platform portability. Warning Do NOT view the card in the card browser when running any script, because if you do, the affected fields may not update. Close the card browser before running the scripts. However, you do not need to worry about this if you are running the python script with the --enable-gui-browse flag. How-To: Running with ShareX \u00b6 As shown above, ShareX has the ability to run custom user scripts. However, for ShareX to only run the script and do nothing else, the hotkey must be configured with steps shown below. Warning Depending on the popularity of these scripts, the ShareX versions may be deprecated in the future in favor of the easier to use/write/maintain Python versions. The only downside of using the Python script is that the user must have Python installed. Steps \u00b6 (TODO video) Under the main window, go to Hotkey Settings , and add a new hotkey. Click on the settings icon (of the newly added hotkey). In the Task tab (to the left): Set: Task to Screen capture \u2192 Capture active window Check Override After Capture Tasks ( ) Under After Capture , un-check everything, and check the following: Save Image to File Perform Actions Delete Locally In the Actions tab (to the left): Check Override Actions ( ) Uncheck all existing actions. Add a new action by clicking on Add . Set the following values of the action: File Path: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe Argument: (the text in Sharex Script for the script you want to run) Note If you are adding multiple scripts with ShareX, instead of re-doing all of the steps above, you can instead duplicate the keybind, and simply set the Argument of the action to a different script. Explanation The reason that the After Capture settings include Save Image to File and Delete Locally is because without those settings, the Perform Actions section doesn't appear to run. Fortunately, the combination of Save Image to File and Delete Locally means the hotkey does the following: Saves the image file Runs the custom script Deletes the image file In other words, the image file is only temporarily created, and then deleted immediately after running the script. This effectively means that ShareX is only running the script whenever the keybind is used. How-To: Running with Python \u00b6 Warning If you use the Python script as is within the repository without copying it to a different directory, this script will be updated every time you update the repository. It's always good practice to not blindly run people's code on your computer. Make sure you trust the code , and double check after update! If you don't want to use ShareX, or you are not using Windows, you can simply run a python script with command line. # Your python version should be 3.8 or higher. # It may work for lower python versions, but I make no guarantee. python3 /path/to/jp-mining-note/tools/hotkey.py -f FUNCTION_NAME Examples (click here) # default python3 /path/to/jp-mining-note/tools/hotkey.py -f update_sentence # opens card browser automatically python3 /path/to/jp-mining-note/tools/hotkey.py -f update_sentence --enable-gui-browse If you want to use these as keybinds, I will leave it up to you to determine how to do that (as there are too many different setups and programs that people can use to create keybinds). However, some tips for ShareX and AutoKey are given below. Instructions for running Python scripts in ShareX If you want, you can even use the Python scripts with ShareX, so long as you have Python installed. To use Python with ShareX, follow all the steps (shown above ), until you set the action values. The command should be the DRIVE:\\PATH\\TO\\python.exe (instead of the path to powershell.exe ). The argument should be DRIVE:\\PATH\\TO\\jp-mining-note\\tools\\hotkey.py -f FUNCTION_NAME (instead of the large one-liner.) Instructions for AutoKey (Not AutoHotKey) If you are using AutoKey for Linux, it should be possible to do the following instead: Go to: Settings \u2192 Configure AutoKey \u2192 Script Engine \u2192 User Module file \u2192 (add the jp-mining-note/tools directory) Create a script type hotkey, Within the script, run any function thusly: import hotkey hotkey . FUNCTION_NAME () Example: import hotkey hotkey . update_sentence () Example with GUI: import hotkey hotkey . _browse_anki ( \"nid:1\" ) note_id = hotkey . update_sentence () hotkey . _browse_anki ( f \"nid: { note_id } \" ) Update Sentence with Clipboard \u00b6 Function Name : update_sentence This script updates the sentence with the current clipboard (while preserving the bolded word), and removes the SentenceReading field (of the newest note added). This script is useful when Yomichan's parsed sentence does not match the recorded audio. This is also useful for when Yomichan's word parser doesn't match the word itself (steps shown below). Note After running this script, you must manually generate the SentenceReading field if you want the furigana reading. Of course, this can be done in bulk at any point, as shown here . How-To: Fix incorrectly-bolded words (click here) As an example, The target word \u5e0c\u671b in the sentence \u300c\u5165\u90e8\u5e0c\u671b\u306a\u3093\u3067\u3059\u3051\u3069\u2026\u300d will be parsed by Yomichan as the following: \u5165\u90e8<b>\u5e0c\u671b\u306a</b>\u3093\u3067\u3059\u3051\u3069\u2026 Within the original popup, you can add two versions of the word by default: The one with JMdict only. Adding this word will add the sentence with incorrect bolding. The one with everything else other than JMdict. Adding this word will have the correct bold, but will be missing some definitions. To add the above sentence that solves both problems (no weird bold, and contains all definitions), do NOT add the word within the sentence. Instead, do the following: Highlight over the header word itself (or the word in the orthographic forms dictionary), and add that word instead. Demo (click here) Copy the desired sentence. Run this script. Note It is assumed that you have multiple popups enabled . How the bolded word is preserved (click here) The bolded word is preserved if the exact content within the bolded word is found within the clipboard, which should be almost always the case. For example, assume the added sentence is the following: \u3055\u3066\u306f < b > \u507d\u8005 </ b > \u3060\u306a\uff01 As long as the clipboard contains the word \u300c\u507d\u8005\u300d, then the bold is preserved. For example, the following clipboard contents will preserve the bold: \u304b\u308f\u3044\u3052\u306e\u3042\u308b\u5973\u3058\u3083\u306a\u3044\u3002\u3055\u3066\u306f\u507d\u8005\u3060\u306a\uff01 ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $clipboard = ( Get-Clipboard | where { $_ -ne '' }) -join '' ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; $curr_note_sent = $curr_note_data . result . fields . Sentence . value ; $result_sent = '' ; if ( $curr_note_sent -match '<b>(?<bolded>.+)</b>' ) { $bolded = $matches [ 'bolded' ]; # may not replace anything $result_sent = $clipboard . replace ( $bolded , \"<b>$bolded</b>\" ); } else { # default $result_sent = $clipboard ; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Sentence = $result_sent ; SentenceReading = '' ; } } } }; Update AdditionalNotes with Clipboard \u00b6 Function Name : update_additional_notes This script does the exact same thing as the above script, but with AdditionalNotes instead of Sentence . The tested word, if found, is also automatically highlighted. This is useful to copy/paste context for the sentence (the surrounding lines around the sentence). ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne \\\"\\\"}) -join \\\"<br>\\\"; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ AdditionalNotes = $result_sent; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $clipboard = ( Get-Clipboard | where { $_ -ne \"\" }) -join \"<br>\" ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; $curr_note_sent = $curr_note_data . result . fields . Sentence . value ; $result_sent = '' ; if ( $curr_note_sent -match '<b>(?<bolded>.+)</b>' ) { $bolded = $matches [ 'bolded' ]; # may not replace anything $result_sent = $clipboard . replace ( $bolded , \"<b>$bolded</b>\" ); } else { # default $result_sent = $clipboard ; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ AdditionalNotes = $result_sent ; } } } }; Copy from Previous Card \u00b6 Function Name : copy_from_previous This script does the following: Set the AdditionalNotes and Picture field of the newest card to the previous (second-newest) card's fields. Copies all the tags of the previous card. This is useful for when you are adding more than one sentence with the same text box of a visual novel, as it prevents you from having to run the screenshot hotkey. How to use \u00b6 Create a card from the first unknown word in the text box. Create a card from the second unknown word in the text box. Run this script. ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $prev_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($prev_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = $prev_note_data.result.fields.Picture.value; AdditionalNotes = $prev_note_data.result.fields.AdditionalNotes.value; } } } }; foreach ($tag in $prev_note_data.result.tags) { Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $prev_note_id = $sorted_list [ 1 ]; $curr_note_id = $sorted_list [ 0 ]; $prev_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $prev_note_id ); } }; # copies picture & additional notes to current note Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Picture = $prev_note_data . result . fields . Picture . value ; AdditionalNotes = $prev_note_data . result . fields . AdditionalNotes . value ; } } } }; # copies tags foreach ( $tag in $prev_note_data . result . tags ) { Run-Json @{ action = 'addTags' ; version = 6 ; params = @{ notes = @( $curr_note_id ); tags = $tag ; } } }; Orthographic Variants: Fix Sentence and Frequency \u00b6 Function Name : fix_sent_and_freq This script does the following: Sets the previous note's fields to the newest note's fields: FrequencyStylized Sentence SentenceReading Deletes the newest note This is useful for when you want to add the the word within the Orthographic Variants dictionary. The Orthographics Variants dictionary is extremely useful for monolingual definitions, where dictionaries only contain entries for more kanjified words. In practice, I've personally found numerous examples of this in everyday media, so this has helped me immensely. Examples (to test the dictionary on) \u300c\u30b9\u30da\u30eb\u30c9\u65cf\u3078\u306e\u6050\u6016\u306f\u6050\u3089\u304f\u3053\u306e\u4e16\u754c\u306b \u6839\u3065\u3044\u3066\u3044\u308b \u3093\u3060\u308d\u3046\u300d \u300c\u30eb\u30fc\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3001\u4eca \u304a\u4ee3\u308f\u308a \u3092\u304a\u6301\u3061\u3057\u307e\u3059\u306d\u300d \u300c\u305f\u3060\u3001\u4e00\u3064\u3060\u3051 \u91d8\u3092\u3055\u3055\u305b\u3066 \u3082\u3089\u3046\u3051\u3069\u2026\u8cb4\u65b9\u304c\u3053\u308c\u304b\u3089\u4f55\u3092\u3059\u308b\u306b\u3057\u3066\u3082\u3001\u4ed5\u4e8b\u306f\u4eca\u307e\u3067\u901a\u308a\u3053\u306a\u3057\u3066\u3082\u3089\u3046\u308f\u3088\uff1f\u300d It is assumed that you have multiple popups enabled for monolingual definitions, so you can easily look up the word in the Orthographic Forms dictionary. How to use \u00b6 Create a card from the word in the Orthographic Variants dictionary. Create a card from the word in original sentence. Run this script. ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $prev_note_id; fields = @{ FrequenciesStylized = $curr_note_data.result.fields.FrequenciesStylized.value; Sentence = $curr_note_data.result.fields.Sentence.value; SentenceReading = $curr_note_data.result.fields.SentenceReading.value; } } } }; Run-Json @{ action = 'deleteNotes'; version = 6; params = @{ notes = @($curr_note_id); } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $prev_note_id = $sorted_list [ 1 ]; $curr_note_id = $sorted_list [ 0 ]; $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; # copies frequency, sentence, sentence reading to previous note Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $prev_note_id ; fields = @{ FrequenciesStylized = $curr_note_data . result . fields . FrequenciesStylized . value ; Sentence = $curr_note_data . result . fields . Sentence . value ; SentenceReading = $curr_note_data . result . fields . SentenceReading . value ; } } } }; # removes current note Run-Json @{ action = 'deleteNotes' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; Other Random Resources \u00b6 Note Most things here have been moved to the Setup: Everything Else page Mikagu pitch accent alternatives \u00b6 migaku updated Fork of migaku to be updated for anki version 2.1.50+ anki-jrp Completely stand-alone plugin from migaku with a completely different codebase Only does one thing: adds pitch accent colors (along with furigana)","title":"JP Resources"},{"location":"jpresources/#css-yomichan","text":"","title":"CSS (Yomichan)"},{"location":"jpresources/#how-to-add-custom-css-in-yomichan","text":"To add custom CSS in Yomichan, do the following: Head over to Yomichan settings (Yomichan extension marker -> cogwheel) Go to Appearance \u2192 Configure custom CSS... Add the CSS to the top section. Close the window. Demo (click here)","title":"How-To: Add Custom CSS In Yomichan"},{"location":"jpresources/#not-selecting-or-copying-furigana","text":"If you want to select / copy the main word within Yomichan without copying the furigana, you can use the following CSS: . headword-term ruby rt { user-select : none ; } Note The above is actually general enough to use for Anki cards itself, say with the following CSS: ruby rt { user-select : none ; }","title":"Not selecting or copying furigana"},{"location":"jpresources/#limiting-the-number-of-frequency-lists","text":"/* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; } (Thanks Marv#5144 for the CSS) Demo (click here)","title":"Limiting the number of frequency lists"},{"location":"jpresources/#limiting-the-number-of-pitch-accent-dictionaries","text":"The following CSS displays only the first 2 pitch accent dictionaries: /* Only shows the first 2 pitch accent dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } Make the pitch accent dictionary text a bit grey by default, and to make specifically the \"NHK\" and \"\u5927\u8f9e\u6cc9\" white (change these two to any dictionary you find to be of higher quality) /* Greys out all pitch accent dictionary names */ /* Sets NHK and \u5927\u8f9e\u6cc9 pitch accent dictionaries to a white name */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } Demo (click here)","title":"Limiting the number of pitch accent dictionaries"},{"location":"jpresources/#hide-the-dictionary-but-allow-it-to-be-used-by-anki","text":"The default way to hide a dictionary is by disabling the dictionary under Yomichan's Dictionaries section. However, if you disable the dictionary, you cannot export it into Anki, which is a problem if you are using a bilingual profile but you want to export monolingual definitions. Steps : Ensure that the dictionary is enabled in your Yomichan profile. Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] { display : none ; } Example CSS for JMdict (click here) li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } Demo (click here)","title":"Hide the dictionary, but allow it to be used by Anki"},{"location":"jpresources/#hide-bilingual-definitions-until-hover","text":"Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'DICTIONARY' ] : hover . gloss-list { opacity : 1 ; } Example CSS for JMdict (click here) li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } Demo (click here)","title":"Hide bilingual definitions until hover"},{"location":"jpresources/#remove-the-add-reading-button","text":"This removes the small green button to add the reading. button [ title ^= \"Add reading\" ] { display : none ; } Demo (click here) Left: without CSS. Right: with CSS.","title":"Remove the \"Add Reading\" button"},{"location":"jpresources/#css-other","text":"","title":"CSS (Other)"},{"location":"jpresources/#ensuring-properly-quotes-the-text","text":". jp-quote-text { text-indent : -1 em ; padding-left : 1 em ; } On the example to the right, the first quote is the standard display without any custom CSS. The second quote is with the aforementioned CSS. An example JSFiddle can be found here .","title":"Ensuring \u300c\u300d properly quotes the text"},{"location":"jpresources/#changing-the-japanese-font-on-discord","text":"Note Discord's codebase is always subject to change, so this method may not work in the future. Get BetterDiscord so you can use custom CSS. In Discord Settings -> Custom CSS section, add the following: : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , YOUR-PREFERRED-FONT , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Example CSS for Noto Sans (click here) : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Discord's default CSS (click here) : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Note If you are using the browser version of Discord, you can also change the font with the Stylus extension . I personally don't use this, so I'll leave it to the user to figure out the settings. ;)","title":"Changing the Japanese font on Discord"},{"location":"jpresources/#yomichan-templates-handlebars","text":"Note If you are using the jp-mining-note template, most things here will likely not be useful for you as the Yomichan templates that comes with the note already contains most of these features and more.","title":"Yomichan Templates / Handlebars"},{"location":"jpresources/#how-to-edit-yomichan-fields","text":"Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Demo (click here) The above showcases option 2 of this example .","title":"How-To: Edit Yomichan Fields"},{"location":"jpresources/#how-to-edit-yomichan-templates-handlebars","text":"Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... Demo (click here)","title":"How-To: Edit Yomichan Templates (Handlebars)"},{"location":"jpresources/#grab-only-the-first-pitch-accent-dictionary","text":"Adds the following Yomichan Fields: {pitch-accents-single-dict} : Pitch accent in text (downstep) format {pitch-accent-graphs-single-dict} : Pitch accent in svg graph format {pitch-accent-positions-single-dict} : Pitch accent in positions (number) format Template code (click here) {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }} <ol> {{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} <li> {{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} No pitch accent data {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'position' ~ }} {{ /inline }} Modified version of the above for Anime Cards (click here) {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ #regexReplace \"<(.|\\n)*?>\" \"\" }}{{ ~> pitch-accent-list-single-dict format = 'position' ~ }}{{ /regexReplace }} {{ /inline }} Thanks An#7416 for the template code.","title":"Grab only the first pitch accent dictionary"},{"location":"jpresources/#export-only-the-selected-text-only-if-text-is-selected","text":"Adds: {selection-text-or-glossary} Allows you to export only a section of a glossary by highlighting over it, and uses the glossary by default if you don't have anything highlighted. Template code (click here) {{ #*inline \"selection-text-or-glossary\" }} {{ ~#if (op \"!= = \" (getMedia \" selectionText \") \"\")~}} {{~#getMedia \" selectionText \" }}{{ /getMedia~ }} {{ ~else~ }} {{ ~> glossary ~ }} {{ /if~ }} {{ /inline }} Note Related Github issue .","title":"Export only the selected text (only if text is selected)"},{"location":"jpresources/#grab-only-the-first-dictionary","text":"Adds: {first-dictionary} The following grabs the first dictionary (including every definition within said dictionary). For further customization on how the first dictionary is selected (say, for automatic bilingual / monolingual separation), see the handlebars code used by jp-mining-note here . Template code (click here) {{ ~#*inline \"glossary-first\" ~ }} {{ ~#scope~ }} {{ ~#set \"first-dictionary\" null }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#if (op \"== = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" != = \" null (get \" first-dictionary \"))~}} <div style=\" text-align : left ; \"><ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" first-dictionary \" )) ~ }} <li> {{ ~> glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol></div> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }}","title":"Grab only the first dictionary"},{"location":"jpresources/#automatically-highlight-the-tested-word-within-the-sentence-upon-card-creation","text":"Option 1: Bold only Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Option 2: Bold + Styling (recommended) Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Anki Note CSS (the Styling page under the editing card templates page): b { color : #fffd9e ; /* bright yellow */ } If your card template is formatted like <div class=\"sentence\">{{ Sentence }}</div> : . sentence b { color : #fffd9e ; /* bright yellow */ /* if you want to make the word not bolded, un-comment the following */ /*font-weight: normal;*/ } Option 3: Custom div Yomichan Fields : {cloze-prefix}<span class=\"word-highlight\">{cloze-body}</span>{cloze-suffix} Anki Note CSS : . word-highlight { color : #fffd9e ; } Note I personally prefer using Option 2 (bold + styling) over a custom div because it makes editing the note easier. For example, if you want to edit the highlighted region, you only have to bold the desired region (say, with ctrl+b) instead of having to edit the raw HTML of the field (say, with ctrl+shift+x).","title":"Automatically highlight the tested word within the sentence upon card creation"},{"location":"jpresources/#further-reading","text":"Official documentation om Yomichan's templates: Yomichan template helper functions Yomichan template structure Example template code can be found here: Markers for individual dictionaries: here This has certain extended capabilities over my template code, such as removing the first line. Template code for this note: here and here Old template code for this note (NO LONGER USED / MAINTAINED): here","title":"Further Reading"},{"location":"jpresources/#sharex-scripts","text":"Many people have already documented how to setup your ShareX to work with Anki, such as: stegatxins0 (recommended) Anime Cards Instead of re-telling the steps they have already showed, I present alternative ShareX scripts (the long one-liner to paste within the Actions argument section) for stegatxins0's guide. The following scripts have the following changes: They all with jp-mining-note by default. They have been rewritten so it can be presented in human-readable format right below the one-liner. The one-liners can be re-compiled from the source code at your own discretion (by building the documentation ). All the powershell source code can be found here .","title":"ShareX Scripts"},{"location":"jpresources/#screenshot-and-clipboard-hotkey","text":"","title":"Screenshot and Clipboard Hotkey"},{"location":"jpresources/#screenshot-only-hotkey","text":"This is the same as the above, but without setting the AdditionalNotes field to the current clipboard. ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Picture = \"<img data-editor-shrink= `\" true `\" src= `\" $media_name `\" >\" ; } } } }; if ( $media_name -match '(?<tag>.+)_.*' ) { $tag = $matches [ 'tag' ] } Run-Json @{ action = 'addTags' ; version = 6 ; params = @{ notes = @( $curr_note_id ); tags = $tag ; } };","title":"Screenshot (only) Hotkey"},{"location":"jpresources/#audio-hotkey","text":"This script works exactly the same as stegatxins0's version, except rewritten in a more readable format. If you already have the audio hotkey setup, there is no reason to change the old script. To use this, follow the steps for setting up the audio hotkey , and use this script in place of step 14's Argument . ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \\\"[sound:$media_name]\\\"; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ SentenceAudio = \"[sound:$media_name]\" ; } } } };","title":"Audio Hotkey"},{"location":"jpresources/#anki-scripts","text":"These are a set of scripts that may help you to prevent doing repetitive actions when adding notes. Unlike the above, these scripts are not meant to be used with audio or picture files. Rather, they are stand-alone scripts that modify the most recent cards added. These scripts are written in two formats: one that works automatically with your usual ShareX setup, and one in Python for cross-platform portability. Warning Do NOT view the card in the card browser when running any script, because if you do, the affected fields may not update. Close the card browser before running the scripts. However, you do not need to worry about this if you are running the python script with the --enable-gui-browse flag.","title":"Anki Scripts"},{"location":"jpresources/#how-to-running-with-sharex","text":"As shown above, ShareX has the ability to run custom user scripts. However, for ShareX to only run the script and do nothing else, the hotkey must be configured with steps shown below. Warning Depending on the popularity of these scripts, the ShareX versions may be deprecated in the future in favor of the easier to use/write/maintain Python versions. The only downside of using the Python script is that the user must have Python installed.","title":"How-To: Running with ShareX"},{"location":"jpresources/#how-to-running-with-python","text":"Warning If you use the Python script as is within the repository without copying it to a different directory, this script will be updated every time you update the repository. It's always good practice to not blindly run people's code on your computer. Make sure you trust the code , and double check after update! If you don't want to use ShareX, or you are not using Windows, you can simply run a python script with command line. # Your python version should be 3.8 or higher. # It may work for lower python versions, but I make no guarantee. python3 /path/to/jp-mining-note/tools/hotkey.py -f FUNCTION_NAME Examples (click here) # default python3 /path/to/jp-mining-note/tools/hotkey.py -f update_sentence # opens card browser automatically python3 /path/to/jp-mining-note/tools/hotkey.py -f update_sentence --enable-gui-browse If you want to use these as keybinds, I will leave it up to you to determine how to do that (as there are too many different setups and programs that people can use to create keybinds). However, some tips for ShareX and AutoKey are given below. Instructions for running Python scripts in ShareX If you want, you can even use the Python scripts with ShareX, so long as you have Python installed. To use Python with ShareX, follow all the steps (shown above ), until you set the action values. The command should be the DRIVE:\\PATH\\TO\\python.exe (instead of the path to powershell.exe ). The argument should be DRIVE:\\PATH\\TO\\jp-mining-note\\tools\\hotkey.py -f FUNCTION_NAME (instead of the large one-liner.) Instructions for AutoKey (Not AutoHotKey) If you are using AutoKey for Linux, it should be possible to do the following instead: Go to: Settings \u2192 Configure AutoKey \u2192 Script Engine \u2192 User Module file \u2192 (add the jp-mining-note/tools directory) Create a script type hotkey, Within the script, run any function thusly: import hotkey hotkey . FUNCTION_NAME () Example: import hotkey hotkey . update_sentence () Example with GUI: import hotkey hotkey . _browse_anki ( \"nid:1\" ) note_id = hotkey . update_sentence () hotkey . _browse_anki ( f \"nid: { note_id } \" )","title":"How-To: Running with Python"},{"location":"jpresources/#update-sentence-with-clipboard","text":"Function Name : update_sentence This script updates the sentence with the current clipboard (while preserving the bolded word), and removes the SentenceReading field (of the newest note added). This script is useful when Yomichan's parsed sentence does not match the recorded audio. This is also useful for when Yomichan's word parser doesn't match the word itself (steps shown below). Note After running this script, you must manually generate the SentenceReading field if you want the furigana reading. Of course, this can be done in bulk at any point, as shown here . How-To: Fix incorrectly-bolded words (click here) As an example, The target word \u5e0c\u671b in the sentence \u300c\u5165\u90e8\u5e0c\u671b\u306a\u3093\u3067\u3059\u3051\u3069\u2026\u300d will be parsed by Yomichan as the following: \u5165\u90e8<b>\u5e0c\u671b\u306a</b>\u3093\u3067\u3059\u3051\u3069\u2026 Within the original popup, you can add two versions of the word by default: The one with JMdict only. Adding this word will add the sentence with incorrect bolding. The one with everything else other than JMdict. Adding this word will have the correct bold, but will be missing some definitions. To add the above sentence that solves both problems (no weird bold, and contains all definitions), do NOT add the word within the sentence. Instead, do the following: Highlight over the header word itself (or the word in the orthographic forms dictionary), and add that word instead. Demo (click here) Copy the desired sentence. Run this script. Note It is assumed that you have multiple popups enabled . How the bolded word is preserved (click here) The bolded word is preserved if the exact content within the bolded word is found within the clipboard, which should be almost always the case. For example, assume the added sentence is the following: \u3055\u3066\u306f < b > \u507d\u8005 </ b > \u3060\u306a\uff01 As long as the clipboard contains the word \u300c\u507d\u8005\u300d, then the bold is preserved. For example, the following clipboard contents will preserve the bold: \u304b\u308f\u3044\u3052\u306e\u3042\u308b\u5973\u3058\u3083\u306a\u3044\u3002\u3055\u3066\u306f\u507d\u8005\u3060\u306a\uff01 ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $clipboard = ( Get-Clipboard | where { $_ -ne '' }) -join '' ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; $curr_note_sent = $curr_note_data . result . fields . Sentence . value ; $result_sent = '' ; if ( $curr_note_sent -match '<b>(?<bolded>.+)</b>' ) { $bolded = $matches [ 'bolded' ]; # may not replace anything $result_sent = $clipboard . replace ( $bolded , \"<b>$bolded</b>\" ); } else { # default $result_sent = $clipboard ; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ Sentence = $result_sent ; SentenceReading = '' ; } } } };","title":"Update Sentence with Clipboard"},{"location":"jpresources/#update-additionalnotes-with-clipboard","text":"Function Name : update_additional_notes This script does the exact same thing as the above script, but with AdditionalNotes instead of Sentence . The tested word, if found, is also automatically highlighted. This is useful to copy/paste context for the sentence (the surrounding lines around the sentence). ShareX Script (click here) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne \\\"\\\"}) -join \\\"<br>\\\"; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ AdditionalNotes = $result_sent; } } } };\" Original ShareX Code (click here) # (common begin) function Run-Json { param ( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5 ; $data = Invoke-RestMethod -Uri http :// 127 . 0 . 0 . 1 : 8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json ; return $data ; }; # (common end) $clipboard = ( Get-Clipboard | where { $_ -ne \"\" }) -join \"<br>\" ; $added_notes = Run-Json @{ action = 'findNotes' ; version = 6 ; params = @{ query = 'added:1' ; } }; $sorted_list = $added_notes . result | Sort-Object -Descending { [Long] $_ }; $curr_note_id = $sorted_list [ 0 ]; $curr_note_data = Run-Json @{ action = 'notesInfo' ; version = 6 ; params = @{ notes = @( $curr_note_id ); } }; $curr_note_sent = $curr_note_data . result . fields . Sentence . value ; $result_sent = '' ; if ( $curr_note_sent -match '<b>(?<bolded>.+)</b>' ) { $bolded = $matches [ 'bolded' ]; # may not replace anything $result_sent = $clipboard . replace ( $bolded , \"<b>$bolded</b>\" ); } else { # default $result_sent = $clipboard ; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields' ; version = 6 ; params = @{ note = @{ id = $curr_note_id ; fields = @{ AdditionalNotes = $result_sent ; } } } };","title":"Update AdditionalNotes with Clipboard"},{"location":"jpresources/#copy-from-previous-card","text":"Function Name : copy_from_previous This script does the following: Set the AdditionalNotes and Picture field of the newest card to the previous (second-newest) card's fields. Copies all the tags of the previous card. This is useful for when you are adding more than one sentence with the same text box of a visual novel, as it prevents you from having to run the screenshot hotkey.","title":"Copy from Previous Card"},{"location":"jpresources/#orthographic-variants-fix-sentence-and-frequency","text":"Function Name : fix_sent_and_freq This script does the following: Sets the previous note's fields to the newest note's fields: FrequencyStylized Sentence SentenceReading Deletes the newest note This is useful for when you want to add the the word within the Orthographic Variants dictionary. The Orthographics Variants dictionary is extremely useful for monolingual definitions, where dictionaries only contain entries for more kanjified words. In practice, I've personally found numerous examples of this in everyday media, so this has helped me immensely. Examples (to test the dictionary on) \u300c\u30b9\u30da\u30eb\u30c9\u65cf\u3078\u306e\u6050\u6016\u306f\u6050\u3089\u304f\u3053\u306e\u4e16\u754c\u306b \u6839\u3065\u3044\u3066\u3044\u308b \u3093\u3060\u308d\u3046\u300d \u300c\u30eb\u30fc\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3001\u4eca \u304a\u4ee3\u308f\u308a \u3092\u304a\u6301\u3061\u3057\u307e\u3059\u306d\u300d \u300c\u305f\u3060\u3001\u4e00\u3064\u3060\u3051 \u91d8\u3092\u3055\u3055\u305b\u3066 \u3082\u3089\u3046\u3051\u3069\u2026\u8cb4\u65b9\u304c\u3053\u308c\u304b\u3089\u4f55\u3092\u3059\u308b\u306b\u3057\u3066\u3082\u3001\u4ed5\u4e8b\u306f\u4eca\u307e\u3067\u901a\u308a\u3053\u306a\u3057\u3066\u3082\u3089\u3046\u308f\u3088\uff1f\u300d It is assumed that you have multiple popups enabled for monolingual definitions, so you can easily look up the word in the Orthographic Forms dictionary.","title":"Orthographic Variants: Fix Sentence and Frequency"},{"location":"jpresources/#other-random-resources","text":"Note Most things here have been moved to the Setup: Everything Else page","title":"Other Random Resources"},{"location":"jpresources/#mikagu-pitch-accent-alternatives","text":"migaku updated Fork of migaku to be updated for anki version 2.1.50+ anki-jrp Completely stand-alone plugin from migaku with a completely different codebase Only does one thing: adds pitch accent colors (along with furigana)","title":"Mikagu pitch accent alternatives"},{"location":"kanjihover/","text":"TODO add intro Result Queries & Categorization \u00b6 The exact results shown through Kanji Hover is not completely trivial, so this process is explained below. The words are searched and sorted into 3 categories: The two oldest, not new cards (already reviewed before, in order of add date) The two latest, not new cards (the most recent two cards that you have reviewed, in order of add date) The two oldest, new cards (the first 2 new cards that you will see with the kanji) The last category (the new cards) are greyed out to show that you haven't reviewed the card yet (i.e. you may not know the word yet). Conversely, the first two categories (the non-new cards) represent words that you likely already know, so they are not greyed out. The exact numbers shown in each category can be changed in the options file : \"kanji-hover\": { \"max-non-new-oldest\": ... \"max-non-new-latest\": ... \"max-new-latest\": ... } Results Sorting \u00b6 The above makes the assumption that you are reviewing in order of creation date, rather than the time of first review, to save resources. In other words, if you re-ordered your cards to be different from the add-date, then the kanji hover will not be able to recognize that. For people who review in order of frequency only, then the assumption above is completely broken. Unfortunately, there is currently no way to order the results by anything other than by the creation date. Suspended Cards \u00b6 Some assumptions are made about suspended cards. For example, suspended cards flagged as green are counted in the \"non-new\" cards category (known words), and suspended cards flagged as red are counted as words that you do not know AND will not study in the future (not shown in any category). This can be changed in the options file : \"kanji-hover\": { \"non-new-query\": ... \"new-query\": ... } Related Programs \u00b6 Cade's Kanji Hover Hover over a kanji to see its readings, meanings (english), and other info. This does not show example words from other cards. My implmentation of kanji hover was heavily inspired by this. Hanzi Web for Anki The end result of this is to this note's implementation of kanji-hover, in the sense that it is used to see kanjis that have been used in other notes. However, it differs primarily in the fact that all the information must be mass-generated. This indeed has several advantages, such as being able to use the infomation on Android, where Anki-Connect isn't full supported. Warning None of the above will work with jp-mining-note by default. In fact, it's almost guaranteed that Cade's Kanji Hover will conflict with this note's kanji hover ability.","title":"Kanji Hover (TODO)"},{"location":"kanjihover/#result-queries-categorization","text":"The exact results shown through Kanji Hover is not completely trivial, so this process is explained below. The words are searched and sorted into 3 categories: The two oldest, not new cards (already reviewed before, in order of add date) The two latest, not new cards (the most recent two cards that you have reviewed, in order of add date) The two oldest, new cards (the first 2 new cards that you will see with the kanji) The last category (the new cards) are greyed out to show that you haven't reviewed the card yet (i.e. you may not know the word yet). Conversely, the first two categories (the non-new cards) represent words that you likely already know, so they are not greyed out. The exact numbers shown in each category can be changed in the options file : \"kanji-hover\": { \"max-non-new-oldest\": ... \"max-non-new-latest\": ... \"max-new-latest\": ... }","title":"Result Queries &amp; Categorization"},{"location":"kanjihover/#results-sorting","text":"The above makes the assumption that you are reviewing in order of creation date, rather than the time of first review, to save resources. In other words, if you re-ordered your cards to be different from the add-date, then the kanji hover will not be able to recognize that. For people who review in order of frequency only, then the assumption above is completely broken. Unfortunately, there is currently no way to order the results by anything other than by the creation date.","title":"Results Sorting"},{"location":"kanjihover/#suspended-cards","text":"Some assumptions are made about suspended cards. For example, suspended cards flagged as green are counted in the \"non-new\" cards category (known words), and suspended cards flagged as red are counted as words that you do not know AND will not study in the future (not shown in any category). This can be changed in the options file : \"kanji-hover\": { \"non-new-query\": ... \"new-query\": ... }","title":"Suspended Cards"},{"location":"kanjihover/#related-programs","text":"Cade's Kanji Hover Hover over a kanji to see its readings, meanings (english), and other info. This does not show example words from other cards. My implmentation of kanji hover was heavily inspired by this. Hanzi Web for Anki The end result of this is to this note's implementation of kanji-hover, in the sense that it is used to see kanjis that have been used in other notes. However, it differs primarily in the fact that all the information must be mass-generated. This indeed has several advantages, such as being able to use the infomation on Android, where Anki-Connect isn't full supported. Warning None of the above will work with jp-mining-note by default. In fact, it's almost guaranteed that Cade's Kanji Hover will conflict with this note's kanji hover ability.","title":"Related Programs"},{"location":"modding/","text":"Introduction \u00b6 This page describes all the ways of modding your note, and goes into depth on the ways you can mod your note without losing your changes between updates. Modding (The Obvious Way) \u00b6 Throughout the documentation and within the templates alone, you will likely see warning messages to not edit the templates directly unless you are willing to lose your changes when you update the note. The most obvious way to mod the note is directly in the pre-built template downloaded. If you are completely fine with losing your changes upon each update, and don't want to take advantages of certain tools that comes with this note (such as compile-time options), then you can simply edit the template and ignore the rest of this page. Modding Overview \u00b6 To ensure that your changes aren't lost, the recommended way to make changes to the existing templates is to add new files, rather than editing existing ones. This allows you to continuously update with the note, while having your custom files stay in place. Warning There is no guaranteed backwards compatability for anything mentioned here (especially while the note is still in beta). Although you won't lose your changes upon update, your changes might also not work on the next update. For example, if the file that you are overriding gets renamed, you will have to rename the file to match the newly renamed file. I will try my best to keep things backwards compatable, but given the current state of the note (particularily the CSS), it might not be possible to do most of the time. When this note comes out of beta, backward-incompatable changes should be harshly reduced. Prerequisites \u00b6 You must be able to successfully build the template in order to start modding the note. See the build page for more details. Additionally, it is recommended that you go through the compile-time options section in the build page after your first successful build, as it may contain what you are looking for. Custom Templates: Overrides \u00b6 An easy way to override and extend parts of the card templates is by using an overrides folder. This folder (specified under config.py under the templates-override-folder option) allows you to override any file under the src folder (outside of scss files). Primarily, this allows you to override sections of template code found under src/jp-mining-note , such as src/jp-mining-note/partials/hint.html . Note Overrides are primarily for extending the HTML aspect of the templates. If you are instead looking to modify javascript, see here . Likewise, for CSS modifications, see here . The structure of the overrides folder must match the structure in the src folder. For example, if you want to override the hint file ( src/jp-mining-note/partials/hint.html ), the new file must be created under overrides/jp-mining-note/partials/hint.html Example (Add external links) \u00b6 Warning The following is deprecated starting from Version 0.10.3.0. Version 0.10.3.0 allows the user to customize external links in the compile options ( config.py ). This is only here to serve as a placeholder example (while I try to think of other practical examples people would use). Let me know if you have any ideas! Let's say we want to rewrite the Extra Info section to have external links that search for the tested word. Look for the partial within the src folder. This leads us to the src/jp-mining-note/partials/extra_info.html file. Override the partial . Now that we know the location of the partial, we create the same file in overrides . This new file should be of the path overrides/jp-mining-note/partials/extra_info.html . Write the code . Using the partial under src as an example, the following code is a modified version of the original HTML where we removed the dependency on the PAGraphs and UtilityDictionaries fields. Additionally, at the very bottom, a link to Jisho and Yourei is provided. Copy and paste the code below to your newly created file ( overrides/jp-mining-note/partials/extra_info.html ). Extra Info with External Links < details class = \"glossary-details glossary-details--small\" id = \"extra_info_details\" > < summary > Extra Info </ summary > < blockquote class = \"glossary-blockquote glossary-blockquote--small highlight-bold\" > < div class = \"glossary-text glossary-text--extra-info\" > {% call IF ( \"PAGraphs\" ) %} < div class = \"pa-graphs\" > {{ T ( \"PAGraphs\" ) }} </ div > {% endcall %} {% call IF ( \"UtilityDictionaries\" ) %} < div class = \"utility-dicts\" > {{ T ( \"UtilityDictionaries\" ) }} </ div > {% endcall %} < a href = \"https://jisho.org/search/ {{ T ( 'Word' ) }} \" > \u8f9e\u66f8 </ a > \u30fb < a href = \"http://yourei.jp/ {{ T ( 'Word' ) }} \" > \u7528\u4f8b </ a > </ div > </ blockquote > </ details > Rebuild and reinstall the template . After rebuilding and reinstalling, your Extra Info section should now have two links at the bottom. Custom JS: Modules \u00b6 Modules (not to be confused with regular javascript modules ) is a hybrid template/javascript system that allows code separation at the file level, but allows the javascript to be compiled into each template, rather than separate files. The biggest advantage of this over a monolithic system is that individual modules can be enabled, disabled, created, and modified at ease, all without editing the source files. Example (Hello World) \u00b6 The following will enable a the hello world module, which prints a \"Hello world!\" at the front of any card (as a warning on the info circle ). Under config/config.py , add \"example\" to enabled-modules . \"compile-options\": { \"allow-user-defined-modules\": True, \"enabled-modules\": [ ... \"customize-open-fields\", # Make sure a comma is here! \"example\" ] }, Under config/jpmn_opts.jsonc (or more preferably, your own options file specified under opts-path in config.py ), add the following: \"modules\": { \"customize-open-fields\": { ... }, // Make sure there is a comma here! \"example\": { \"enabled\": true } } Rebuild the note, and preview any card. The front side of any card should have a \"Hello world!\" warning, while the back side should remain normal. Quickstart \u00b6 If you want to get to inserting your own javascript as soon as possible, do the following: Follow the steps of the example above, and make sure the example module is working. Copy the example module into overrides/modules . This should result in the following file structure: overrides L modules L example L main.html L main.js From here, all you have to do is edit the main.js and main.html to your liking. Note The js module is of type JavascriptContainer , which is defined under tools/make.py . This interface allows you to define javascript within certain parts of a card, and restrict it to a certain subset of templates (sides and card types). Please see the aformentioned file to view the existing interface. Likewise, see the base javascript file ( src/jp-mining-note/base.js ) to view how the interface is used. If you want more detailed explanations on what has been happening up until this point, continue reading below. Enabling & Disabling Modules \u00b6 Modules can be easily enabled and disabled by modifying the enabled-modules option under config/config.py . Comment out any existing module, or add any modules you want to the list. Additionally, if you are using modules outside the default modules that come enabled with the note (including the example module), the allow-user-defined-modules option should be set to True . Modding Existing Modules \u00b6 Modules can be defined in the same style as the template overrides above. This means that if you want to edit a module, you can simply override the module files themselves by copying the module folder into overrides/modules folder. For example, if you want to override the auto-pitch-accent module, copy the auto-pitch-accent folder into overrides/module/auto-pitch-accent . Note In the quickstart, we did exactly this with the example module. Since the example module is completely overwritten by the user, the previous example module code is completely ignored. Creating More Modules \u00b6 The easiest way to create a new module is by copying the example folder, and renaming it to something different. This folder should be placed under overrides/modules under most cases. However, if you are looking to contribute to the project, place this under src/modules instead. Certain parts of the code should be renamed as well to avoid conflicts with the existing example module, including the MOD.id , import path, JPMNLogger constructor, and runtime option call ( utils.opt ). Of course, make sure all the renames are consistent. For example, all of the following should be the same: MOD.id module folder name JPMNLogger constructor argument Afterwards, make sure to add the module id to enabled-modules , and ensure that allow-user-defined-modules is set to True . If everything is done correctly, the note should include your custom module after the next build! Why not just separate the code with files? \u00b6 Short answer : In an attempt to keep the card as stable as possible between versions. Long answer : Anki specifically states this in its official documentation : Quote Javascript functionality is provided without any support or warranty. Many javascript-related things seem to behave strangely in Anki, which prevents the ability to separate files easily. Here have been the solutions I have tried before moving to this approach: Link an external script with the <script> tag There are two main problems with this approach: On older Anki versions (2.1.49 and below), all <script> tags loads asynchronously compared to each other. This means if any file must be ran before a file is loaded, then the script would fail. On versions 2.1.50 and above, it appears that Anki loads <script> tags synchronously. However, there is no guarantee that this will be the case for the future. Certain javascript in the main template has to be ran before loading in any file. This requirement exists for this note type due to the runtime-options file exists. The global JPMNOpts has to exist for any external files that uses runtime options to work. This can be fixed by importing the options separately for each file, but that naturally leads us to the examples shown in the following section. Regular imports within Javascript All other examples of importing without a separate <script src=\"...\"> requires asynchronous javascript features, which should be avoided as much as possible. Examples: < script > // https://forums.ankiweb.net/t/linking-to-external-javascript/1713 var injectScript = ( src ) => { return new Promise (( resolve , reject ) => { // a Promise is an asynchronous feature! const script = document . createElement ( 'script' ); script . src = src ; script . async = true ; script . onload = resolve ; script . onerror = reject ; document . head . appendChild ( script ); }); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import // this import function is an asynchronous function! ( async () => { await import ( \"/modules/my-module.js\" ); // ... })(); </ script > <!-- type=\"module\" forces this entire script to run asynchronously! --> < script type = \"module\" > // for the `import` statement to work, the script must be of type=\"module\" // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import import { export1 } from \"module-name\" ; </ script > In conclusion, this is a design decision made after lots of trial and error when attempting to work with Anki's Javascript parser. I believe this is the best way to ensure that the note stays resilient across Anki updates, as the javascript itself has very few hacks to get it to behave well. Custom CSS \u00b6 Warning Since this note is still in beta, the CSS in particular is subject to heavy change. This is because when mobile support is being worked on, the CSS will likely heavily change to support mobile. If you are planning on changing the CSS, be vigilant with potential changes in future updates! If you want to extend the CSS, do the following: Make a new folder under src/scss (for example, extra ). Note Unlike everything else here, custom CSS cannot be defined in the overrides folder, due to a complication in the current build system. I will be working on a way to define this in the overrides folder in the future. Add the folder to the end of css-folders in config.py . This should result in the following: \"css-folders\": [\"base\", \"dictionaries\", \"extra\"], Under the extra folder, use the following files to override the correct css: style.scss : The main css for the card templates. field.scss : The css used by CSS injector to customize individual fields. editor.scss : The css used by CSS injector to customize the editor around the fields. All of the files are optional. This means you do not need to create all three files for the folder to be valid. The resulting folder should be of the format: src L scss L base L ... L dictionaries L ... L extra L field.scss L editor.scss L style.scss Note You might have noticed that this is the SCSS, not CSS. However, SCSS is complete superset of CSS (with some small exceptions). In other words, if you don't know any SCSS, you can write normal CSS and have it behave completely the same. Example (Zoom) \u00b6 Let's say we want to increase (or decrease) the size of the card, without affecting any of Anki's GUI. Create a folder called extra like above, and include the folder under css-folders like above. Add the following code to the extra/style.scss file (create the file if it doesn't exist): : root { /* Times 1.1 of the original size. * If you want to make the note smaller, use a value below 1, like 0.9. */ --zoom : 1.1 ; } Rebuild and reinstall the template. Example (Limiting number of dictionaries) \u00b6 This allows you to limit the number of displayed dictionaries shown in \"Extra Definitions\". Create a folder called extra like above , and include the folder under css-folders like above. Under extra/style.scss , add the following code: /* max 4 definitions shown */ . glossary-text--extra-definitions ol li : nth-child ( n + 5 ) { display : none ; } (Optional) Under extra/field.scss , add the following code: /* max 4 definitions shown */ anki-editable [ field = \"ExtraDefinitions\" ] ol li : nth-child ( n + 5 ) { color : var ( --text-color--3 ); } This will grey out the definitions past the 4th definition in the editor. Rebuild and reinstall the template. Example (Limiting number of frequencies) \u00b6 This allows you to limit the number of frequencies shown at the top right corner. Create a folder called extra like above , and include the folder under css-folders like above. Under extra/style.scss , add the following code: /* max 5 frequencies shown */ . frequencies div . frequencies__group : nth-child ( n + 6 ) { display : none ; } (Optional) Under extra/field.scss , add the following code: /* max 5 frequencies shown */ anki-editable [ field = \"FrequenciesStylized\" ] div . frequencies__group : nth-child ( n + 6 ) { color : var ( --text-color--3 ); } This will grey out the frequencies past the 5th frequency in the editor. Rebuild and reinstall the template. Field List Editing \u00b6 This section describes import PSAs on what you should you if you want to edit the fields of the note (i.e. adding, removing, renaming, and moving). Fields editing in this context refers to the fields that you can edit in the Fields (list) menu, found under (Main window) \u2192 Browse \u2192 Fields... . Note If you never plan on updating the note, you can safely modify the field list to your heart's content, and ignore the rest of this section. Installer details \u00b6 The installer, when detecting a higher version, attempts to find and apply any changes to the field list when necessary. These changes are specified under tools/note_changes.py . By default, the installer expects the field list to be completely un-changed after installation, and does many checks to verify this before and after installation. Do not remove fields \u00b6 One of the checks that the installer does is to ensure that all fields are present. This is a design choice to remove as many assumptions as possible, so that it is easier for the installer to update the note. Note This design choice may be changed in the future, but will likely remain until the end of the beta release. If you want to remove a field, the best alternative is to do the following: Move the field below the Comment field, so the field is out of your way. Whenever you decide to update the note to a new version, run the installation script with the --ignore-order flag. Do not rename fields \u00b6 There is currently no way to let the installer know that you renamed a field. Therefore, you should not rename fields at all, as this will cause the initial field list check to fail. If you are completely insistent on renaming a field, you must change all templates that uses the field to match your preferred field name. Note Similarily to the above, this may be changed in the future, but will likely remain until the end of the beta release. How to add & reorder fields \u00b6 If you want to add a field while preserving the existing field order upon updates, add the field under the Comment field. This is because the installer only checks the subset of fields above the Comment field, when verifying correctness. If you don't care about preserving field order, you can simply add the field anywhere you want, and then run the installation script with --ignore-order whenever you want to update the note to a new version. Other \u00b6 Javascript print statements \u00b6 Anki doesn't come with a way to use console.log() normally, so I made one myself. // global logger LOGGER . error ( \"message\" ); LOGGER . warn ( \"message\" ); LOGGER . info ( \"message\" ); LOGGER . debug ( \"message\" ); // module-specific logger const logger = JPMNLogger ( \"module-name\" ); logger . error ( \"message\" ); logger . warn ( \"message\" ); logger . info ( \"message\" ); logger . debug ( \"message\" ); The above functions prints a message of the given log level to the info circle. To see the message, hover over the info circle. To use the debug function, make sure that the debug option is set to true in the javascript options. Avoid asynchronous javascript features in Anki \u00b6 Example Asynchronous Javascript < script > // Example 1: normal asynchronous functions async function runMeAsynchronously () { // ... } // Example 2: promises function giveMeAPromise () { return new Promise (( resolve , reject ) => { setTimeout (() => { resolve ( \"Success!\" ); }, 1000 ); }); } giveMeAPromise (). then (() => { LOGGER . warn ( \"The promise is complete!\" , unique = false ); }); </ script > <!-- Example 3: anything wrapped in type=\"module\" --> < script type = \"module\" > // everything here is run asynchronously // ... </ script > TODO reason: functions can be executed multiple times reproducible way: use example 2 on both the front/back side of the card, and switch sides quickly should be two warnings but worst case is for cases which I don't know how to reproduce rarely, asynchronous functions run more than once including the async functions defined currently in modules like kanji-hover to cirumvent having their actions done twice, define the affected elements outside the asynchronous section the function still runs twice (so any side-effects of the function will still happen) however, other instances of the function should not work on the elements defined outside avoiding asynchronous features makes things more predictable within anki Example (safer) asynchronous javascript let ele = document . getElementById ( \"example\" ); async function runMeAsynchronously () { // ... ele . innerText += \"this should only appear once!\" ; }","title":"Modding"},{"location":"modding/#introduction","text":"This page describes all the ways of modding your note, and goes into depth on the ways you can mod your note without losing your changes between updates.","title":"Introduction"},{"location":"modding/#modding-the-obvious-way","text":"Throughout the documentation and within the templates alone, you will likely see warning messages to not edit the templates directly unless you are willing to lose your changes when you update the note. The most obvious way to mod the note is directly in the pre-built template downloaded. If you are completely fine with losing your changes upon each update, and don't want to take advantages of certain tools that comes with this note (such as compile-time options), then you can simply edit the template and ignore the rest of this page.","title":"Modding (The Obvious Way)"},{"location":"modding/#modding-overview","text":"To ensure that your changes aren't lost, the recommended way to make changes to the existing templates is to add new files, rather than editing existing ones. This allows you to continuously update with the note, while having your custom files stay in place. Warning There is no guaranteed backwards compatability for anything mentioned here (especially while the note is still in beta). Although you won't lose your changes upon update, your changes might also not work on the next update. For example, if the file that you are overriding gets renamed, you will have to rename the file to match the newly renamed file. I will try my best to keep things backwards compatable, but given the current state of the note (particularily the CSS), it might not be possible to do most of the time. When this note comes out of beta, backward-incompatable changes should be harshly reduced.","title":"Modding Overview"},{"location":"modding/#prerequisites","text":"You must be able to successfully build the template in order to start modding the note. See the build page for more details. Additionally, it is recommended that you go through the compile-time options section in the build page after your first successful build, as it may contain what you are looking for.","title":"Prerequisites"},{"location":"modding/#custom-templates-overrides","text":"An easy way to override and extend parts of the card templates is by using an overrides folder. This folder (specified under config.py under the templates-override-folder option) allows you to override any file under the src folder (outside of scss files). Primarily, this allows you to override sections of template code found under src/jp-mining-note , such as src/jp-mining-note/partials/hint.html . Note Overrides are primarily for extending the HTML aspect of the templates. If you are instead looking to modify javascript, see here . Likewise, for CSS modifications, see here . The structure of the overrides folder must match the structure in the src folder. For example, if you want to override the hint file ( src/jp-mining-note/partials/hint.html ), the new file must be created under overrides/jp-mining-note/partials/hint.html","title":"Custom Templates: Overrides"},{"location":"modding/#example-add-external-links","text":"Warning The following is deprecated starting from Version 0.10.3.0. Version 0.10.3.0 allows the user to customize external links in the compile options ( config.py ). This is only here to serve as a placeholder example (while I try to think of other practical examples people would use). Let me know if you have any ideas! Let's say we want to rewrite the Extra Info section to have external links that search for the tested word. Look for the partial within the src folder. This leads us to the src/jp-mining-note/partials/extra_info.html file. Override the partial . Now that we know the location of the partial, we create the same file in overrides . This new file should be of the path overrides/jp-mining-note/partials/extra_info.html . Write the code . Using the partial under src as an example, the following code is a modified version of the original HTML where we removed the dependency on the PAGraphs and UtilityDictionaries fields. Additionally, at the very bottom, a link to Jisho and Yourei is provided. Copy and paste the code below to your newly created file ( overrides/jp-mining-note/partials/extra_info.html ). Extra Info with External Links < details class = \"glossary-details glossary-details--small\" id = \"extra_info_details\" > < summary > Extra Info </ summary > < blockquote class = \"glossary-blockquote glossary-blockquote--small highlight-bold\" > < div class = \"glossary-text glossary-text--extra-info\" > {% call IF ( \"PAGraphs\" ) %} < div class = \"pa-graphs\" > {{ T ( \"PAGraphs\" ) }} </ div > {% endcall %} {% call IF ( \"UtilityDictionaries\" ) %} < div class = \"utility-dicts\" > {{ T ( \"UtilityDictionaries\" ) }} </ div > {% endcall %} < a href = \"https://jisho.org/search/ {{ T ( 'Word' ) }} \" > \u8f9e\u66f8 </ a > \u30fb < a href = \"http://yourei.jp/ {{ T ( 'Word' ) }} \" > \u7528\u4f8b </ a > </ div > </ blockquote > </ details > Rebuild and reinstall the template . After rebuilding and reinstalling, your Extra Info section should now have two links at the bottom.","title":"Example (Add external links)"},{"location":"modding/#custom-js-modules","text":"Modules (not to be confused with regular javascript modules ) is a hybrid template/javascript system that allows code separation at the file level, but allows the javascript to be compiled into each template, rather than separate files. The biggest advantage of this over a monolithic system is that individual modules can be enabled, disabled, created, and modified at ease, all without editing the source files.","title":"Custom JS: Modules"},{"location":"modding/#example-hello-world","text":"The following will enable a the hello world module, which prints a \"Hello world!\" at the front of any card (as a warning on the info circle ). Under config/config.py , add \"example\" to enabled-modules . \"compile-options\": { \"allow-user-defined-modules\": True, \"enabled-modules\": [ ... \"customize-open-fields\", # Make sure a comma is here! \"example\" ] }, Under config/jpmn_opts.jsonc (or more preferably, your own options file specified under opts-path in config.py ), add the following: \"modules\": { \"customize-open-fields\": { ... }, // Make sure there is a comma here! \"example\": { \"enabled\": true } } Rebuild the note, and preview any card. The front side of any card should have a \"Hello world!\" warning, while the back side should remain normal.","title":"Example (Hello World)"},{"location":"modding/#quickstart","text":"If you want to get to inserting your own javascript as soon as possible, do the following: Follow the steps of the example above, and make sure the example module is working. Copy the example module into overrides/modules . This should result in the following file structure: overrides L modules L example L main.html L main.js From here, all you have to do is edit the main.js and main.html to your liking. Note The js module is of type JavascriptContainer , which is defined under tools/make.py . This interface allows you to define javascript within certain parts of a card, and restrict it to a certain subset of templates (sides and card types). Please see the aformentioned file to view the existing interface. Likewise, see the base javascript file ( src/jp-mining-note/base.js ) to view how the interface is used. If you want more detailed explanations on what has been happening up until this point, continue reading below.","title":"Quickstart"},{"location":"modding/#enabling-disabling-modules","text":"Modules can be easily enabled and disabled by modifying the enabled-modules option under config/config.py . Comment out any existing module, or add any modules you want to the list. Additionally, if you are using modules outside the default modules that come enabled with the note (including the example module), the allow-user-defined-modules option should be set to True .","title":"Enabling &amp; Disabling Modules"},{"location":"modding/#modding-existing-modules","text":"Modules can be defined in the same style as the template overrides above. This means that if you want to edit a module, you can simply override the module files themselves by copying the module folder into overrides/modules folder. For example, if you want to override the auto-pitch-accent module, copy the auto-pitch-accent folder into overrides/module/auto-pitch-accent . Note In the quickstart, we did exactly this with the example module. Since the example module is completely overwritten by the user, the previous example module code is completely ignored.","title":"Modding Existing Modules"},{"location":"modding/#creating-more-modules","text":"The easiest way to create a new module is by copying the example folder, and renaming it to something different. This folder should be placed under overrides/modules under most cases. However, if you are looking to contribute to the project, place this under src/modules instead. Certain parts of the code should be renamed as well to avoid conflicts with the existing example module, including the MOD.id , import path, JPMNLogger constructor, and runtime option call ( utils.opt ). Of course, make sure all the renames are consistent. For example, all of the following should be the same: MOD.id module folder name JPMNLogger constructor argument Afterwards, make sure to add the module id to enabled-modules , and ensure that allow-user-defined-modules is set to True . If everything is done correctly, the note should include your custom module after the next build!","title":"Creating More Modules"},{"location":"modding/#why-not-just-separate-the-code-with-files","text":"Short answer : In an attempt to keep the card as stable as possible between versions. Long answer : Anki specifically states this in its official documentation : Quote Javascript functionality is provided without any support or warranty. Many javascript-related things seem to behave strangely in Anki, which prevents the ability to separate files easily. Here have been the solutions I have tried before moving to this approach: Link an external script with the <script> tag There are two main problems with this approach: On older Anki versions (2.1.49 and below), all <script> tags loads asynchronously compared to each other. This means if any file must be ran before a file is loaded, then the script would fail. On versions 2.1.50 and above, it appears that Anki loads <script> tags synchronously. However, there is no guarantee that this will be the case for the future. Certain javascript in the main template has to be ran before loading in any file. This requirement exists for this note type due to the runtime-options file exists. The global JPMNOpts has to exist for any external files that uses runtime options to work. This can be fixed by importing the options separately for each file, but that naturally leads us to the examples shown in the following section. Regular imports within Javascript All other examples of importing without a separate <script src=\"...\"> requires asynchronous javascript features, which should be avoided as much as possible. Examples: < script > // https://forums.ankiweb.net/t/linking-to-external-javascript/1713 var injectScript = ( src ) => { return new Promise (( resolve , reject ) => { // a Promise is an asynchronous feature! const script = document . createElement ( 'script' ); script . src = src ; script . async = true ; script . onload = resolve ; script . onerror = reject ; document . head . appendChild ( script ); }); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import // this import function is an asynchronous function! ( async () => { await import ( \"/modules/my-module.js\" ); // ... })(); </ script > <!-- type=\"module\" forces this entire script to run asynchronously! --> < script type = \"module\" > // for the `import` statement to work, the script must be of type=\"module\" // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import import { export1 } from \"module-name\" ; </ script > In conclusion, this is a design decision made after lots of trial and error when attempting to work with Anki's Javascript parser. I believe this is the best way to ensure that the note stays resilient across Anki updates, as the javascript itself has very few hacks to get it to behave well.","title":"Why not just separate the code with files?"},{"location":"modding/#custom-css","text":"Warning Since this note is still in beta, the CSS in particular is subject to heavy change. This is because when mobile support is being worked on, the CSS will likely heavily change to support mobile. If you are planning on changing the CSS, be vigilant with potential changes in future updates! If you want to extend the CSS, do the following: Make a new folder under src/scss (for example, extra ). Note Unlike everything else here, custom CSS cannot be defined in the overrides folder, due to a complication in the current build system. I will be working on a way to define this in the overrides folder in the future. Add the folder to the end of css-folders in config.py . This should result in the following: \"css-folders\": [\"base\", \"dictionaries\", \"extra\"], Under the extra folder, use the following files to override the correct css: style.scss : The main css for the card templates. field.scss : The css used by CSS injector to customize individual fields. editor.scss : The css used by CSS injector to customize the editor around the fields. All of the files are optional. This means you do not need to create all three files for the folder to be valid. The resulting folder should be of the format: src L scss L base L ... L dictionaries L ... L extra L field.scss L editor.scss L style.scss Note You might have noticed that this is the SCSS, not CSS. However, SCSS is complete superset of CSS (with some small exceptions). In other words, if you don't know any SCSS, you can write normal CSS and have it behave completely the same.","title":"Custom CSS"},{"location":"modding/#example-zoom","text":"Let's say we want to increase (or decrease) the size of the card, without affecting any of Anki's GUI. Create a folder called extra like above, and include the folder under css-folders like above. Add the following code to the extra/style.scss file (create the file if it doesn't exist): : root { /* Times 1.1 of the original size. * If you want to make the note smaller, use a value below 1, like 0.9. */ --zoom : 1.1 ; } Rebuild and reinstall the template.","title":"Example (Zoom)"},{"location":"modding/#example-limiting-number-of-dictionaries","text":"This allows you to limit the number of displayed dictionaries shown in \"Extra Definitions\". Create a folder called extra like above , and include the folder under css-folders like above. Under extra/style.scss , add the following code: /* max 4 definitions shown */ . glossary-text--extra-definitions ol li : nth-child ( n + 5 ) { display : none ; } (Optional) Under extra/field.scss , add the following code: /* max 4 definitions shown */ anki-editable [ field = \"ExtraDefinitions\" ] ol li : nth-child ( n + 5 ) { color : var ( --text-color--3 ); } This will grey out the definitions past the 4th definition in the editor. Rebuild and reinstall the template.","title":"Example (Limiting number of dictionaries)"},{"location":"modding/#example-limiting-number-of-frequencies","text":"This allows you to limit the number of frequencies shown at the top right corner. Create a folder called extra like above , and include the folder under css-folders like above. Under extra/style.scss , add the following code: /* max 5 frequencies shown */ . frequencies div . frequencies__group : nth-child ( n + 6 ) { display : none ; } (Optional) Under extra/field.scss , add the following code: /* max 5 frequencies shown */ anki-editable [ field = \"FrequenciesStylized\" ] div . frequencies__group : nth-child ( n + 6 ) { color : var ( --text-color--3 ); } This will grey out the frequencies past the 5th frequency in the editor. Rebuild and reinstall the template.","title":"Example (Limiting number of frequencies)"},{"location":"modding/#field-list-editing","text":"This section describes import PSAs on what you should you if you want to edit the fields of the note (i.e. adding, removing, renaming, and moving). Fields editing in this context refers to the fields that you can edit in the Fields (list) menu, found under (Main window) \u2192 Browse \u2192 Fields... . Note If you never plan on updating the note, you can safely modify the field list to your heart's content, and ignore the rest of this section.","title":"Field List Editing"},{"location":"modding/#installer-details","text":"The installer, when detecting a higher version, attempts to find and apply any changes to the field list when necessary. These changes are specified under tools/note_changes.py . By default, the installer expects the field list to be completely un-changed after installation, and does many checks to verify this before and after installation.","title":"Installer details"},{"location":"modding/#do-not-remove-fields","text":"One of the checks that the installer does is to ensure that all fields are present. This is a design choice to remove as many assumptions as possible, so that it is easier for the installer to update the note. Note This design choice may be changed in the future, but will likely remain until the end of the beta release. If you want to remove a field, the best alternative is to do the following: Move the field below the Comment field, so the field is out of your way. Whenever you decide to update the note to a new version, run the installation script with the --ignore-order flag.","title":"Do not remove fields"},{"location":"modding/#do-not-rename-fields","text":"There is currently no way to let the installer know that you renamed a field. Therefore, you should not rename fields at all, as this will cause the initial field list check to fail. If you are completely insistent on renaming a field, you must change all templates that uses the field to match your preferred field name. Note Similarily to the above, this may be changed in the future, but will likely remain until the end of the beta release.","title":"Do not rename fields"},{"location":"modding/#how-to-add-reorder-fields","text":"If you want to add a field while preserving the existing field order upon updates, add the field under the Comment field. This is because the installer only checks the subset of fields above the Comment field, when verifying correctness. If you don't care about preserving field order, you can simply add the field anywhere you want, and then run the installation script with --ignore-order whenever you want to update the note to a new version.","title":"How to add &amp; reorder fields"},{"location":"modding/#other","text":"","title":"Other"},{"location":"modding/#javascript-print-statements","text":"Anki doesn't come with a way to use console.log() normally, so I made one myself. // global logger LOGGER . error ( \"message\" ); LOGGER . warn ( \"message\" ); LOGGER . info ( \"message\" ); LOGGER . debug ( \"message\" ); // module-specific logger const logger = JPMNLogger ( \"module-name\" ); logger . error ( \"message\" ); logger . warn ( \"message\" ); logger . info ( \"message\" ); logger . debug ( \"message\" ); The above functions prints a message of the given log level to the info circle. To see the message, hover over the info circle. To use the debug function, make sure that the debug option is set to true in the javascript options.","title":"Javascript print statements"},{"location":"modding/#avoid-asynchronous-javascript-features-in-anki","text":"Example Asynchronous Javascript < script > // Example 1: normal asynchronous functions async function runMeAsynchronously () { // ... } // Example 2: promises function giveMeAPromise () { return new Promise (( resolve , reject ) => { setTimeout (() => { resolve ( \"Success!\" ); }, 1000 ); }); } giveMeAPromise (). then (() => { LOGGER . warn ( \"The promise is complete!\" , unique = false ); }); </ script > <!-- Example 3: anything wrapped in type=\"module\" --> < script type = \"module\" > // everything here is run asynchronously // ... </ script > TODO reason: functions can be executed multiple times reproducible way: use example 2 on both the front/back side of the card, and switch sides quickly should be two warnings but worst case is for cases which I don't know how to reproduce rarely, asynchronous functions run more than once including the async functions defined currently in modules like kanji-hover to cirumvent having their actions done twice, define the affected elements outside the asynchronous section the function still runs twice (so any side-effects of the function will still happen) however, other instances of the function should not work on the elements defined outside avoiding asynchronous features makes things more predictable within anki Example (safer) asynchronous javascript let ele = document . getElementById ( \"example\" ); async function runMeAsynchronously () { // ... ele . innerText += \"this should only appear once!\" ; }","title":"Avoid asynchronous javascript features in Anki"},{"location":"personalsetup/","text":"Welcome to my (hidden) personal setup page! This will contain condense, usually point form information on how to get my exact setup, and this section will be in continuous flux so long as I am learning japanese. If you want to use this note type, I recommend looking at the other pages of the wiki, as points will be better explained. Anki \u00b6 plugins: 1344485230 1225470483 2055492159 580654285 ajt furigana / ajt pitch accent / ankiconnect / local forvo config under normal setup page custom audio sources: http://localhost:8770/?expression={expression}&reading={reading} local audio plugin w/ sqlite get audio zips from existing computer / backup . \u251c\u2500\u2500 jpod_alternate_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 jpod_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 nhk16_files \u251c\u2500\u2500 audio \u2502 \u2514\u2500\u2500 20170616125910.aac \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 entries.json forvo plugin Yomichan \u00b6 import settings from an existing computer / backup drive TMW dicts Yomichan settings \u2192 \"Popup Appearance\": \"Compact glossaries\": on \"Compact tags\": off, monolingual: hold shift: bilingual (at any level) mouseover: monolingual monolingual shift: hold shift: access monolingual at first level bilingual at all other levels mouseover to access monolingual at other levels bilingual: mouseover: bilingual pa: hold shift: pitch accent and utilities Yomichan Template Options {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*)$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms)$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"monolingual\" }}{{ /set~ }} {{ ~! options related to selected text ~ }} {{ set \"opt-selection-text-enabled\" true }} {{ set \"opt-selection-text-dictionary\" true }} {{ set \"opt-selection-text-glossary\" true }} {{ set \"opt-selection-text-glossary-attempt-bold\" true }} monolingual profile \u00b6 scale: 110% condition: modifier keys are shift CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } li . definition-item [ data-dictionary = 'NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] : hover . gloss-list { opacity : 1 ; } bilingual profile \u00b6 scale: 100% NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 and \u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003 should have lower priority compared to bilingual dicts condition: modifier keys are ctrl CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b' ] { display : none ; } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } PA and grammar profile \u00b6 scale: 100% CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] { display : none ; } Phone profile \u00b6 because it's a phone, less dictionaries are going to be installed (for performance reasons) anki cards and searches will be less detailed than the ideal max List of dictionaries \u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248 rev.OUKOKU11_1.6 \u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248 rev.MEIKYO2.v1 \u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797 rev.shinjirin \u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248 rev.Shinmeikai5 \u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9 rev.daijisen_20210506;2021-07-27 \u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178 rev.jitsuyou1 \u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b rev.nihongo_no_sensei_v_1.03 ;2022-04-30;embedded urls, p of speech indicators(N5-N0) NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 rev.1.0--> JMDict Surface Forms rev.JMdict 2022-07-19 JMdict (English) rev.jmdict4 \u65b0\u548c\u82f1 rev.Shinwaei1 \u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6) rev.DOJG_v1.01;2022-04-30;better formatting Anime & Jdrama Freq: rev.frequency1 Innocent Ranked rev.frequency1 JPDB rev.JPDB_by-frequency-global_2022-05-10T03:27:02.930Z VN Freq rev.frequency1 KANJIDIC (English) rev.kanjidic2 NHK rev.pitch_1.0.1.1 \u5927\u8f9e\u6cc9 rev.pitch_1.0.0.1 \u30a2\u30af\u30bb\u30f3\u30c8\u8f9e\u5178 rev.pitch1 Kanjium rev.pitch1 CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ /* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; } Yomichan Fields \u00b6 Example Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard 1 IsHoverCard IsTargetedSentenceCard PAShowInfo 1 PATestOnlyWord 1 PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment DICTIONARY:\u300c{_jpmn-get-primary-definition-dict}\u300d<br>SELECTION:\u300c{_jpmn-selection-text}\u300d Discord \u00b6 Custom CSS \u00b6 : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } code { font-family : Ubuntu Mono , BlinkMacSystemFont , 'Segoe UI' , Roboto , Oxygen , Ubuntu , Cantarell , 'Open Sans' , 'Helvetica Neue' , sans-serif , Consolas , Andale Mono WT , Andale Mono , Lucida Console , Lucida Sans Typewriter , DejaVu Sans Mono , Bitstream Vera Sans Mono , Liberation Mono , Nimbus Mono L , Monaco , Courier New , Courier , monospace !important ; }","title":"Personalsetup"},{"location":"personalsetup/#anki","text":"plugins: 1344485230 1225470483 2055492159 580654285 ajt furigana / ajt pitch accent / ankiconnect / local forvo config under normal setup page custom audio sources: http://localhost:8770/?expression={expression}&reading={reading} local audio plugin w/ sqlite get audio zips from existing computer / backup . \u251c\u2500\u2500 jpod_alternate_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 jpod_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 nhk16_files \u251c\u2500\u2500 audio \u2502 \u2514\u2500\u2500 20170616125910.aac \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 entries.json forvo plugin","title":"Anki"},{"location":"personalsetup/#yomichan","text":"import settings from an existing computer / backup drive TMW dicts Yomichan settings \u2192 \"Popup Appearance\": \"Compact glossaries\": on \"Compact tags\": off, monolingual: hold shift: bilingual (at any level) mouseover: monolingual monolingual shift: hold shift: access monolingual at first level bilingual at all other levels mouseover to access monolingual at other levels bilingual: mouseover: bilingual pa: hold shift: pitch accent and utilities Yomichan Template Options {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*)$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms)$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"monolingual\" }}{{ /set~ }} {{ ~! options related to selected text ~ }} {{ set \"opt-selection-text-enabled\" true }} {{ set \"opt-selection-text-dictionary\" true }} {{ set \"opt-selection-text-glossary\" true }} {{ set \"opt-selection-text-glossary-attempt-bold\" true }}","title":"Yomichan"},{"location":"personalsetup/#monolingual-profile","text":"scale: 110% condition: modifier keys are shift CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } li . definition-item [ data-dictionary = 'NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] : hover . gloss-list { opacity : 1 ; }","title":"monolingual profile"},{"location":"personalsetup/#bilingual-profile","text":"scale: 100% NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 and \u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003 should have lower priority compared to bilingual dicts condition: modifier keys are ctrl CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b' ] { display : none ; } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; }","title":"bilingual profile"},{"location":"personalsetup/#pa-and-grammar-profile","text":"scale: 100% CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] { display : none ; }","title":"PA and grammar profile"},{"location":"personalsetup/#phone-profile","text":"because it's a phone, less dictionaries are going to be installed (for performance reasons) anki cards and searches will be less detailed than the ideal max List of dictionaries \u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248 rev.OUKOKU11_1.6 \u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248 rev.MEIKYO2.v1 \u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797 rev.shinjirin \u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248 rev.Shinmeikai5 \u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9 rev.daijisen_20210506;2021-07-27 \u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178 rev.jitsuyou1 \u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b rev.nihongo_no_sensei_v_1.03 ;2022-04-30;embedded urls, p of speech indicators(N5-N0) NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 rev.1.0--> JMDict Surface Forms rev.JMdict 2022-07-19 JMdict (English) rev.jmdict4 \u65b0\u548c\u82f1 rev.Shinwaei1 \u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6) rev.DOJG_v1.01;2022-04-30;better formatting Anime & Jdrama Freq: rev.frequency1 Innocent Ranked rev.frequency1 JPDB rev.JPDB_by-frequency-global_2022-05-10T03:27:02.930Z VN Freq rev.frequency1 KANJIDIC (English) rev.kanjidic2 NHK rev.pitch_1.0.1.1 \u5927\u8f9e\u6cc9 rev.pitch_1.0.0.1 \u30a2\u30af\u30bb\u30f3\u30c8\u8f9e\u5178 rev.pitch1 Kanjium rev.pitch1 CSS /* * ======== * global * ======== */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* Taken from: https://github.com/MarvNC/yomichan-dictionaries/#yomichan-css-for-kanji-dictionaries */ /* remove misc dict classifications/codepoints/stats */ . kanji-glyph-data { width : 100 % } . kanji-glyph-data > tbody > tr : nth-child ( n + 3 ) { display : none ; } /* remove stroke diagram, freq, header for next entries */ div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) . kanji-glyph-container , div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) [ data-section-type = 'frequencies' ], div . entry [ data-type = 'kanji' ] : nth-child ( n + 2 ) table . kanji-glyph-data > tbody > tr : first-child { display : none ; } /* remove 'No data found' */ . kanji-info-table-item-value-empty { display : none ; } /* remove horizontal lines */ . entry + . entry [ data-type = 'kanji' ], div # dictionary-entries > div . entry : nth-child ( n + 2 ) . kanji-glyph-data > tbody > tr > * { border-top : none !important ; } /* * ============ * global end * ============ */ /* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; }","title":"Phone profile"},{"location":"personalsetup/#yomichan-fields","text":"Example Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard 1 IsHoverCard IsTargetedSentenceCard PAShowInfo 1 PATestOnlyWord 1 PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment DICTIONARY:\u300c{_jpmn-get-primary-definition-dict}\u300d<br>SELECTION:\u300c{_jpmn-selection-text}\u300d","title":"Yomichan Fields"},{"location":"personalsetup/#discord","text":"","title":"Discord"},{"location":"personalsetup/#custom-css","text":": lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } code { font-family : Ubuntu Mono , BlinkMacSystemFont , 'Segoe UI' , Roboto , Oxygen , Ubuntu , Cantarell , 'Open Sans' , 'Helvetica Neue' , sans-serif , Consolas , Andale Mono WT , Andale Mono , Lucida Console , Lucida Sans Typewriter , DejaVu Sans Mono , Bitstream Vera Sans Mono , Liberation Mono , Nimbus Mono L , Monaco , Courier New , Courier , monospace !important ; }","title":"Custom CSS"},{"location":"preface/","text":"Before committing and going through the setup process, it would be best to make sure that the note aligns with exactly what you want. Supported Systems \u00b6 The most important step is to see if jp-mining-note (JPMN) works on your device. Card Creation (Yomichan) \u00b6 The card creation process is primarily done on PC (Windows, Mac, Linux). However, with the proper setup , cards can be created on Android. I'm not aware of a workflow for iOS that works with Yomichan. Anki Desktop \u00b6 Primary support is given to the latest Anki versions (2.1.54+ & Qt6). Limited support will be given for older versions of Anki. With that being said, JPMN should work for Anki versions 2.1.49+. Mobile (AnkiDroid and AnkiMobile) \u00b6 As of writing this, 1 mobile versions of Anki are not yet supported . There are plans of supporting AnkiDroid and AnkiMobile in the future. AnkiWeb \u00b6 There is no support for AnkiWeb, and there are no plans to support AnkiWeb. Themes \u00b6 Both light mode and dark mode are supported. However, dark mode is recommended as the main theme of this note. Theme & Design Principles \u00b6 Made for Japanese Learning \u00b6 The absolute fundamental goal of this note type is to make learning Japanese easier . Every feature you see is to simply make this learning process easier and smoother. Minimalistic Design \u00b6 This note is visually designed to be minimalistic because the fundamental goal is to learn Japanese, not to have eye catching graphics. Minimal Dependencies \u00b6 The only fundamental dependencies are Yomichan (to create the note) and the Anki-Connect add-on (to export the note from Yomichan , download the note, and for certain features to work within the note). Absolutely nothing else is required. This helps with maintaining stability across various Anki versions. Modularized, Customizable & Extendable \u00b6 This project ships with built-in tools to easily disable/enable features, or even completely remove them from the base template via compile-time options. Additionally, there are many built-in ways to extend the note to suit your exact needs. Free & Open Source \u00b6 Everything here, including the documentation itself, is completely free and open source, licensed under MIT . Rest easy knowing you will keep full ownership of your note, forever. Alternatives \u00b6 There are many, many Anki templates out there in the wild. The following page is my attempt to assemble together some of the the popular and/or interesting card templates. Setup \u00b6 Excited to take this note on a whirl? See the setup page to see just that! As of 2022/09/25. \u21a9","title":"Preface"},{"location":"preface/#supported-systems","text":"The most important step is to see if jp-mining-note (JPMN) works on your device.","title":"Supported Systems"},{"location":"preface/#card-creation-yomichan","text":"The card creation process is primarily done on PC (Windows, Mac, Linux). However, with the proper setup , cards can be created on Android. I'm not aware of a workflow for iOS that works with Yomichan.","title":"Card Creation (Yomichan)"},{"location":"preface/#anki-desktop","text":"Primary support is given to the latest Anki versions (2.1.54+ & Qt6). Limited support will be given for older versions of Anki. With that being said, JPMN should work for Anki versions 2.1.49+.","title":"Anki Desktop"},{"location":"preface/#mobile-ankidroid-and-ankimobile","text":"As of writing this, 1 mobile versions of Anki are not yet supported . There are plans of supporting AnkiDroid and AnkiMobile in the future.","title":"Mobile (AnkiDroid and AnkiMobile)"},{"location":"preface/#ankiweb","text":"There is no support for AnkiWeb, and there are no plans to support AnkiWeb.","title":"AnkiWeb"},{"location":"preface/#themes","text":"Both light mode and dark mode are supported. However, dark mode is recommended as the main theme of this note.","title":"Themes"},{"location":"preface/#theme-design-principles","text":"","title":"Theme &amp; Design Principles"},{"location":"preface/#made-for-japanese-learning","text":"The absolute fundamental goal of this note type is to make learning Japanese easier . Every feature you see is to simply make this learning process easier and smoother.","title":"Made for Japanese Learning"},{"location":"preface/#minimalistic-design","text":"This note is visually designed to be minimalistic because the fundamental goal is to learn Japanese, not to have eye catching graphics.","title":"Minimalistic Design"},{"location":"preface/#minimal-dependencies","text":"The only fundamental dependencies are Yomichan (to create the note) and the Anki-Connect add-on (to export the note from Yomichan , download the note, and for certain features to work within the note). Absolutely nothing else is required. This helps with maintaining stability across various Anki versions.","title":"Minimal Dependencies"},{"location":"preface/#modularized-customizable-extendable","text":"This project ships with built-in tools to easily disable/enable features, or even completely remove them from the base template via compile-time options. Additionally, there are many built-in ways to extend the note to suit your exact needs.","title":"Modularized, Customizable &amp; Extendable"},{"location":"preface/#free-open-source","text":"Everything here, including the documentation itself, is completely free and open source, licensed under MIT . Rest easy knowing you will keep full ownership of your note, forever.","title":"Free &amp; Open Source"},{"location":"preface/#alternatives","text":"There are many, many Anki templates out there in the wild. The following page is my attempt to assemble together some of the the popular and/or interesting card templates.","title":"Alternatives"},{"location":"preface/#setup","text":"Excited to take this note on a whirl? See the setup page to see just that! As of 2022/09/25. \u21a9","title":"Setup"},{"location":"runtimeoptions/","text":"There are many options that can be set within the (javascript) runtime options file. To edit this, navigate to your profile's media folder ), and open the _jpmn-options.js file as a text file. TODO add demo for windows to opening the file & editing Note To open the file as a text file on Windows, right click the file and select Edit . Do not double-click the file. The contents of the file should look something like the following: var JPMNOpts = (function (my) { my.settings = { ... // a bunch of settings } return my; }(JPMNOpts || {})); I recommend going through this file and selecting the options that best fits your workflow. As each setting is already documented in the file, the settings will not be documented heavily here. Instead, a small number of hand selected settings will be showcased below, to give you a taste of what is available. TODO flesh out below Keybinds \u00b6 TODO gif with screenkey Modules \u00b6 Many javascript heavy code are separated into modules by default. These can be enabled and disabled at the user's will if the user wants to sacrifice functionality for a slightly faster card. Some examples include: kanji-hover auto-pitch-accent sent-utils (basic sentence processing) img-utils (basic image processing) These modules likely also also have their own collection of settings to modify the behavior of said module. Colored Quotes instead of PA Indicator \u00b6 TODO picture comparisons between word PA indicator in quotes / word PA with PA indicator Greyed out fields \u00b6 TODO picture comparisons empty fields / empty fields but greyed out Open Collapsed Field on New Cards \u00b6 TODO gif","title":"Runtime Options (TODO)"},{"location":"runtimeoptions/#keybinds","text":"TODO gif with screenkey","title":"Keybinds"},{"location":"runtimeoptions/#modules","text":"Many javascript heavy code are separated into modules by default. These can be enabled and disabled at the user's will if the user wants to sacrifice functionality for a slightly faster card. Some examples include: kanji-hover auto-pitch-accent sent-utils (basic sentence processing) img-utils (basic image processing) These modules likely also also have their own collection of settings to modify the behavior of said module.","title":"Modules"},{"location":"runtimeoptions/#colored-quotes-instead-of-pa-indicator","text":"TODO picture comparisons between word PA indicator in quotes / word PA with PA indicator","title":"Colored Quotes instead of PA Indicator"},{"location":"runtimeoptions/#greyed-out-fields","text":"TODO picture comparisons empty fields / empty fields but greyed out","title":"Greyed out fields"},{"location":"runtimeoptions/#open-collapsed-field-on-new-cards","text":"TODO gif","title":"Open Collapsed Field on New Cards"},{"location":"setup/","text":"Overview \u00b6 A full sentence mining workflow requires two main parts: Text to make the cards from. The card exporter, to create cards from the text. And optionally, the image and sentence audio from the media (if the media has either). This page is dedicated to providing the minimal setup to create cards with this note type (part two), on PC. Part one (getting the text) and the optional part of part two (getting the image and sentence audio) are not documented on this page; they instead documented under the Setup: Everything Else page. Prerequisites \u00b6 It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Additionally, it is recommended to use the Qt6 version of Anki if possible. Note Worst case scenario, if any essential add-ons no longer work, you can always downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, try updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done). Finally, notice that this website contains a search bar! If you have a problem at any point, you might find the solution by searching for it. Installing the Card \u00b6 There are two ways of installing the card: Option 1: The Automatic Way (click here) If you know what git and python is, here's all you have to do: Windows MacOS & Linux git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note : : Ensure you have Anki open, and with anki-connect running : : Also ensure that you have python 3.10+ installed. : : It *MAY* work with lower versions of python, but I make no such guarantee. ;) python tools\\install.py git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. python tools/install.py The above does the following: Installs the latest stable version of the note Installs the fonts required for the note If the above made no sense to you, or you just want to install this normally, see the second option below. Option 2: The Manual Way (click here) Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ). Verifying the Note Works \u00b6 You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Dark Theme Light Theme Please check the following in particular: The fonts should match with the above example. If the fonts don't match, the note was likely installed with \"Option 2: The Manual Way\". Please verify you manually installed the fonts and placed them in the correct folder (see steps 3 and 4). Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this circle is red or orange, there is likely something wrong with the template. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box. Kanji hover may not work yet. If it doesn't work, read the Anki-Connect setup instructions below. If the furigana on your card seems to appear higher above the kanji compared to the picture, this is likely because you are using the older Qt5 version of Anki. Unfortunately, as this seems like a quirk of Qt5, there does not seem to be a way to fix it outside of upgrading Anki from a Qt5 version to a Qt6 version. Anki Setup \u00b6 Updating Anki \u00b6 If you are updating Anki from an older version, this section aims to give some general tips on updating Anki. If you aren't upgrading Anki from an older version, you can skip this section. Tips on Updating Anki (click here) Official Documentation The official documentation on how to install and upgrade Anki is shown below: Windows \u30fb MacOS \u30fb Linux Note that for all three, there are additional sections in the table of contents to the left that could be helpful. Add-ons Breaking If an add-on (that worked in a previous version of Anki) no longer works, you have a few options you can try: As a sanity check, click the Check for Updates button on Anki's Addons window. Check that the add-on supports the current version of Anki in the official AnkiWeb page. If the page says that the current Anki version is supported, try reinstalling it again from AnkiWeb. Occasionally, the Check for Updates button doesn't properly work, so this method ensures that your addon is actually updated. Dark Mode \u00b6 Although light mode is supported, the recommended theme for this note is dark mode. The note automatically adjusts according to Anki's theme. To change Anki's theme, head over to: Tools \u2192 Preferences \u2192 Basic \u2192 Theme (dropdown) Note The note's theme currently cannot be forced to be a particular theme without changing Anki's settings. Anki Add-ons \u00b6 There are certain add-ons that must be installed for this note type to work. Conflicting Add-ons \u00b6 There are no conflicting add-ons, since I'm not aware of any currently. Let me know if you find one! Downloading Add-ons \u00b6 To download an add-on, copy the add-on's code, and navigate to the following to paste the code: Tools \u2192 Add-ons \u2192 Get Add-ons... Required Anki Add-ons \u00b6 Anki-Connect \u00b6 Code: 2055492159 Required for Yomichan and most other Anki-related automated tasks to work. I use the default config that comes with the add-on. Note for Anki versions 2.1.49 and below Anki versions 2.1.49 and below require a hack to the Anki-Connect config for certain features within the card to work. In particular, Anki-Connect is used for the \"Kanji Hover\" feature and the \"Open Fields on New Card\" feature. To make those features work, add \"null\" to the webCorsOriginList list in the Anki-Connect config file. An example of how the config should look is shown below: \"webCorsOriginList\": [ \"http://localhost\", \"null\" ] Of course, this isn't very safe and it is highly recommended that you upgrade Anki to avoid this problem. If you aren't interested in those features, you can skip this step and disable them in the runtime options . Optional Add-ons \u00b6 These are a set of optional, but useful add-ons that can easily work with the card. If this is your first time here, I recommend skimming through the descriptions and choosing the add-ons that seem appealing for you. Note Make sure to head over to the final steps section afterwards! CSS Injector \u00b6 Code: 181103283 I strongly recommend using this, because if you don't use this, the fields within the Anki field editor won't have certain stylizations that makes the field actually interpretable. There are two ways of using css injector with this note type: Option 1: Automatically updates with the card (recommended) Windows MacOS Linux As a preliminary step, you will have to remove the empty field.css and editor.css files that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete both css files. : : be sure to change USERNAME to your computer username! del \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" del \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\editor.css\" Afterwards, open command prompt with elevated permissions. Note Be sure to open command prompt, and not PowerShell. If you've never used command prompt before, see this . With command prompt opened, run the following command: : : be sure to change USERNAME to your computer username and PROFILENAME to your Anki profile. : : There are **two** USERNAME's to replace, and **one** PROFILENAME to replace : : in the commands below. : : Make sure to replace all the fields! mklink \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\PROFILENAME\\collection.media\\_field.css\" mklink \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\editor.css\" \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\PROFILENAME\\collection.media\\_editor.css\" As a preliminary step, you will have to remove the empty field.css and editor.css files that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete both css files. rm \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" rm \"~/Library/Application Support/Anki2/addons21/181103283/user_files/editor.css\" Afterwards, run the following command: # be sure to change `PROFILENAME` to your Anki profile ln -s \"~/Library/Application Support/Anki2/PROFILENAME/collection.media/_field.css\" \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" ln -s \"~/Library/Application Support/Anki2/PROFILENAME/collection.media/_editor.css\" \"~/Library/Application Support/Anki2/addons21/181103283/user_files/editor.css\" As a preliminary step, you will have to remove the empty field.css and editor.css files that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete both css files. rm \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" rm \"~/.local/share/Anki2/addons21/181103283/user_files/editor.css\" Afterwards, run the following command: # be sure to change `PROFILENAME` to your Anki profile ln -s \"~/.local/share/Anki2/PROFILENAME/collection.media/_field.css\" \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" ln -s \"~/.local/share/Anki2/PROFILENAME/collection.media/_editor.css\" \"~/.local/share/Anki2/addons21/181103283/user_files/editor.css\" Option 2: Manually without respecting updates Navigate to css injector addon folder ( Anki2/addons21/181103283/user_files ) Remove the existing field.css and editor.css files Copy the _field.css file and _editor.css file (found under your profile's media folder ) into the css injector add-on directory. Rename _field.css to field.css . Rename _editor.css to editor.css . Note If either of the two css files ever update, you will have to manually copy and rename the file again. AJT Furigana \u00b6 Code: 1344485230 Alternative and up-to-date version of JapaneseSupport. Automatically generates furigana upon Yomichan card creation. This add-on is optional, because the card will simply show the sentence without furigana (on hover) if there is no furigana generated sentence. Config Changes \u00b6 The config of the add-on must be changed to work with this note. To change the config of any Anki add-on, head over to: Tools \u2192 Add-ons \u2192 (select the add-on) \u2192 Config . Click here to see the full AJT Furigana config The important things to change in the config are: generate_on_note_add fields note_types { \"context_menu\" : { \"generate_furigana\" : true , \"generate_furigana_no_kanji\" : true , \"to_hiragana\" : true , \"to_katakana\" : true }, \"fields\" : [ // (1)! { \"destination\" : \"SentenceReading\" , \"source\" : \"Sentence\" } ], \"furigana_suffix\" : \" (furigana)\" , \"generate_on_note_add\" : true , // (2)! \"note_types\" : [ // (3)! \"jp\" ], \"skip_numbers\" : false , \"skip_words\" : \"\" , \"toolbar\" : { \"clean_furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+u\" , \"text\" : \"\u524a\" }, \"furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+o\" , \"text\" : \"\u632f\" } } } We change the field names to match this note type. This ensures that the pitch accent is added upon initial note creation. Note that this is technically optional. If you are likely to change the sentence after adding the note, then it is possible to leave this as false , and bulk add the furigana later. Similarly to the fields change, we change this to properly detect this note type. Additional Info \u00b6 Furigana generation is occasionally incorrect, so if you plan on using furigana regularly, you should double-check the readings to make sure they are correct. JapaneseSupport v.s. AJT Furigana If you use JapaneseSupport , bolded words and other styles within a field are not transferred over from the original field to the reading field. Additionally, JapaneseSupport does not have an option to automatically add the reading upon card creation. AJT Furigana supports both of those of those features. AJT Pitch Accent \u00b6 Code: 1225470483 Automatically adds pitch accent info given the word. For the purposes of the card, the only purpose that this add-on serves is the following: Adds devoiced and nasal information to the existing reading. If your Yomichan pitch accent dictionaries did not contain any pitch accent info for the word but the add-on does, then it will use the add-on data. Config Changes \u00b6 Like with AJT Furigana, the config of the add-on must be changed to work with this note. Click here to see the full AJT Pitch Accent config The important things to change in the config are: generate_on_note_add destination_fields source_fields note_types styles { \"destination_fields\" : [ \"AJTWordPitch\" ], \"generate_on_note_add\" : true , // (1)! \"kana_lookups\" : true , \"lookup_shortcut\" : \"Ctrl+8\" , \"note_types\" : [ \"jp\" ], \"regenerate_readings\" : false , \"skip_words\" : \"\u3078,\u304b,\u3088,\u3093,\u3060,\u3073,\u306e,\u3084,\u306d,\u3070,\u3066,\u3068,\u305f,\u304c,\u306b,\u306a,\u306f,\u3082,\u307e\u3059,\u304b\u3089,\u3044\u308b,\u305f\u3061,\u3066\u308b,\u3046,\u307e\u3057\u3087,\u305f\u3044,\u3067\u3059\" , \"source_fields\" : [ \"Word\" ], \"styles\" : { // (2)! \"&#42780;\" : \"<span class=\\\"downstep\\\"><span class=\\\"downstep-inner\\\">&#42780;</span></span>\" , \"class=\\\"overline\\\"\" : \"style=\\\"text-decoration:overline;\\\" class=\\\"pitchoverline\\\"\" }, \"use_hiragana\" : false , \"use_mecab\" : true } We change generate_on_note_add and note_types for the exact same reasons as the AJT Furigana Config section. The destination_fields and source_fields options are changed similarily to the fields option in the AJT Furigana Config section. styles adds custom stylization that creates the pitch accent lines and downsteps as you see in the example note. Without this, the default styles will look like the word you see in the official add-on page. Final Steps \u00b6 After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other. Transfer Existing Notes \u00b6 If you wish to transfer existing cards into this note type, please see this page . Updating the Note \u00b6 If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update. Yomichan Setup \u00b6 Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working. Preliminary Steps \u00b6 If you have used Yomichan before, please make a backup of your settings (just in case). Yomichan Fields \u00b6 To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable. Yomichan Templates \u00b6 Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} {{ ~! options related to selected text ~ }} {{ set \"opt-selection-text-enabled\" false }} {{ set \"opt-selection-text-dictionary\" true }} {{ set \"opt-selection-text-glossary\" true }} {{ set \"opt-selection-text-glossary-attempt-bold\" true }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 4 types : \"ignored\" , \"bilingual\" , \"utility\" , or \"monolingual\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#set \"rx-match-ignored\" ~ }} {{ ~#regexMatch (get \"ignored-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#set \"rx-match-bilingual\" ~ }} {{ ~#regexMatch (get \"bilingual-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#set \"rx-match-utility\" ~ }} {{ ~#regexMatch (get \"utility-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#if (op \"!= = \" (get \" rx-match-ignored \") \"\")~}} ignored {{~else if (op \" != = \" (get \" rx-match-bilingual \") \"\")~}} bilingual {{~else if (op \" != = \" (get \" rx-match-utility \") \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! returns \"\" if selection text is disabled, or if none existed in the first place ~}} {{~#*inline \" _ jpmn-selection-text \"~}} {{~! text-mode != \"\" and text-mode > 0 ~}} {{~#if (op \" == = \" (get \" opt-selection-text-enabled \") true)~}} {{~! removes leading and trailing whitespace ~}} {{~#regexReplace \" ^\\ s +|\\ s +$ \" \"\" \" g \"~}} {{~#getMedia \" selectionText \"}}{{/getMedia~}} {{~/regexReplace~}} {{~/if~}} {{~/inline~}} {{~! checks that the selection text is indeed a dictionary (returns the text if true, nothing if false) ~}} {{~#*inline \" _ jpmn-check-dictionary \"~}} {{~#scope~}} {{~#set \" selection-is-dictionary \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#if (op \" == = \" (get \" selection \") dictionary)~}} {{~#set \" selection-is-dictionary \" true ~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" == = \" (get \" selection-is-dictionary \") true)~}} {{~get \" selection \"~}} {{~else~}} {{~! null ~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! gives the raw glossary as the search string (for searching to see if the selected text is a part of a dictionary) ~}} {{#*inline \" _ jpmn-glossary-single-search \"}} {{~#scope~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} {{~/scope~}} {{/inline}} {{~! escape a regex string: https://stackoverflow.com/a/6969486~}} {{~! /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&' ~}} {{~! escapes the `regexString` regex to allow it to be used like a normal search in a string ~}} {{#*inline \" _ jpmn-escape-regex \"}} {{~#regexReplace \" [.*+?^${} () |[\\]\\\\] \" \" \\$& \" \" g \"~}}{{~regexString~}}{{~/regexReplace~}} {{/inline}} {{~#*inline \" _ jpmn-get-dict-if-glossary-selected \"~}} {{~#scope~}} {{~#set \" result-dictionary \" null}}{{/set~}} {{~#set \" search-selection \"}}{{~> _jpmn-escape-regex regexString=(get \" selection \") ~}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" search-def \"}}{{~> _jpmn-glossary-single-search . brief=../brief noDictionaryTag=../noDictionaryTag ~}}{{/set~}} {{~set \" search-regex-match \" (regexMatch (get \" search-selection \") \" gu \" (get \" search-def \"))}} {{~#if (op \" && \" (op \" == = \" (get \" result-dictionary \") null) (op \" != = \" (get \" search-regex-match \") \"\") )~}} {{~#set \" result-dictionary \" dictionary}}{{/set~}} {{~/if~}} {{~/each~}} {{~get \" result-dictionary \" ~}} {{~/scope~}} {{~/inline~}} {{~! searches dictionary, determined by `opt-first-definition-type` - (opt-first-definition-type === bilingual) -> bilingual dictionaries are searched first - (opt-first-definition-type === monolingual) -> monolingual dictionaries are searched first ~}} {{~#*inline \" _ jpmn-search-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return dictionary if (able to detect dictionary of which the selection-text is highlighting): return dictionary return null ~}} {{~#*inline \" _ jpmn-check-dictionary-and-glossary \"~}} {{~#scope~}} {{~#set \" result \" \"\"}}{{/set~}} {{~! checks if the selected text matches a dictionary ~}} {{~#if (op \" == = \" (get \" opt-selection-text-dictionary \") true)~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}} {{~/if~}} {{~! checks if the selected text matches a definition in a dictionary ~}} {{~#if (op \" && \" (op \" == = \" (get \" result \") \"\") (op \" && \" (op \" == = \" (get \" opt-selection-text-glossary \") true) (op \" == = \" (get \" opt-selection-text-glossary-attempt-bold \") true) ) ) ~}} {{~#set \" result \"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}} {{~/if~}} {{~get \" result \" ~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return null if (able to detect dictionary of which the selection-text is highlighting): return \" uses-glossary \" return null ~}} {{~#*inline \" _ jpmn-selection-uses-glossary \"~}} {{~#scope~}} {{~#set \" result \" \"\"}}{{/set~}} {{~! checks if the selected text matches a dictionary ~}} {{~#if (op \" == = \" (get \" opt-selection-text-dictionary \") true)~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}} {{~/if~}} {{~! checks if the selected text matches a definition in a dictionary ~}} {{~#if (op \" != = \" (get \" result \") \"\") ~}} {{~! selection-text is a dictionary -> null ~}} {{~else if (op \" && \" (op \" == = \" (get \" opt-selection-text-glossary \") true) (op \" == = \" (get \" opt-selection-text-glossary-attempt-bold \") true) ) ~}} {{~#set \" result \"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}} {{~#if (op \" != = \" (get \" result \") \"\") ~}} {{~! selection-text dict found -> \" uses-glossary \" ~}} uses-glossary {{~/if~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return dictionary if (able to detect dictionary of which the selection-text is highlighting): return dictionary if (selection-text-glossary is not enabled): return first-dictionary (determined by `opt-first-definition-type`) return null else: return first-dictionary (determined by `opt-first-definition-type`) ~}} {{~#*inline \" _ jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~! first checks selection text ~}} {{~#set \" selection \"}}{{~> _jpmn-selection-text ~}}{{/set~}} {{~#if (op \" != = \" (get \" selection \") \"\")~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary-and-glossary . ~}}{{/set~}} {{~! doesn't return a dictionary if opt-selection-text-glossary is false b/c ~}} {{~#if (op \" && \" (op \" == = \" (get \" result \") \"\") (op \" == = \" (get \" opt-selection-text-glossary \") false) ) ~}} {{~#set \" result \"}}{{~> _jpmn-search-primary-definition-dict . ~}}{{/set~}} {{~/if~}} {{~get \" result \" ~}} {{~! no selection text ~}} {{~else~}} {{~> _jpmn-search-primary-definition-dict . ~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~#*inline \" _ jpmn-get-primary-definition-value \"~}} {{~#scope~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! custom glossary-single function for additional regex parsing per dictionary ~ }} {{ ~! OVERRIDES brief and noDictionaryTag ~ }} {{ #*inline \"_jpmn-glossary-single\" }} {{ ~#scope~ }} {{ ~#if (op \"== = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> _jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> _jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" _ jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ ~#*inline \"jpmn-min-freq\" ~ }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0~ }}{{ ~/set~ }} {{ ~#each definition.frequencies ~ }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{~/each~}} {{~get \" min-freq \"~}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> _ jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" primary-dictionary \") \"\")~}} {{~> _jpmn-selection-text ~}} {{~else~}} {{~#set \" selection \"}}{{~> _jpmn-selection-text ~}}{{/set~}} {{~#set \" selection-uses-glossary \"~}} {{~> _jpmn-selection-uses-glossary . ~}} {{~/set~}} {{~! not \"\" <=> is a filled string ~}} {{~#if (op \" != = \" (get \" selection-uses-glossary \") \"\")~}} {{~#set \" search-selection \"}}{{~> _jpmn-escape-regex regexString=(get \" selection \") ~}}{{/set~}} {{~#set \" search-selection-bold \"}}<b>{{~ get \" selection \" ~}}</b>{{/set~}} {{~#regexReplace (get \" search-selection \") (get \" search-selection-bold \") \" g \"~}} {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}} {{~/regexReplace~}} {{~else~}} {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}} {{~/if~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! extra def: bilingual defs (excluding primary def) ~}} {{~#*inline \" jpmn-secondary-definition \"~}} {{~#scope~}} {{~#set \" primary-dictionary \"}}{{~> _jpmn-get-primary-definition-dict . ~}}{{/set~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> _ jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"&&\" (op \"== = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~#*inline \"jpmn-word-reading-hiragana\" ~ }} {{ ~#set \"word-reading\" ~ }}{{ > reading }}{{ /set~ }} {{ ~#if (op \"\" (get \"word-reading\" )) ~ }} {{ ~#set \"word-reading\" ~ }}{{ > expression }}{{ /set~ }} {{ ~/if~ }} {{ #hiragana (get \"word-reading\" ) keepProlongedSoundMarks = false }}{{ /hiragana }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }} Make an example card! \u00b6 At this point, you should be able to make cards with Yomichan! Click here to show some example Japanese sentences. \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d \u300c\u306a\u306b\u3088\u3045\u2026\u7532\u6590\u7532\u6590\u3057\u304f\u4f1a\u3044\u306b\u6765\u305f\u5973\u306b\u5bfe\u3057\u3066\u3001\u6700\u521d\u306b\u8a00\u3046\u30bb\u30ea\u30d5\u304c\u305d\u308c\uff1f\u300d \u300c\u3042\u306e\u6642\u9003\u3052\u51fa\u3057\u305f\u79c1\u306e\u7f70\u2026\u3042\u306e\u6642\u306e\u6c5a\u8fb1\u306f\u4eca\u3053\u3053\u3067\u3001\u5168\u90e8\u305d\u305d\u3044\u3067\u3084\u308b\u3093\u3060\u2026\u300d \u300c\u8cb4\u65b9\u306a\u3093\u306a\u3093\u3067\u3059\uff1f\u306a\u306b\u304b\u3001\u5999\u306b\u9283\u53e3\u6163\u308c\u3057\u3066\u3044\u307e\u3059\u306d\u2026\u82e5\u8005\u7279\u6709\u306e\u7a7a\u5a01\u5f35\u308a\u3068\u3044\u3046\u8a33\u3067\u3082\u306a\u3055\u305d\u3046\u3067\u3059\u3057\u2026\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right. Yomichan Templates Options \u00b6 Monolingual Definition \u00b6 Main page: Yomichan Template Options (Categorization of Dictionaries) If you want the first definition you see (the PrimaryDefinition field) to be monolingual, change the following line at the top of the templates code: {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} to {{ ~#set \"opt-first-definition-type\" \"monolingual\" }}{{ /set~ }} Note If you are using monolingual dictionaries, on your first few cards, please check that your dictionaries are in the expected places. Extra bilingual definitions should be under Secondary Definition , and extra monolingual definitions should be under Extra Definitions . If your dictionaries are ending up in the wrong sections, then it is likely a problem with how the template code categorizes the dictionaries. See here for more info. Selected Text as the Definition \u00b6 Main page: Yomichan Template Options (Selected Text) If you want to select the text to use instead of the definition, simply set opt-selection-text-enabled to true . By default, this enable the following behavior: If nothing is selected, then the first dictionary is chosen just like normal. If a dictionary is selected, then that dictionary will replace the first definition. If a section of text is selected, then that dictionary will replace the first definition. Additionally, that section of text will be highlighted (bolded). Note Selecting parts of a definition to bold the text does not always work, especially when used across text with formatting or newlines. See this for more details. With this being said, selecting the dictionary should always work. Other \u00b6 Yomichan Appearance \u00b6 If you want to follow my exact Yomichan popup appearance, set the following under (Yomichan settings) \u2192 Popup Appearance : Set Compact glossaries to ON. Set Compact tags to OFF. There are also plenty of css customizations for Yomichan listed out in the various resources page . JMdict \u00b6 If you are planning on using the JMdict dictionary, the ones provided from most sources (TMW's google drive, Matt's video on Yomichan, and Yomichan's main github page) are all somewhat outdated, which usually means less accurate definitions and less coverage. To get the most recent version of JMdict, download it from the official site and using yomichan-import to get the latest JMdict version available. If you don't want to compile it from source, I provide a download link here , which should only be a few months stale at most. JMdict Surface Forms \u00b6 (Link) This is a dictionary placed in the UtilityDictionaries field by default. Although I don't use it when studying Anki, it helps to use this when creating Anki notes for monolingual definitions. See this section for more information. Additional Anki add-on(s) \u00b6 These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link) Separate Pitch Accent Deck \u00b6 If you want card types to go to a different deck by default, you can change it by doing the following: Click here to reveal instructions Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override... Enjoy your new one-click cards! \u00b6 If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! If you already have a sentence mining workflow set up, outside of some potentially minor tweaks to your current workflow (i.e. to match the field names), you are now finished ! All that's left is understanding how to use and edit the card itself. See the User Interface and Usage pages to see exactly that. Wait! I don't have a workflow setup yet! \u00b6 If you're new to sentence mining, there are likely some things things that you would like to set up. These include: Getting the actual text to use Yomichan on. Getting the pictures and/or sentence audio from the media into the card. Head over to the Setup: Everything Else page to see exactly that.","title":"Setup: Anki & Yomichan"},{"location":"setup/#overview","text":"A full sentence mining workflow requires two main parts: Text to make the cards from. The card exporter, to create cards from the text. And optionally, the image and sentence audio from the media (if the media has either). This page is dedicated to providing the minimal setup to create cards with this note type (part two), on PC. Part one (getting the text) and the optional part of part two (getting the image and sentence audio) are not documented on this page; they instead documented under the Setup: Everything Else page.","title":"Overview"},{"location":"setup/#prerequisites","text":"It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Additionally, it is recommended to use the Qt6 version of Anki if possible. Note Worst case scenario, if any essential add-ons no longer work, you can always downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, try updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done). Finally, notice that this website contains a search bar! If you have a problem at any point, you might find the solution by searching for it.","title":"Prerequisites"},{"location":"setup/#installing-the-card","text":"There are two ways of installing the card: Option 1: The Automatic Way (click here) If you know what git and python is, here's all you have to do: Windows MacOS & Linux git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note : : Ensure you have Anki open, and with anki-connect running : : Also ensure that you have python 3.10+ installed. : : It *MAY* work with lower versions of python, but I make no such guarantee. ;) python tools\\install.py git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. python tools/install.py The above does the following: Installs the latest stable version of the note Installs the fonts required for the note If the above made no sense to you, or you just want to install this normally, see the second option below. Option 2: The Manual Way (click here) Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ).","title":"Installing the Card"},{"location":"setup/#verifying-the-note-works","text":"You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Dark Theme Light Theme Please check the following in particular: The fonts should match with the above example. If the fonts don't match, the note was likely installed with \"Option 2: The Manual Way\". Please verify you manually installed the fonts and placed them in the correct folder (see steps 3 and 4). Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this circle is red or orange, there is likely something wrong with the template. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box. Kanji hover may not work yet. If it doesn't work, read the Anki-Connect setup instructions below. If the furigana on your card seems to appear higher above the kanji compared to the picture, this is likely because you are using the older Qt5 version of Anki. Unfortunately, as this seems like a quirk of Qt5, there does not seem to be a way to fix it outside of upgrading Anki from a Qt5 version to a Qt6 version.","title":"Verifying the Note Works"},{"location":"setup/#anki-setup","text":"","title":"Anki Setup"},{"location":"setup/#updating-anki","text":"If you are updating Anki from an older version, this section aims to give some general tips on updating Anki. If you aren't upgrading Anki from an older version, you can skip this section. Tips on Updating Anki (click here)","title":"Updating Anki"},{"location":"setup/#dark-mode","text":"Although light mode is supported, the recommended theme for this note is dark mode. The note automatically adjusts according to Anki's theme. To change Anki's theme, head over to: Tools \u2192 Preferences \u2192 Basic \u2192 Theme (dropdown) Note The note's theme currently cannot be forced to be a particular theme without changing Anki's settings.","title":"Dark Mode"},{"location":"setup/#anki-add-ons","text":"There are certain add-ons that must be installed for this note type to work.","title":"Anki Add-ons"},{"location":"setup/#required-anki-add-ons","text":"","title":"Required Anki Add-ons"},{"location":"setup/#optional-add-ons","text":"These are a set of optional, but useful add-ons that can easily work with the card. If this is your first time here, I recommend skimming through the descriptions and choosing the add-ons that seem appealing for you. Note Make sure to head over to the final steps section afterwards!","title":"Optional Add-ons"},{"location":"setup/#final-steps","text":"After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other.","title":"Final Steps"},{"location":"setup/#transfer-existing-notes","text":"If you wish to transfer existing cards into this note type, please see this page .","title":"Transfer Existing Notes"},{"location":"setup/#updating-the-note","text":"If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update.","title":"Updating the Note"},{"location":"setup/#yomichan-setup","text":"Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working.","title":"Yomichan Setup"},{"location":"setup/#preliminary-steps","text":"If you have used Yomichan before, please make a backup of your settings (just in case).","title":"Preliminary Steps"},{"location":"setup/#yomichan-fields","text":"To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable.","title":"Yomichan Fields"},{"location":"setup/#yomichan-templates","text":"Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} {{ ~! options related to selected text ~ }} {{ set \"opt-selection-text-enabled\" false }} {{ set \"opt-selection-text-dictionary\" true }} {{ set \"opt-selection-text-glossary\" true }} {{ set \"opt-selection-text-glossary-attempt-bold\" true }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 4 types : \"ignored\" , \"bilingual\" , \"utility\" , or \"monolingual\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#set \"rx-match-ignored\" ~ }} {{ ~#regexMatch (get \"ignored-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#set \"rx-match-bilingual\" ~ }} {{ ~#regexMatch (get \"bilingual-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#set \"rx-match-utility\" ~ }} {{ ~#regexMatch (get \"utility-dict-regex\" ) \"gu\" ~ }}{{ dictionaryName }}{{ ~/regexMatch~ }} {{ /set~ }} {{ ~#if (op \"!= = \" (get \" rx-match-ignored \") \"\")~}} ignored {{~else if (op \" != = \" (get \" rx-match-bilingual \") \"\")~}} bilingual {{~else if (op \" != = \" (get \" rx-match-utility \") \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! returns \"\" if selection text is disabled, or if none existed in the first place ~}} {{~#*inline \" _ jpmn-selection-text \"~}} {{~! text-mode != \"\" and text-mode > 0 ~}} {{~#if (op \" == = \" (get \" opt-selection-text-enabled \") true)~}} {{~! removes leading and trailing whitespace ~}} {{~#regexReplace \" ^\\ s +|\\ s +$ \" \"\" \" g \"~}} {{~#getMedia \" selectionText \"}}{{/getMedia~}} {{~/regexReplace~}} {{~/if~}} {{~/inline~}} {{~! checks that the selection text is indeed a dictionary (returns the text if true, nothing if false) ~}} {{~#*inline \" _ jpmn-check-dictionary \"~}} {{~#scope~}} {{~#set \" selection-is-dictionary \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#if (op \" == = \" (get \" selection \") dictionary)~}} {{~#set \" selection-is-dictionary \" true ~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" == = \" (get \" selection-is-dictionary \") true)~}} {{~get \" selection \"~}} {{~else~}} {{~! null ~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! gives the raw glossary as the search string (for searching to see if the selected text is a part of a dictionary) ~}} {{#*inline \" _ jpmn-glossary-single-search \"}} {{~#scope~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} {{~/scope~}} {{/inline}} {{~! escape a regex string: https://stackoverflow.com/a/6969486~}} {{~! /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&' ~}} {{~! escapes the `regexString` regex to allow it to be used like a normal search in a string ~}} {{#*inline \" _ jpmn-escape-regex \"}} {{~#regexReplace \" [.*+?^${} () |[\\]\\\\] \" \" \\$& \" \" g \"~}}{{~regexString~}}{{~/regexReplace~}} {{/inline}} {{~#*inline \" _ jpmn-get-dict-if-glossary-selected \"~}} {{~#scope~}} {{~#set \" result-dictionary \" null}}{{/set~}} {{~#set \" search-selection \"}}{{~> _jpmn-escape-regex regexString=(get \" selection \") ~}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" search-def \"}}{{~> _jpmn-glossary-single-search . brief=../brief noDictionaryTag=../noDictionaryTag ~}}{{/set~}} {{~set \" search-regex-match \" (regexMatch (get \" search-selection \") \" gu \" (get \" search-def \"))}} {{~#if (op \" && \" (op \" == = \" (get \" result-dictionary \") null) (op \" != = \" (get \" search-regex-match \") \"\") )~}} {{~#set \" result-dictionary \" dictionary}}{{/set~}} {{~/if~}} {{~/each~}} {{~get \" result-dictionary \" ~}} {{~/scope~}} {{~/inline~}} {{~! searches dictionary, determined by `opt-first-definition-type` - (opt-first-definition-type === bilingual) -> bilingual dictionaries are searched first - (opt-first-definition-type === monolingual) -> monolingual dictionaries are searched first ~}} {{~#*inline \" _ jpmn-search-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return dictionary if (able to detect dictionary of which the selection-text is highlighting): return dictionary return null ~}} {{~#*inline \" _ jpmn-check-dictionary-and-glossary \"~}} {{~#scope~}} {{~#set \" result \" \"\"}}{{/set~}} {{~! checks if the selected text matches a dictionary ~}} {{~#if (op \" == = \" (get \" opt-selection-text-dictionary \") true)~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}} {{~/if~}} {{~! checks if the selected text matches a definition in a dictionary ~}} {{~#if (op \" && \" (op \" == = \" (get \" result \") \"\") (op \" && \" (op \" == = \" (get \" opt-selection-text-glossary \") true) (op \" == = \" (get \" opt-selection-text-glossary-attempt-bold \") true) ) ) ~}} {{~#set \" result \"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}} {{~/if~}} {{~get \" result \" ~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return null if (able to detect dictionary of which the selection-text is highlighting): return \" uses-glossary \" return null ~}} {{~#*inline \" _ jpmn-selection-uses-glossary \"~}} {{~#scope~}} {{~#set \" result \" \"\"}}{{/set~}} {{~! checks if the selected text matches a dictionary ~}} {{~#if (op \" == = \" (get \" opt-selection-text-dictionary \") true)~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary . ~}}{{/set~}} {{~/if~}} {{~! checks if the selected text matches a definition in a dictionary ~}} {{~#if (op \" != = \" (get \" result \") \"\") ~}} {{~! selection-text is a dictionary -> null ~}} {{~else if (op \" && \" (op \" == = \" (get \" opt-selection-text-glossary \") true) (op \" == = \" (get \" opt-selection-text-glossary-attempt-bold \") true) ) ~}} {{~#set \" result \"}}{{~> _jpmn-get-dict-if-glossary-selected . ~}}{{/set~}} {{~#if (op \" != = \" (get \" result \") \"\") ~}} {{~! selection-text dict found -> \" uses-glossary \" ~}} uses-glossary {{~/if~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! if (selection-text exists): if (selection-text is exactly a dictionary): return dictionary if (able to detect dictionary of which the selection-text is highlighting): return dictionary if (selection-text-glossary is not enabled): return first-dictionary (determined by `opt-first-definition-type`) return null else: return first-dictionary (determined by `opt-first-definition-type`) ~}} {{~#*inline \" _ jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~! first checks selection text ~}} {{~#set \" selection \"}}{{~> _jpmn-selection-text ~}}{{/set~}} {{~#if (op \" != = \" (get \" selection \") \"\")~}} {{~#set \" result \"}}{{~> _jpmn-check-dictionary-and-glossary . ~}}{{/set~}} {{~! doesn't return a dictionary if opt-selection-text-glossary is false b/c ~}} {{~#if (op \" && \" (op \" == = \" (get \" result \") \"\") (op \" == = \" (get \" opt-selection-text-glossary \") false) ) ~}} {{~#set \" result \"}}{{~> _jpmn-search-primary-definition-dict . ~}}{{/set~}} {{~/if~}} {{~get \" result \" ~}} {{~! no selection text ~}} {{~else~}} {{~> _jpmn-search-primary-definition-dict . ~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~#*inline \" _ jpmn-get-primary-definition-value \"~}} {{~#scope~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! custom glossary-single function for additional regex parsing per dictionary ~ }} {{ ~! OVERRIDES brief and noDictionaryTag ~ }} {{ #*inline \"_jpmn-glossary-single\" }} {{ ~#scope~ }} {{ ~#if (op \"== = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> _jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> _jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" _ jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ ~#*inline \"jpmn-min-freq\" ~ }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0~ }}{{ ~/set~ }} {{ ~#each definition.frequencies ~ }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{~/each~}} {{~get \" min-freq \"~}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> _ jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" primary-dictionary \") \"\")~}} {{~> _jpmn-selection-text ~}} {{~else~}} {{~#set \" selection \"}}{{~> _jpmn-selection-text ~}}{{/set~}} {{~#set \" selection-uses-glossary \"~}} {{~> _jpmn-selection-uses-glossary . ~}} {{~/set~}} {{~! not \"\" <=> is a filled string ~}} {{~#if (op \" != = \" (get \" selection-uses-glossary \") \"\")~}} {{~#set \" search-selection \"}}{{~> _jpmn-escape-regex regexString=(get \" selection \") ~}}{{/set~}} {{~#set \" search-selection-bold \"}}<b>{{~ get \" selection \" ~}}</b>{{/set~}} {{~#regexReplace (get \" search-selection \") (get \" search-selection-bold \") \" g \"~}} {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}} {{~/regexReplace~}} {{~else~}} {{~> _jpmn-get-primary-definition-value . brief=../brief noDictionaryTag=../noDictionaryTag ~}} {{~/if~}} {{~/if~}} {{~/scope~}} {{~/inline~}} {{~! extra def: bilingual defs (excluding primary def) ~}} {{~#*inline \" jpmn-secondary-definition \"~}} {{~#scope~}} {{~#set \" primary-dictionary \"}}{{~> _jpmn-get-primary-definition-dict . ~}}{{/set~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> _ jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"&&\" (op \"== = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> _ jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~#*inline \"jpmn-word-reading-hiragana\" ~ }} {{ ~#set \"word-reading\" ~ }}{{ > reading }}{{ /set~ }} {{ ~#if (op \"\" (get \"word-reading\" )) ~ }} {{ ~#set \"word-reading\" ~ }}{{ > expression }}{{ /set~ }} {{ ~/if~ }} {{ #hiragana (get \"word-reading\" ) keepProlongedSoundMarks = false }}{{ /hiragana }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }}","title":"Yomichan Templates"},{"location":"setup/#make-an-example-card","text":"At this point, you should be able to make cards with Yomichan! Click here to show some example Japanese sentences. \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d \u300c\u306a\u306b\u3088\u3045\u2026\u7532\u6590\u7532\u6590\u3057\u304f\u4f1a\u3044\u306b\u6765\u305f\u5973\u306b\u5bfe\u3057\u3066\u3001\u6700\u521d\u306b\u8a00\u3046\u30bb\u30ea\u30d5\u304c\u305d\u308c\uff1f\u300d \u300c\u3042\u306e\u6642\u9003\u3052\u51fa\u3057\u305f\u79c1\u306e\u7f70\u2026\u3042\u306e\u6642\u306e\u6c5a\u8fb1\u306f\u4eca\u3053\u3053\u3067\u3001\u5168\u90e8\u305d\u305d\u3044\u3067\u3084\u308b\u3093\u3060\u2026\u300d \u300c\u8cb4\u65b9\u306a\u3093\u306a\u3093\u3067\u3059\uff1f\u306a\u306b\u304b\u3001\u5999\u306b\u9283\u53e3\u6163\u308c\u3057\u3066\u3044\u307e\u3059\u306d\u2026\u82e5\u8005\u7279\u6709\u306e\u7a7a\u5a01\u5f35\u308a\u3068\u3044\u3046\u8a33\u3067\u3082\u306a\u3055\u305d\u3046\u3067\u3059\u3057\u2026\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right.","title":"Make an example card!"},{"location":"setup/#yomichan-templates-options","text":"","title":"Yomichan Templates Options"},{"location":"setup/#other","text":"","title":"Other"},{"location":"setup/#yomichan-appearance","text":"If you want to follow my exact Yomichan popup appearance, set the following under (Yomichan settings) \u2192 Popup Appearance : Set Compact glossaries to ON. Set Compact tags to OFF. There are also plenty of css customizations for Yomichan listed out in the various resources page .","title":"Yomichan Appearance"},{"location":"setup/#jmdict","text":"If you are planning on using the JMdict dictionary, the ones provided from most sources (TMW's google drive, Matt's video on Yomichan, and Yomichan's main github page) are all somewhat outdated, which usually means less accurate definitions and less coverage. To get the most recent version of JMdict, download it from the official site and using yomichan-import to get the latest JMdict version available. If you don't want to compile it from source, I provide a download link here , which should only be a few months stale at most.","title":"JMdict"},{"location":"setup/#jmdict-surface-forms","text":"(Link) This is a dictionary placed in the UtilityDictionaries field by default. Although I don't use it when studying Anki, it helps to use this when creating Anki notes for monolingual definitions. See this section for more information.","title":"JMdict Surface Forms"},{"location":"setup/#additional-anki-add-ons","text":"These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link)","title":"Additional Anki add-on(s)"},{"location":"setup/#separate-pitch-accent-deck","text":"If you want card types to go to a different deck by default, you can change it by doing the following: Click here to reveal instructions Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override...","title":"Separate Pitch Accent Deck"},{"location":"setup/#enjoy-your-new-one-click-cards","text":"If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! If you already have a sentence mining workflow set up, outside of some potentially minor tweaks to your current workflow (i.e. to match the field names), you are now finished ! All that's left is understanding how to use and edit the card itself. See the User Interface and Usage pages to see exactly that.","title":"Enjoy your new one-click cards!"},{"location":"setup/#wait-i-dont-have-a-workflow-setup-yet","text":"If you're new to sentence mining, there are likely some things things that you would like to set up. These include: Getting the actual text to use Yomichan on. Getting the pictures and/or sentence audio from the media into the card. Head over to the Setup: Everything Else page to see exactly that.","title":"Wait! I don't have a workflow setup yet!"},{"location":"setupeverythingelse/","text":"This page is dedicated to providing resources on how to do the following: Getting the actual text to use Yomichan on. Getting the pictures and/or sentence audio from the media. There are plenty of well established resources out there on how to do just that, ranging from software to written & video guides. Instead of repeating what others have already said, those programs and guides will be linked. If you are looking to setup jp-mining-note, see this page instead. Warning If you are having troubles with any of the guides or programs below, I unfortunately will not be able to provide very detailed support. Instead, I would recommend that you contact the creators of the guides / programs, or the communities surrounding said guides / programs. Additionally, the guides listed here do not use JPMN, and instead link to other note types. This shouldn't be an issue as long as you change the appropriate the field names. Getting the Text to Create the Cards \u00b6 I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files. Texthooker pages (clipboard based) \u00b6 These pages display the hooked content. Most setups documented are for clipboard based texthooker pages. Resources (click here) Anacreon's Texthooker Page (recommended) TMW's Texthooker Page Guides (click here) stegatxins0's mining guide: Texthooker (recommended) TMW: Texthooker & Visual Novels Lazy Guide: Texthooker Anime Cards: Texthooker & Visual Novels Texthooker pages (Websocket based) \u00b6 Websocket based texthookers are generally faster, more reliable, and do not flood your clipboard. However, it's not as popular as the clipboard based methods, so there is usually less support. When you use websocket-based texthooker pages, ensure that the program you use to grab the text also uses websockets. For example, if you want to use Textractor, use this extension. Resources (click here) exSTATic \u00b6 Custom texthooker page, automatically collects stats for viewing Patch Instructions for existing clipboard-based texthookers \u00b6 Download your favorite texthooker page into a raw html file. Copy/paste the code below into the raw html file. If you are currently viewing the page, refresh. Click here to reveal the patch < script > let socket = null ; let wsStatusElem = null ; const createStatusElem = () => { wsStatusElem = document . createElement ( \"span\" ) let node = document . getElementById ( 'menu' ). firstChild wsStatusElem . setAttribute ( \"class\" , \"menuitem\" ) wsStatusElem . addEventListener ( 'click' , ( e ) => { if ( wsStatusElem . innerText == \"Reconnect\" ) { connect () } }) node . insertBefore ( wsStatusElem , node . firstChild ) } const updateStatus = ( connected ) => { if ( wsStatusElem === null ) { createStatusElem () } wsStatusElem . innerText = connected ? \"Connected\" : \"Reconnect\" wsStatusElem . style . cssText = \"margin-right: 1.5em; display: inline-block;\" wsStatusElem . style . cssText += connected ? \"color:rgb(24, 255, 24);\" : \"color:rgb(255, 24, 24);\" } const connect = () => { socket = new WebSocket ( \"ws://localhost:6677/\" ) socket . onopen = ( e ) => { updateStatus ( true ) } socket . onclose = ( e ) => { updateStatus ( false ) } socket . onerror = ( e ) => { updateStatus ( false ); console . log ( `[error] ${ e . message } ` ) } socket . onmessage = ( e ) => { let container = document . getElementById ( 'textlog' ) let textNode = document . createElement ( \"p\" ) textNode . innerText = e . data document . body . insertBefore ( textNode , null ) } } connect () < /script> ( Original discord message , on TMW server . Thanks Zetta#3033 for the code.) Note This patch was written for Anacreon's texthooker page. However, it will likely work for most other texthooker pages. Text from game-like content \u00b6 The following are primarily for text-heavy games, such as visual novels. Resources (click here) Textractor (recommended) agent This is a good fallback for when Textractor doesn't work Guides (click here) TMW: Installing Visual Novels TMW: Texthooker & Visual Novels Anime Cards: Texthooker & Visual Novels (slightly outdated compared to others) Lazy Guide: Playing Visual Novels on Mobile Playing Emulated DS, 3DS, PSP and Gameboy Advanced games on Android devices Contact info: OrangeLightX#2907 on the Refold (JP) Discord server or TMW server Text from video content \u00b6 Video content includes streamed content (Youtube, Netflix, etc.) and locally downloaded files. Resources (click here) mpvacious (recommended if you are using MPV) Immersive asbplayer (Built-in texthooker page) Animebook (Built-in texthooker page) All of the above require subtitle files to function. Most anime subtitle files can be found under kitsuneko . Guides (click here) Shiki's mining workflow (asbplayer) Contact info: boundary-of-emptiness#3065 on the Refold (JP) Discord server Tigy01's mining workflow (asbplayer) Contact info: Tigy01#1231 on the Refold (JP) Discord server Cade's sentence mining guide (animebook) Contact info: eminent#8189 on Perdition's server or TMW server ) Text from manga (Mokuro) \u00b6 mokuro pre-processes manga, so you don't have to run any OCR program afterwards. Guides (click here) Lazy guide (recommended) (For Windows users) Make sure to check the \"Add Python to Path\" on install. If you are using online processing (google colab), be sure that you are using the gpu to speed up the process. Josuke's mokuro setup guide Contact info: Josuke#7212 on the Refold (JP) Discord server This doesn't include instructions on how to process online (whereas the Lazy guide does) If you are on Android, this can be paired with Anki Connect for Android to create Anki cards. If any error occurs, check the following: Check your Python version ( python --version , or python3 --version ). Python 3.10 is not supported yet . If your Python version is too old, I recommend using pyenv , especially for Linux users. Linux users can use the automatic installer . Make sure your directory is a string and not a number. For example, mokuro ./01 on unix, and mokuro .\\01 on Windows. Text from local files (EPUBs, HTMLZ, PDF) \u00b6 As long as you're not using a scan (image-based), the text should already be available. The following are ways to view these files in a browser to Yomichan: Resources (click here) \u30c3\u30c4 Ebook Reader (EPUBs, HTMLZ) Mozilla's PDF Viewer (PDF) Guides (click here) Like with Mokuro, if you are on Android, this can be paired with Anki Connect for Android to create Anki cards. Automating Pictures and Sentence Audio \u00b6 mpvacious \u00b6 Add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. You can now extract the video clip itself instead of the picture. However, this note does not support video clips yet. You will have to change the configuration in order for mpvacious to work with JPMN. Click here to see some basic config changes to get it working with JPMN. # Model names are listed in `Tools -> Manage note types` menu in Anki. model_name = JP Mining Note # Field names as they appear in the selected note type. # If you set `audio_field` or `image_field` empty, # the corresponding media file will not be created. sentence_field = Sentence #secondary_field=SentEng # Not used by the note. This is ignored entirely. audio_field = SentenceAudio image_field = Picture You may want to increase the picture quality, as it's extremely low by default. I personally use the following: # Quality of produced image files. 0 = lowest, 100=highest. #snapshot_quality=15 snapshot_quality = 50 # Image dimensions # If either (but not both) of the width or height parameters is -2, # the value will be calculated preserving the aspect-ratio. #snapshot_width=-2 #snapshot_height=200 snapshot_width = 800 snapshot_height = -2 Be sure to restart MPV after changing the config to apply the changes. Immersive \u00b6 A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. Warning This is potentially outdated and/or abandoned. The most recent commit as of writing (2022/10/19) was done in 2022/01/27. asbplayer \u00b6 Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Guides that use asbplayer: Shiki's mining workflow Tigy01's mining workflow ShareX \u00b6 Windows media recorder which can both take screenshots and record audio. Personally tested. Useful for things that don't have an easy way of getting audio, such as visual novels. Guides on connecting ShareX with your mining setup: stegatxins0's mining guide: ShareX (recommended) The scripts written here works by default with this note. These scripts are meant used with stegatxins0's setup. Xeliu's mining guide: ShareX ShareX setup is based off of stegatxins0's setup Anime Cards: Handling Media Not recommended: introduces additional steps compared to the above two guides ames \u00b6 ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added Anki card. Animebook \u00b6 Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. Guides that use Animebook: Cade's sentence mining guide jidoujisho \u00b6 Android e-book reader and media player, which can also create Anki cards (among many, many other things). Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically.","title":"Setup: Everything Else"},{"location":"setupeverythingelse/#getting-the-text-to-create-the-cards","text":"I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files.","title":"Getting the Text to Create the Cards"},{"location":"setupeverythingelse/#texthooker-pages-clipboard-based","text":"These pages display the hooked content. Most setups documented are for clipboard based texthooker pages. Resources (click here) Anacreon's Texthooker Page (recommended) TMW's Texthooker Page Guides (click here) stegatxins0's mining guide: Texthooker (recommended) TMW: Texthooker & Visual Novels Lazy Guide: Texthooker Anime Cards: Texthooker & Visual Novels","title":"Texthooker pages (clipboard based)"},{"location":"setupeverythingelse/#texthooker-pages-websocket-based","text":"Websocket based texthookers are generally faster, more reliable, and do not flood your clipboard. However, it's not as popular as the clipboard based methods, so there is usually less support. When you use websocket-based texthooker pages, ensure that the program you use to grab the text also uses websockets. For example, if you want to use Textractor, use this extension. Resources (click here)","title":"Texthooker pages (Websocket based)"},{"location":"setupeverythingelse/#text-from-game-like-content","text":"The following are primarily for text-heavy games, such as visual novels. Resources (click here) Textractor (recommended) agent This is a good fallback for when Textractor doesn't work Guides (click here) TMW: Installing Visual Novels TMW: Texthooker & Visual Novels Anime Cards: Texthooker & Visual Novels (slightly outdated compared to others) Lazy Guide: Playing Visual Novels on Mobile Playing Emulated DS, 3DS, PSP and Gameboy Advanced games on Android devices Contact info: OrangeLightX#2907 on the Refold (JP) Discord server or TMW server","title":"Text from game-like content"},{"location":"setupeverythingelse/#text-from-video-content","text":"Video content includes streamed content (Youtube, Netflix, etc.) and locally downloaded files. Resources (click here) mpvacious (recommended if you are using MPV) Immersive asbplayer (Built-in texthooker page) Animebook (Built-in texthooker page) All of the above require subtitle files to function. Most anime subtitle files can be found under kitsuneko . Guides (click here) Shiki's mining workflow (asbplayer) Contact info: boundary-of-emptiness#3065 on the Refold (JP) Discord server Tigy01's mining workflow (asbplayer) Contact info: Tigy01#1231 on the Refold (JP) Discord server Cade's sentence mining guide (animebook) Contact info: eminent#8189 on Perdition's server or TMW server )","title":"Text from video content"},{"location":"setupeverythingelse/#text-from-manga-mokuro","text":"mokuro pre-processes manga, so you don't have to run any OCR program afterwards. Guides (click here) Lazy guide (recommended) (For Windows users) Make sure to check the \"Add Python to Path\" on install. If you are using online processing (google colab), be sure that you are using the gpu to speed up the process. Josuke's mokuro setup guide Contact info: Josuke#7212 on the Refold (JP) Discord server This doesn't include instructions on how to process online (whereas the Lazy guide does) If you are on Android, this can be paired with Anki Connect for Android to create Anki cards. If any error occurs, check the following: Check your Python version ( python --version , or python3 --version ). Python 3.10 is not supported yet . If your Python version is too old, I recommend using pyenv , especially for Linux users. Linux users can use the automatic installer . Make sure your directory is a string and not a number. For example, mokuro ./01 on unix, and mokuro .\\01 on Windows.","title":"Text from manga (Mokuro)"},{"location":"setupeverythingelse/#text-from-local-files-epubs-htmlz-pdf","text":"As long as you're not using a scan (image-based), the text should already be available. The following are ways to view these files in a browser to Yomichan: Resources (click here) \u30c3\u30c4 Ebook Reader (EPUBs, HTMLZ) Mozilla's PDF Viewer (PDF) Guides (click here) Like with Mokuro, if you are on Android, this can be paired with Anki Connect for Android to create Anki cards.","title":"Text from local files (EPUBs, HTMLZ, PDF)"},{"location":"setupeverythingelse/#automating-pictures-and-sentence-audio","text":"","title":"Automating Pictures and Sentence Audio"},{"location":"setupeverythingelse/#mpvacious","text":"Add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. You can now extract the video clip itself instead of the picture. However, this note does not support video clips yet. You will have to change the configuration in order for mpvacious to work with JPMN. Click here to see some basic config changes to get it working with JPMN. # Model names are listed in `Tools -> Manage note types` menu in Anki. model_name = JP Mining Note # Field names as they appear in the selected note type. # If you set `audio_field` or `image_field` empty, # the corresponding media file will not be created. sentence_field = Sentence #secondary_field=SentEng # Not used by the note. This is ignored entirely. audio_field = SentenceAudio image_field = Picture You may want to increase the picture quality, as it's extremely low by default. I personally use the following: # Quality of produced image files. 0 = lowest, 100=highest. #snapshot_quality=15 snapshot_quality = 50 # Image dimensions # If either (but not both) of the width or height parameters is -2, # the value will be calculated preserving the aspect-ratio. #snapshot_width=-2 #snapshot_height=200 snapshot_width = 800 snapshot_height = -2 Be sure to restart MPV after changing the config to apply the changes.","title":"mpvacious"},{"location":"setupeverythingelse/#immersive","text":"A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. Warning This is potentially outdated and/or abandoned. The most recent commit as of writing (2022/10/19) was done in 2022/01/27.","title":"Immersive"},{"location":"setupeverythingelse/#asbplayer","text":"Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Guides that use asbplayer: Shiki's mining workflow Tigy01's mining workflow","title":"asbplayer"},{"location":"setupeverythingelse/#sharex","text":"Windows media recorder which can both take screenshots and record audio. Personally tested. Useful for things that don't have an easy way of getting audio, such as visual novels. Guides on connecting ShareX with your mining setup: stegatxins0's mining guide: ShareX (recommended) The scripts written here works by default with this note. These scripts are meant used with stegatxins0's setup. Xeliu's mining guide: ShareX ShareX setup is based off of stegatxins0's setup Anime Cards: Handling Media Not recommended: introduces additional steps compared to the above two guides","title":"ShareX"},{"location":"setupeverythingelse/#ames","text":"ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added Anki card.","title":"ames"},{"location":"setupeverythingelse/#animebook","text":"Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. Guides that use Animebook: Cade's sentence mining guide","title":"Animebook"},{"location":"setupeverythingelse/#jidoujisho","text":"Android e-book reader and media player, which can also create Anki cards (among many, many other things). Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically.","title":"jidoujisho"},{"location":"ui/","text":"This entire section is dedicated to showcasing various aspects of the common user interface. Summary \u00b6 Most of the user interface is already shown off in the GUI demo , and I would recommend watching it before continuing. However, to dispell any mysteries, here is a fully annotated summary of the user interface. Additional information on some parts of the UI is stated below. Info Circle \u00b6 Default Error Warning Leech On hover, the info circle on the top left corner just shows some basic info. However, it also serves as a notification system to the user, when it has a color. This should only appear when some javascript code fails. In other words, this should not appear under normal circumstances. If you get this without modifying the note in any way, please see this section for basic troubleshooting. This serves to warn the user about something. It can appear without completely breaking the functionality of the card. In other words, you can choose to ignore it. When the card is a leech, the circle is highlighted yellow (or blue in light mode) to indicate that it is a leech. This is only shown on the back side of the card. Locking the Info Circle \u00b6 New in version 0.10.3.0 (latest version: 0.10.3.0 ) You can toggle (click on) the info circle to lock the tooltip in place. This may be useful for copying/pasting errors and other debugging purposes. Kanji Hover \u00b6 Main page: Kanji Hover Kanji hover shows you if you have seen the kanji in previous cards or not. This is useful if you want to check whether you have seen the reading in a previous card, to differentiate between similar kanjis, etc. By default, it searches for the kanji within the \"Word\" field, only for notes of the same type (JP Mining Note). Notice how some results are greyed out. Those results are results from cards that have not been reviewed yet. Conversely, as non-greyed out results come from cards that you have already reviewed, they should represent words that you already know. Note The maximum number of results, as well as the exact queries themselves, can be changed in the options file . Same Reading Indicator \u00b6 Warning New as of version 0.11.0.0 . This version is currently bleeding edge , so this feature cannot be used unless you compile the templates from the master branch. When a word with the same reading has been detected, an indicator will be shown. This indicator will be yellow (or blue on light mode) for new cards only. After the first review, the indicator will be the same color as the info circle. TODO gif The query ignores pitch accent. For example, if you have the cards \u81ea\u8eab and \u81ea\u4fe1, the indicator will still be shown and point to each other. Word Pitch \u00b6 The colors and what the lines mean are all described in the official anki addon page as specified here . Colored Pitch Accent \u00b6 Main page: Auto Pitch Accent (Colored Pitch Accent) Pitch accent can already be set very easily by writing the position in PAOverride . Moreover, the reading, word and pitch overline can be automatically colored in Migaku style colors according to the main pitch accent groups. This automatic coloring behavior is disabled by default , and must be enabled in the options file : Enabling colored pitch accent (click here) \"auto-pitch-accent\" : { \"enabled\" : true , // (1)! \"colored-pitch-accent\" : { \"enabled\" : true , // ... } // ... } The auto-pitch-accent module must be enabled to use colored pitch accent. Images in Definition Fields \u00b6 Outside of the normal click to zoom image at the top right, any customly inserted images, including images inserted directly by Yomichan, will be converted to text which you have to hover over to reveal. Of course, this image can also be clicked on to zoom. See the video demo below to see exactly what happens. How to disable (click here) This image conversion can be globally disabled in the runtime options file : \"img-utils\" : { \"stylize-images-in-glossary\" : false , // ... } Additionally, if you want to only disable this for some particular images, edit the HTML of the desired field, and add data-do-not-convert=\"true\" . An example is shown below: <img src=\"your_image.png\" data-do-not-convert=\"true\"> Image Blur \u00b6 New in version 0.10.3.0 (latest version: 0.10.3.0 ) This allows you to blur the images of cards marked with a NSFW tag. This behavior is disabled by default . In other words, you will not be able to blur images unless the following setting is explicitly enabled in the runtime options file : Enabling image blur (click here) \"img-utils\" : { \"enabled\" : true , // (1)! \"nsfw-toggle\" : { \"enabled\" : true , // ... } } The img-utils module must be enabled to use the image blur feature. To mark a card as NSFW, add any of the following tags to the card: nsfw \u30fb NSFW \u30fb -NSFW Note Recall that you can use custom text in the Picture field instead of having an actual picture. This is useful if you simply don't want to save a particular image. Change Review Session State \u00b6 The above demo shows how you can un-blur an image temporarily. This means that if you see that card again during the same review session, the image will be blurred again. This state can be changed for a review session. To toggle between review-session states, hover over the info circle, and click on the eyeball to the top left. This state will be maintained for the entire review session, but will be lost on the next session. The tabs below show the available states. By default, states cycle from left to right. Only Blur if NSFW Always Blurred Always Revealed Not Marked Marked (with NSFW tag) Not Marked Marked (with NSFW tag) Not Marked Marked (with NSFW tag) Demos (click here) Regular, unmarked card Card marked as NSFW Note Both examples have the info circle toggled (clicked), so the tooltip persists. Additional Details \u00b6 The eyeball to toggle the blur between an image will not be shown unless the card is marked as NSFW (or the review session state is \"Always Blurred\"). Clicking on the blurred image will do nothing; you must click on the eye to un-blur the image. Forcing the user to click in a smaller area makes accidental reveals less common. After revealing the image, you can click on the image to zoom, as normal. You cannot click on a blurred image to zoom. Most things can be changed in the runtime options, including what tags can be used, the default initial state on PC/mobile, etc. This was heavily inspired by Marv's implementation of the same feature. Conclusion \u00b6 Outside of the user interface, the note has plenty of fields you can use to further modify the card. Head over to the Usage page to see just that.","title":"User Interface"},{"location":"ui/#summary","text":"Most of the user interface is already shown off in the GUI demo , and I would recommend watching it before continuing. However, to dispell any mysteries, here is a fully annotated summary of the user interface. Additional information on some parts of the UI is stated below.","title":"Summary"},{"location":"ui/#info-circle","text":"Default Error Warning Leech On hover, the info circle on the top left corner just shows some basic info. However, it also serves as a notification system to the user, when it has a color. This should only appear when some javascript code fails. In other words, this should not appear under normal circumstances. If you get this without modifying the note in any way, please see this section for basic troubleshooting. This serves to warn the user about something. It can appear without completely breaking the functionality of the card. In other words, you can choose to ignore it. When the card is a leech, the circle is highlighted yellow (or blue in light mode) to indicate that it is a leech. This is only shown on the back side of the card.","title":"Info Circle"},{"location":"ui/#locking-the-info-circle","text":"New in version 0.10.3.0 (latest version: 0.10.3.0 ) You can toggle (click on) the info circle to lock the tooltip in place. This may be useful for copying/pasting errors and other debugging purposes.","title":"Locking the Info Circle"},{"location":"ui/#kanji-hover","text":"Main page: Kanji Hover Kanji hover shows you if you have seen the kanji in previous cards or not. This is useful if you want to check whether you have seen the reading in a previous card, to differentiate between similar kanjis, etc. By default, it searches for the kanji within the \"Word\" field, only for notes of the same type (JP Mining Note). Notice how some results are greyed out. Those results are results from cards that have not been reviewed yet. Conversely, as non-greyed out results come from cards that you have already reviewed, they should represent words that you already know. Note The maximum number of results, as well as the exact queries themselves, can be changed in the options file .","title":"Kanji Hover"},{"location":"ui/#same-reading-indicator","text":"Warning New as of version 0.11.0.0 . This version is currently bleeding edge , so this feature cannot be used unless you compile the templates from the master branch. When a word with the same reading has been detected, an indicator will be shown. This indicator will be yellow (or blue on light mode) for new cards only. After the first review, the indicator will be the same color as the info circle. TODO gif The query ignores pitch accent. For example, if you have the cards \u81ea\u8eab and \u81ea\u4fe1, the indicator will still be shown and point to each other.","title":"Same Reading Indicator"},{"location":"ui/#word-pitch","text":"The colors and what the lines mean are all described in the official anki addon page as specified here .","title":"Word Pitch"},{"location":"ui/#colored-pitch-accent","text":"Main page: Auto Pitch Accent (Colored Pitch Accent) Pitch accent can already be set very easily by writing the position in PAOverride . Moreover, the reading, word and pitch overline can be automatically colored in Migaku style colors according to the main pitch accent groups. This automatic coloring behavior is disabled by default , and must be enabled in the options file : Enabling colored pitch accent (click here) \"auto-pitch-accent\" : { \"enabled\" : true , // (1)! \"colored-pitch-accent\" : { \"enabled\" : true , // ... } // ... } The auto-pitch-accent module must be enabled to use colored pitch accent.","title":"Colored Pitch Accent"},{"location":"ui/#images-in-definition-fields","text":"Outside of the normal click to zoom image at the top right, any customly inserted images, including images inserted directly by Yomichan, will be converted to text which you have to hover over to reveal. Of course, this image can also be clicked on to zoom. See the video demo below to see exactly what happens. How to disable (click here) This image conversion can be globally disabled in the runtime options file : \"img-utils\" : { \"stylize-images-in-glossary\" : false , // ... } Additionally, if you want to only disable this for some particular images, edit the HTML of the desired field, and add data-do-not-convert=\"true\" . An example is shown below: <img src=\"your_image.png\" data-do-not-convert=\"true\">","title":"Images in Definition Fields"},{"location":"ui/#image-blur","text":"New in version 0.10.3.0 (latest version: 0.10.3.0 ) This allows you to blur the images of cards marked with a NSFW tag. This behavior is disabled by default . In other words, you will not be able to blur images unless the following setting is explicitly enabled in the runtime options file : Enabling image blur (click here) \"img-utils\" : { \"enabled\" : true , // (1)! \"nsfw-toggle\" : { \"enabled\" : true , // ... } } The img-utils module must be enabled to use the image blur feature. To mark a card as NSFW, add any of the following tags to the card: nsfw \u30fb NSFW \u30fb -NSFW Note Recall that you can use custom text in the Picture field instead of having an actual picture. This is useful if you simply don't want to save a particular image.","title":"Image Blur"},{"location":"ui/#change-review-session-state","text":"The above demo shows how you can un-blur an image temporarily. This means that if you see that card again during the same review session, the image will be blurred again. This state can be changed for a review session. To toggle between review-session states, hover over the info circle, and click on the eyeball to the top left. This state will be maintained for the entire review session, but will be lost on the next session. The tabs below show the available states. By default, states cycle from left to right. Only Blur if NSFW Always Blurred Always Revealed Not Marked Marked (with NSFW tag) Not Marked Marked (with NSFW tag) Not Marked Marked (with NSFW tag) Demos (click here) Regular, unmarked card Card marked as NSFW Note Both examples have the info circle toggled (clicked), so the tooltip persists.","title":"Change Review Session State"},{"location":"ui/#additional-details","text":"The eyeball to toggle the blur between an image will not be shown unless the card is marked as NSFW (or the review session state is \"Always Blurred\"). Clicking on the blurred image will do nothing; you must click on the eye to un-blur the image. Forcing the user to click in a smaller area makes accidental reveals less common. After revealing the image, you can click on the image to zoom, as normal. You cannot click on a blurred image to zoom. Most things can be changed in the runtime options, including what tags can be used, the default initial state on PC/mobile, etc. This was heavily inspired by Marv's implementation of the same feature.","title":"Additional Details"},{"location":"ui/#conclusion","text":"Outside of the user interface, the note has plenty of fields you can use to further modify the card. Head over to the Usage page to see just that.","title":"Conclusion"},{"location":"updating/","text":"Updating the Card \u00b6 This section is dedicated to explaining how to update the card itself. Warning Updating your card will DELETE ANY CHANGES you have made to the templates. Please make a complete backup of your collection before continuing to update your note. Method 1: Python Script (recommended) \u00b6 The recommended way to install the note is by using a python script. This will change the note in place, and gives you various options on how the note will be changed. Lastly, it will give you warnings on anything you have to change manually, such as Yomichan Templates. Why can't I just copy/paste the templates, or just re-install the .apkg file to update the note? It's not uncommon for updates to contain many changes outside of just the templates alone. For example, required Yomichan settings, add-on config changes, or sometimes even the data within the note fields must be changed. Additionally, the field list is changed somewhat frequently. Although settings outside of Anki cannot be changed automatically, almost all settings within Anki are automatically updated with the python script. Additionally, the python script will give you plenty of instructions on exactly how to update any Yomichan setting or add-on config change. Finally, installing the .apkg file when the field list is in any way different will actually create a new version of the note instead of replacing the old note, which may prove to be an even bigger hassle. Preliminary steps \u00b6 Ensure that your note is named exactly JP Mining Note . To do this, head over to: (Main Window) \u2192 Tools \u2192 Manage Note Types . If your note is named differently, please rename it to JP Mining Note . If you have two different versions (for example: JP Mining Note and JP Mining Note-f263ae ), then Note You can always change the name back after updating. Running the Script \u00b6 Command Line Windows The cross platform command line summary is shown below. A more user friendly set of instructions for Windows users is also available on the second tab, for people who have never used python or git before. # assuming you are at the root of the repo, i.e. after the following commands: # $ git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git # $ cd jp-mining-note # grabs the latest version of the master branch git pull origin/master cd tools # Make sure you have Anki open and Anki-Connect installed! # Also ensure that your python version is 3.10.6 or higher. # Note: Linux users may have to use `python3` instead of `python`. python install.py --update This section explains how to run the script on Windows if you have never used python or git before. Install Python . Any version above 3.10.6 should suffice. Make sure the box for \"Add Python to PATH\" is checked. (This is a common error for people to make. Please pay attention to this step!) Get the latest version of the repository. The easiest way to do this is by heading to the main repository , click on the green Code dropdown, and then download the zip by the Download Zip button. After that, unzip the directory. Open command prompt, and cd (change directory) into jp-mining-note/tools . If you don't know how to do that, see here . With your current directory being the tools directory, run the following command: python install.py --update Once you run the command, further instructions should be given to you through the command line interface. Common Errors \u00b6 This section will document common errors that occur when running the /install.py script. Anki-Connect is missing actions \u00b6 Anki-Connect is likely outdated. To fix this, remove and re-download Anki-Connect from the AnkiWeb page . Note It seems that the Check for Updates occasionally fails to update the add-on, despite the fact that a newer version of the add-on exists. That is why I recommend re-downloading from the AnkiWeb page instead of using this feature. FieldVerifierException \u00b6 This class of errors means that the field list was edited at some point after the installation or last update of JPMN. The field list can be accessed by navigating to the following: (Main window) \u2192 Browse \u2192 Fields... . The install.py is picky about fields and its order, and the script will reject any note type with modifications to the field list (by default). To fix this, there are a few cases to go through. The field order has been changed. If the field order has been changed, and nothing else has been changed, you should be able to preserve your existing field list order by running the installation script with the --ignore-order flag (i.e. python3 install.py --ignore-order ). Alternatively, you can simply re-order the fields back to their original position. Note If you use --ignore-order , all new fields will be added to the very end of the field list (i.e. under Comment ). Additionally, any fields that were supposed to be repositioned will stay in place. It is up to you to move the fields to the appropriate places. New field(s) have been created. You have two options. Neither of these will delete your existing field(s). If you want to preserve your existing field list order, then you can run the script with the --ignore-order flag, like above. If you want to have the field list order match exactly with the current note, then re-order all the new fields to be below the last Comment field. Of course, this can be a temporary move; you can move the fields back to their previous positions after the update. Note On rare occasions, you might have added a field that serves the same purpose as a field that will be created on update. If so, rename your field to the field that will be added, and move the field under the Comment field. For example, if your note doesn't have PAPositions but you added a field Positions that fulfills the same purpose, then rename Positions to PAPositions . Field(s) were removed or renamed. Unfortunately, there is no way to ignore removed or renamed fields. If you removed a field, please re-add the field. Likewise, if you renamed a field, please rename it back to the original name. See here for more info on why they cannot be ignored. Method 2: Manually \u00b6 Warning This method is not recommended . Furthermore, very limited support will be given if you attempt this method. Click here to see the steps on how to update the note manually. Sometimes, you may be able to update the card simply by re-installing the newer version of the .apkg . However, this has the main caveat where if any of the fields are added, renamed, repositioned or deleted between card versions, this will not work (and instead add a new version of JP Mining Note , e.g. named JP Mining Note-b320fa ). Additionally, if you manually edited any of the fields, then this method will not work. To see if the fields have been changed, compare the first two numbers in the version you want to install to the first two numbers of the current card version . If the first two numbers match, then you are likely safe to manually update the card. If they don't match, then you MAY be able to get away with installing it anyways and transferring the old note types to the new note type. For example, a possible way to update the note is: Install the new version of the note. Select all the cards you want to transfer to the version, and change note type. Remove the old note type. Rename the new note type to the old note type name ( JP Mining Note ). See the changelog to see how the fields have changed and how you have to map the old fields to the new fields. Further Steps \u00b6 There may be further steps outside of just updating the card, such as updating Yomichan's templates / format. Further instructions on these are written below. Afterwards, please see the final steps section. Updating Yomichan's Anki Card Format \u00b6 To update the Yomichan Format, the steps should be almost the same as the one specified already in the setup . However, there are some differences that you should keep in mind. Refreshing the Fields \u00b6 The most important difference is that if a new field was added or a field has been renamed, then the field will not show up automatically in Yomichan . The only way to refresh the fields as of writing this (2022/09/06) is to change the Model at the top right hand corner to something else, and then switching back to JP Mining Note . Warning Doing the above WILL clear all the fields that you previously had, unless there is a matching field in that other card. Here is how I recommend transitioning as smoothly as possible: As always, create a backup of your Yomichan settings, just in case. After running install.py --update , create a temporary copy of the note by: Tools \u2192 Manage Note Types \u2192 Add \u2192 Select Clone: JP Mining Note \u2192 Ok \u2192 Name the note anything you want (the following examples will use JP Mining Note copy ) \u2192 Ok \u2192 Close If you are currently viewing Yomichan Settings, please refresh the page. Head over to Anki Card Format as before . In the top right corner, change Model to JP Mining Note copy , and then change it back to JP Mining Note . Update the fields as specified. It will be both specified in the text you see when running install.py --update . However, you should also simply compare the table on the setup page to your filled out fields. Remove the temporary note: Tools \u2192 Manage Note Types \u2192 (select JP Mining Note copy ) \u2192 Delete Explanation Using the temporary copy of the updated card means that fields that remain unchanged between the old card and new card will be transferred automatically in the Yomichan Format. If you simply choose some random model like Basic , then almost none of the fields will be preserved, as the Basic card does not have any matching fields with the JP Mining Note model. Updating Yomichan Templates \u00b6 Like the above, you can simply follow the steps already specified in setup . Again, please make sure you reset the existing templates (unless you know what you are doing), and again, please make a backup of your Yomichan settings just in case. Updating the Runtime Options File \u00b6 The runtime options file does not automatically update with each note update, as to not override the user's configuration on each update. If the options file isn't updated, then the note will simply use the default value for the option. However, if certain runtime options no longer work, you may have to update this file, as it is possible for the configuration file layout to have changed between versions. The most recent version of the options file can always be found here . if you want to update it. Final Steps \u00b6 By now, you should be done updating the note! Please do the following checks to make sure everything properly works: Preview an existing card, to ensure that nothing looks odd. Create a new card and make sure nothing looks odd. Example Japanese sentences to test card creation \u300c\u6211\u306a\u304c\u3089\u99ac\u9e7f\u99ac\u9e7f\u3057\u3044\u3053\u3068\u3092\u601d\u3044\u3064\u3044\u305f\u3082\u306e\u3060\u3068\u5606\u606f\u3057\u3064\u3064\u3082\u3001\u79c1\u306f\u9759\u304b\u306b\u30d9\u30c3\u30c9\u306b\u8fd1\u4ed8\u304f\u300d \u300c\u30b8\u30a7\u30e9\u30fc\u30c8\u3092\u8cb7\u3046\u304a\u91d1\u304c\u306a\u3044\u3068\u306f\uff01\u7d66\u6599\u65e5\u307e\u3067\u53ce\u5165\u306e\u5f53\u3066\u3082\u306a\u3057\u3001\u81ea\u708a\u3059\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u306d\u300d \u300c\u3053\u308c\u304c\u5c11\u5e74\u8a8c\u3060\u3063\u305f\u3089\u9806\u4f4d\u4e0a\u304c\u3063\u3066\u308b\u305e\u3002\u305d\u3057\u3066\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u7de8\u3067\u30a2\u30cb\u30e1\u5316\u6c7a\u5b9a\u3060\u300d \u300c\u3042\u306e\u6642\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u3067\u8272\u3093\u306a\u8cea\u554f\u304c\u3067\u304d\u308b\u30b5\u30a4\u30c8\u306b\u6295\u7a3f\u3057\u305f\u3089\u3001\u89aa\u5207\u306a\u4eba\u304c\u5546\u54c1\u540d\u3068\u58f2\u3063\u3066\u3044\u308b\u5834\u6240\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u3093\u3067\u3059\u300d \u300c\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6226\u306b\u304a\u3051\u308b\u9023\u5408\u56fd\u8ecd\u306e\u91cd\u8981\u62e0\u70b9\u3067\u3059\u2026\u300d","title":"Updating"},{"location":"updating/#updating-the-card","text":"This section is dedicated to explaining how to update the card itself. Warning Updating your card will DELETE ANY CHANGES you have made to the templates. Please make a complete backup of your collection before continuing to update your note.","title":"Updating the Card"},{"location":"updating/#method-1-python-script-recommended","text":"The recommended way to install the note is by using a python script. This will change the note in place, and gives you various options on how the note will be changed. Lastly, it will give you warnings on anything you have to change manually, such as Yomichan Templates. Why can't I just copy/paste the templates, or just re-install the .apkg file to update the note? It's not uncommon for updates to contain many changes outside of just the templates alone. For example, required Yomichan settings, add-on config changes, or sometimes even the data within the note fields must be changed. Additionally, the field list is changed somewhat frequently. Although settings outside of Anki cannot be changed automatically, almost all settings within Anki are automatically updated with the python script. Additionally, the python script will give you plenty of instructions on exactly how to update any Yomichan setting or add-on config change. Finally, installing the .apkg file when the field list is in any way different will actually create a new version of the note instead of replacing the old note, which may prove to be an even bigger hassle.","title":"Method 1: Python Script (recommended)"},{"location":"updating/#common-errors","text":"This section will document common errors that occur when running the /install.py script.","title":"Common Errors"},{"location":"updating/#method-2-manually","text":"Warning This method is not recommended . Furthermore, very limited support will be given if you attempt this method. Click here to see the steps on how to update the note manually. Sometimes, you may be able to update the card simply by re-installing the newer version of the .apkg . However, this has the main caveat where if any of the fields are added, renamed, repositioned or deleted between card versions, this will not work (and instead add a new version of JP Mining Note , e.g. named JP Mining Note-b320fa ). Additionally, if you manually edited any of the fields, then this method will not work. To see if the fields have been changed, compare the first two numbers in the version you want to install to the first two numbers of the current card version . If the first two numbers match, then you are likely safe to manually update the card. If they don't match, then you MAY be able to get away with installing it anyways and transferring the old note types to the new note type. For example, a possible way to update the note is: Install the new version of the note. Select all the cards you want to transfer to the version, and change note type. Remove the old note type. Rename the new note type to the old note type name ( JP Mining Note ). See the changelog to see how the fields have changed and how you have to map the old fields to the new fields.","title":"Method 2: Manually"},{"location":"updating/#further-steps","text":"There may be further steps outside of just updating the card, such as updating Yomichan's templates / format. Further instructions on these are written below. Afterwards, please see the final steps section.","title":"Further Steps"},{"location":"updating/#updating-yomichans-anki-card-format","text":"To update the Yomichan Format, the steps should be almost the same as the one specified already in the setup . However, there are some differences that you should keep in mind.","title":"Updating Yomichan's Anki Card Format"},{"location":"updating/#refreshing-the-fields","text":"The most important difference is that if a new field was added or a field has been renamed, then the field will not show up automatically in Yomichan . The only way to refresh the fields as of writing this (2022/09/06) is to change the Model at the top right hand corner to something else, and then switching back to JP Mining Note . Warning Doing the above WILL clear all the fields that you previously had, unless there is a matching field in that other card. Here is how I recommend transitioning as smoothly as possible: As always, create a backup of your Yomichan settings, just in case. After running install.py --update , create a temporary copy of the note by: Tools \u2192 Manage Note Types \u2192 Add \u2192 Select Clone: JP Mining Note \u2192 Ok \u2192 Name the note anything you want (the following examples will use JP Mining Note copy ) \u2192 Ok \u2192 Close If you are currently viewing Yomichan Settings, please refresh the page. Head over to Anki Card Format as before . In the top right corner, change Model to JP Mining Note copy , and then change it back to JP Mining Note . Update the fields as specified. It will be both specified in the text you see when running install.py --update . However, you should also simply compare the table on the setup page to your filled out fields. Remove the temporary note: Tools \u2192 Manage Note Types \u2192 (select JP Mining Note copy ) \u2192 Delete Explanation Using the temporary copy of the updated card means that fields that remain unchanged between the old card and new card will be transferred automatically in the Yomichan Format. If you simply choose some random model like Basic , then almost none of the fields will be preserved, as the Basic card does not have any matching fields with the JP Mining Note model.","title":"Refreshing the Fields"},{"location":"updating/#updating-yomichan-templates","text":"Like the above, you can simply follow the steps already specified in setup . Again, please make sure you reset the existing templates (unless you know what you are doing), and again, please make a backup of your Yomichan settings just in case.","title":"Updating Yomichan Templates"},{"location":"updating/#updating-the-runtime-options-file","text":"The runtime options file does not automatically update with each note update, as to not override the user's configuration on each update. If the options file isn't updated, then the note will simply use the default value for the option. However, if certain runtime options no longer work, you may have to update this file, as it is possible for the configuration file layout to have changed between versions. The most recent version of the options file can always be found here . if you want to update it.","title":"Updating the Runtime Options File"},{"location":"updating/#final-steps","text":"By now, you should be done updating the note! Please do the following checks to make sure everything properly works: Preview an existing card, to ensure that nothing looks odd. Create a new card and make sure nothing looks odd. Example Japanese sentences to test card creation \u300c\u6211\u306a\u304c\u3089\u99ac\u9e7f\u99ac\u9e7f\u3057\u3044\u3053\u3068\u3092\u601d\u3044\u3064\u3044\u305f\u3082\u306e\u3060\u3068\u5606\u606f\u3057\u3064\u3064\u3082\u3001\u79c1\u306f\u9759\u304b\u306b\u30d9\u30c3\u30c9\u306b\u8fd1\u4ed8\u304f\u300d \u300c\u30b8\u30a7\u30e9\u30fc\u30c8\u3092\u8cb7\u3046\u304a\u91d1\u304c\u306a\u3044\u3068\u306f\uff01\u7d66\u6599\u65e5\u307e\u3067\u53ce\u5165\u306e\u5f53\u3066\u3082\u306a\u3057\u3001\u81ea\u708a\u3059\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u306d\u300d \u300c\u3053\u308c\u304c\u5c11\u5e74\u8a8c\u3060\u3063\u305f\u3089\u9806\u4f4d\u4e0a\u304c\u3063\u3066\u308b\u305e\u3002\u305d\u3057\u3066\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u7de8\u3067\u30a2\u30cb\u30e1\u5316\u6c7a\u5b9a\u3060\u300d \u300c\u3042\u306e\u6642\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u3067\u8272\u3093\u306a\u8cea\u554f\u304c\u3067\u304d\u308b\u30b5\u30a4\u30c8\u306b\u6295\u7a3f\u3057\u305f\u3089\u3001\u89aa\u5207\u306a\u4eba\u304c\u5546\u54c1\u540d\u3068\u58f2\u3063\u3066\u3044\u308b\u5834\u6240\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u3093\u3067\u3059\u300d \u300c\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6226\u306b\u304a\u3051\u308b\u9023\u5408\u56fd\u8ecd\u306e\u91cd\u8981\u62e0\u70b9\u3067\u3059\u2026\u300d","title":"Final Steps"},{"location":"usage/","text":"This entire section is dedicated showing how to use the fields and card options to change the card to your liking. Definitions \u00b6 Binary Field: A field that checks whether it is filled or not with any value, say 1 . The default is implied by the name of the field, and a value of \"true\" means that the field is filled. For example, the IsSentenceCard field will turn the card into a sentence card if filled. If it is not filled, then the card will be a word card. To fill a field automatically, see here . PA: Short for \"Pitch Accent\". Modifying the Front Side (Tested Content) \u00b6 The front side is exactly the content that we want to test ourselves on. Naturally, since we can test ourselves on many aspects of the word, there are many ways to change this tested content. Card types \u00b6 Full list: Card Types The default card type is a vocab card, where the tested content is simply the word. To change the card to a sentence card, fill the IsSentenceCard binary field. Vocab card Sentence card Changing the Displayed Content \u00b6 Vocab cards show the Word field and sentence cards show the Sentence fields by default. However, you can modify what is exactly shown in the front by using the AltDisplay field. Newline Last sentence only The previous sentence card looks a little ugly, because the sentence splits off at a strange point. To fix this, we add a newline at a sensible place (after the period) in the AltDisplay field. Alternatively, we can simply test the last sentence, by removing the first sentence. One nice feature is that the AltDisplay has hoverable furigana text enabled by default. In other words, you can use furigana in the field. I personally use this to insert furigana for certain names, since I'm usually not testing myself on how to read a name. For example, the card below has the following HTML: \u4e0a\u6761[\u304b\u307f\u3058\u3087\u3046] \u606d\u4ecb[\u304d\u3087\u3046\u3059\u3051]\u541b\u306e\u3053\u3068\u304a < b > \u6155\u3044 </ b > \u3057\u3066\u307e\u3057\u305f\u306e Note If you are using a vocab card, you can use AltDisplay to show something that differs from the Word field. Note On Hybrid Card types, the AltDisplay field only affects the sentence, and not the front displayed word. Hints \u00b6 Finally, you can include a customized hint to show at the front of the card, by using the Hint field. This will show as a collapsible field at the front of card. If you do not want the hint to be hidden by default, you can use the HintNotHidden field instead. Hint HintNotHidden Modifying the Back Side \u00b6 Not much has to be said about modifying the back side of the card, outside of modifying pitch accent. The PrimaryDefinition field contains the main content, and should be the main field to edit if one wants to put down more notes about the card. The AdditionalNotes field is useful if you want to put down even more notes, but keep it in a collapsible field to reduce vertical space. Here are some ways you can use this field: Recording the source of the media Notes on the scene's context The text surrounding the sentence In general, any info that is not crutial to understanding the tested content Bolding anything in these sections will highlight the word in a light yellow tint, to make the bold stand out more. Modifying Pitch Accent \u00b6 Main page: Auto Pitch Accent The displayed pitch accent is usually the first position found in PAPositions . However, you can override this automatically chosen position using the PAOverride field. More information and customization, including automatically coloring the word with Migaku colors, can be found in the main page linked above. Modifying Other Aspects of the Card \u00b6 Key field \u00b6 This contains the tested word. In other words, this contains the exact same content as the field below, but this field is specifically not used in the card template. This is to allow the user to modify the key if duplicates arise, while still being able to test the word. For example, if I were to test different usages of \u4e0a, I can change this key value to \u4e0a (preposition) , \u4e0a (grammar) , etc. and add a new card. It is expected that this Key field is unique; a warning will appear on cards that have a duplicate key. Comment field \u00b6 Similarly to the Key field, this field will not be used in any card template. In other words, this is a place where you can write down notes without affecting the card itself. Picture field \u00b6 As an aside, you can put text in this field instead of a picture, and it should still work. This is useful if you forgot to add the picture, or just don't want to add the picture in the first place. Testing Pitch Accent \u00b6 This note type provides many options to target exactly what parts of pitch accent you want to test yourself on. By default, pitch accent is not tested. To test for pitch accent, fill the PAShowInfo field. You should see a circle to the left of the word or sentence. Pitch Accent Indicator \u00b6 This circle you see is called the \"Pitch Accent Indicator\", or \"PA Indicator\" for short. How this card indicates what pitch accent is tested is by the PA indicator's color. Here are what the colors represent: Green: The entire sentence is tested. Blue: Only the word is tested. Red: Pitch accent should not be tested in any way. If you ever forget what the colors mean, you can hover your mouse over the circle to get a description of what is being tested. Alternatively, you can look at the top right of the screen and look at the value after the / . Note If the tested content is a sentence (card), but you want to only test for word pitch accent, you would not be able to see the word normally. To see the word that is tested, there is a button to toggle whether the word is highlighted or not. The content that is highlighted is exactly what is bolded in the Sentence (or AltDisplay / AltDisplayPASentenceCard ) field, which is the added word by default. Selecting the Pitch Accent \u00b6 The following shows how to fill in the proper fields to test pitch accent: Filled fields PA Indicator Separated Cards (None, default) (Doesn't exist) PAShowInfo Green (sentence) or blue (word), depending on the tested content PAShowInfo & PADoNotTest Red (not tested) PAShowInfo & PATestOnlyWord Blue (word) PAShowInfo & PASeparateWordCard Red (not tested) Word PAShowInfo & PASeparateSentenceCard Blue (word) Sentence PAShowInfo & PASeparateWordCard & PASeparateSentenceCard Red (not tested) Word & Sentence To clarify some of the above: By default, if only PAShowInfo is filled, then the entire display is tested For vocab cards, targeted sentence cards, and hybrid vocab cards, only the word PA is tested (PA indicator: blue). For sentence cards and hybrid sentence, the entire sentence PA is tested (PA indicator: green). To test just the word pitch accent, fill the PATestOnlyWord field. To create completely separate cards to just test pitch accent on, use the fields PASeparateSentenceCard and/or PASeparateWordCard . If a PA word card is created, then the default card does not test pitch accent. Similarly, if a PA sentence card is created, then the default card only tests the word pitch accent. Modifying Pitch Accent Sentence Cards \u00b6 The field AltDisplayPASentenceCard exists to customize the display of the PA sentence card, if it exists. It works similarly to AltDisplay , and takes priority over AltDisplay in the PA sentence card. Cloze Deletion Cards \u00b6 In other words, \"fill-in-the-blank cards\". This allows you to create cards that tests word audio or sentence audio. To create a cloze deletion card, simply fill in the SeparateClozeDeletionCard field. The words that are hidden are exactly the words that are bolded in the Sentence (or AltDisplay ) field. To create a sentence audio card, copy/paste the sentence into AltDisplay , and bold the entire AltDisplay field (say, with ctrl+a and ctrl+b ). There's currently no shortcut to creating a sentence audio card. TODO: IsSentenceCard -> tests entire sentence, not filled -> currently as is","title":"Usage"},{"location":"usage/#definitions","text":"Binary Field: A field that checks whether it is filled or not with any value, say 1 . The default is implied by the name of the field, and a value of \"true\" means that the field is filled. For example, the IsSentenceCard field will turn the card into a sentence card if filled. If it is not filled, then the card will be a word card. To fill a field automatically, see here . PA: Short for \"Pitch Accent\".","title":"Definitions"},{"location":"usage/#modifying-the-front-side-tested-content","text":"The front side is exactly the content that we want to test ourselves on. Naturally, since we can test ourselves on many aspects of the word, there are many ways to change this tested content.","title":"Modifying the Front Side (Tested Content)"},{"location":"usage/#card-types","text":"Full list: Card Types The default card type is a vocab card, where the tested content is simply the word. To change the card to a sentence card, fill the IsSentenceCard binary field. Vocab card Sentence card","title":"Card types"},{"location":"usage/#changing-the-displayed-content","text":"Vocab cards show the Word field and sentence cards show the Sentence fields by default. However, you can modify what is exactly shown in the front by using the AltDisplay field. Newline Last sentence only The previous sentence card looks a little ugly, because the sentence splits off at a strange point. To fix this, we add a newline at a sensible place (after the period) in the AltDisplay field. Alternatively, we can simply test the last sentence, by removing the first sentence. One nice feature is that the AltDisplay has hoverable furigana text enabled by default. In other words, you can use furigana in the field. I personally use this to insert furigana for certain names, since I'm usually not testing myself on how to read a name. For example, the card below has the following HTML: \u4e0a\u6761[\u304b\u307f\u3058\u3087\u3046] \u606d\u4ecb[\u304d\u3087\u3046\u3059\u3051]\u541b\u306e\u3053\u3068\u304a < b > \u6155\u3044 </ b > \u3057\u3066\u307e\u3057\u305f\u306e Note If you are using a vocab card, you can use AltDisplay to show something that differs from the Word field. Note On Hybrid Card types, the AltDisplay field only affects the sentence, and not the front displayed word.","title":"Changing the Displayed Content"},{"location":"usage/#hints","text":"Finally, you can include a customized hint to show at the front of the card, by using the Hint field. This will show as a collapsible field at the front of card. If you do not want the hint to be hidden by default, you can use the HintNotHidden field instead. Hint HintNotHidden","title":"Hints"},{"location":"usage/#modifying-the-back-side","text":"Not much has to be said about modifying the back side of the card, outside of modifying pitch accent. The PrimaryDefinition field contains the main content, and should be the main field to edit if one wants to put down more notes about the card. The AdditionalNotes field is useful if you want to put down even more notes, but keep it in a collapsible field to reduce vertical space. Here are some ways you can use this field: Recording the source of the media Notes on the scene's context The text surrounding the sentence In general, any info that is not crutial to understanding the tested content Bolding anything in these sections will highlight the word in a light yellow tint, to make the bold stand out more.","title":"Modifying the Back Side"},{"location":"usage/#modifying-pitch-accent","text":"Main page: Auto Pitch Accent The displayed pitch accent is usually the first position found in PAPositions . However, you can override this automatically chosen position using the PAOverride field. More information and customization, including automatically coloring the word with Migaku colors, can be found in the main page linked above.","title":"Modifying Pitch Accent"},{"location":"usage/#modifying-other-aspects-of-the-card","text":"","title":"Modifying Other Aspects of the Card"},{"location":"usage/#key-field","text":"This contains the tested word. In other words, this contains the exact same content as the field below, but this field is specifically not used in the card template. This is to allow the user to modify the key if duplicates arise, while still being able to test the word. For example, if I were to test different usages of \u4e0a, I can change this key value to \u4e0a (preposition) , \u4e0a (grammar) , etc. and add a new card. It is expected that this Key field is unique; a warning will appear on cards that have a duplicate key.","title":"Key field"},{"location":"usage/#comment-field","text":"Similarly to the Key field, this field will not be used in any card template. In other words, this is a place where you can write down notes without affecting the card itself.","title":"Comment field"},{"location":"usage/#picture-field","text":"As an aside, you can put text in this field instead of a picture, and it should still work. This is useful if you forgot to add the picture, or just don't want to add the picture in the first place.","title":"Picture field"},{"location":"usage/#testing-pitch-accent","text":"This note type provides many options to target exactly what parts of pitch accent you want to test yourself on. By default, pitch accent is not tested. To test for pitch accent, fill the PAShowInfo field. You should see a circle to the left of the word or sentence.","title":"Testing Pitch Accent"},{"location":"usage/#pitch-accent-indicator","text":"This circle you see is called the \"Pitch Accent Indicator\", or \"PA Indicator\" for short. How this card indicates what pitch accent is tested is by the PA indicator's color. Here are what the colors represent: Green: The entire sentence is tested. Blue: Only the word is tested. Red: Pitch accent should not be tested in any way. If you ever forget what the colors mean, you can hover your mouse over the circle to get a description of what is being tested. Alternatively, you can look at the top right of the screen and look at the value after the / . Note If the tested content is a sentence (card), but you want to only test for word pitch accent, you would not be able to see the word normally. To see the word that is tested, there is a button to toggle whether the word is highlighted or not. The content that is highlighted is exactly what is bolded in the Sentence (or AltDisplay / AltDisplayPASentenceCard ) field, which is the added word by default.","title":"Pitch Accent Indicator"},{"location":"usage/#selecting-the-pitch-accent","text":"The following shows how to fill in the proper fields to test pitch accent: Filled fields PA Indicator Separated Cards (None, default) (Doesn't exist) PAShowInfo Green (sentence) or blue (word), depending on the tested content PAShowInfo & PADoNotTest Red (not tested) PAShowInfo & PATestOnlyWord Blue (word) PAShowInfo & PASeparateWordCard Red (not tested) Word PAShowInfo & PASeparateSentenceCard Blue (word) Sentence PAShowInfo & PASeparateWordCard & PASeparateSentenceCard Red (not tested) Word & Sentence To clarify some of the above: By default, if only PAShowInfo is filled, then the entire display is tested For vocab cards, targeted sentence cards, and hybrid vocab cards, only the word PA is tested (PA indicator: blue). For sentence cards and hybrid sentence, the entire sentence PA is tested (PA indicator: green). To test just the word pitch accent, fill the PATestOnlyWord field. To create completely separate cards to just test pitch accent on, use the fields PASeparateSentenceCard and/or PASeparateWordCard . If a PA word card is created, then the default card does not test pitch accent. Similarly, if a PA sentence card is created, then the default card only tests the word pitch accent.","title":"Selecting the Pitch Accent"},{"location":"usage/#modifying-pitch-accent-sentence-cards","text":"The field AltDisplayPASentenceCard exists to customize the display of the PA sentence card, if it exists. It works similarly to AltDisplay , and takes priority over AltDisplay in the PA sentence card.","title":"Modifying Pitch Accent Sentence Cards"},{"location":"usage/#cloze-deletion-cards","text":"In other words, \"fill-in-the-blank cards\". This allows you to create cards that tests word audio or sentence audio. To create a cloze deletion card, simply fill in the SeparateClozeDeletionCard field. The words that are hidden are exactly the words that are bolded in the Sentence (or AltDisplay ) field. To create a sentence audio card, copy/paste the sentence into AltDisplay , and bold the entire AltDisplay field (say, with ctrl+a and ctrl+b ). There's currently no shortcut to creating a sentence audio card. TODO: IsSentenceCard -> tests entire sentence, not filled -> currently as is","title":"Cloze Deletion Cards"},{"location":"yomichantemplates/","text":"This page contains extra info on how the custom Yomichan Templates works, and how to customize it even further. Categorization of Dictionaries \u00b6 This section deals with how the custom Yomichan Templates categorizes dictionaries, and how to properly customize them for your setup. To check that your dictionaries are correctly categorized is with the {jpmn-test-dict-type} marker. Under the Anki Templates code, replace Card field with {jpmn-test-dict-type} and press Test . An example output of the above (on the word \u7d50\u69cb) is the following: \u300c\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248\u300d: monolingual \u300c\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248\u300d: monolingual \u300c\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797\u300d: monolingual \u300c\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248\u300d: monolingual \u300c\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9\u300d: monolingual \u300cNHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178\u300d: utility \u300cJMDict Surface Forms\u300d: utility \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300c\u65b0\u548c\u82f1\u300d: bilingual If a dictionary is miscategorized, you will have to edit bilingual-dict-regex or utility-dict-regex at the top of the template code. Monolingual dictionaries are considered to be dictionaries that aren't either of the two above, so no handlebars code has to be changed if one were to use more monolingual dictionaries. To see how to edit the regex, go to this section . Ignoring a Dictionary \u00b6 If you want to see the dictionary on Yomichan but not have it show on Anki, you can use the ignored-dict-regex option. To see how to edit the option, see the section below . Conversely, if you want to not see the dictionary on Yomichan but want it to show up on Anki, see here . Editing the dictionary regex \u00b6 To modify a regex string: Determine the exact tag your dictionary has. To see this, take a word that has a definition in the desired dictionary, and test {jpmn-test-dict-type} like above. The string inside the quotes \u300c\u300d is exactly the tag of the dictionary. Add the dictionary tag to the string, by replacing ADD_x_DICTIONARIES_HERE . For example, if your bilingual dictionary tag is Amazing Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary . If you want to add more than one dictionary, they have to be joined with the | character. For example, if you want to add the bilingual dictionaries Amazing Dictionary and Somewhat-Okay-Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary|Somewhat-Okay-Dictionary . For completeness, here is the modified line for the second example: {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|Amazing Dictionary|Somewhat-Okay-Dictionary)$ {{ ~/set~ }} Selected Text \u00b6 TODO flesh out and layout info better Overriding a Dictionary \u00b6 Highlighting a dictionary overrides the first definition you see with that dictionary. This is togglable by opt-selection-text-dictionary . Overriding the Definition \u00b6 If you select a portion of the definition, the template code will use the dictionary containing the selected definition, and bold the selected portion. This is togglable by opt-selection-text-glossary . Note This is not guaranteed to work: if the highlighted text could not be automatically detected from the custom template code, then it will fallback to simply using the highlighted text. This is most likely to fail if you select formatted parts of text, such as (but not limited to): line breaks furigana across multiple items in a list (common with JMdict) If you do not want to use the entire dictionary, and prefer that only the selected text is shown in the first definition, set opt-selection-text-glossary-attempt-bold to false . TODO gif Options \u00b6 opt-selection-text-enabled disabled -> selection text is ignored enabled -> selection text (if exists) is processed according to the options below: opt-selection-text-dictionary if the selected text is a dictionary, then replaces the PrimaryDefinition with said dictionary opt-selection-text-glossary replaces the PrimaryDefinition with the selected text the dictionary that the selected text will not be detected, so the same dictionary should appear in one of the SecondaryDefinition or ExtraDefinition fields. if both opt-selection-text-dictionary and opt-selection-text-glossary are enabled, the opt-selection-text-dictionary option takes priority over opt-selection-text-glossary , i.e. the dictionary is searched first, then if not found the selected text is used opt-selection-text-glossary-attempt-bold attempts to replace the PrimaryDefinition field with the full glossary value, with only the selected section highlighted do NOT rely on this working all the time: many factors can make it not work (especially if the highlighted text contains custom formatting or newlines) if could not be detected, falls back to the normal selected text opt-selection-text-glossary must be true for this option to have any effect","title":"Yomichan Template Options (TODO)"},{"location":"yomichantemplates/#categorization-of-dictionaries","text":"This section deals with how the custom Yomichan Templates categorizes dictionaries, and how to properly customize them for your setup. To check that your dictionaries are correctly categorized is with the {jpmn-test-dict-type} marker. Under the Anki Templates code, replace Card field with {jpmn-test-dict-type} and press Test . An example output of the above (on the word \u7d50\u69cb) is the following: \u300c\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248\u300d: monolingual \u300c\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248\u300d: monolingual \u300c\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797\u300d: monolingual \u300c\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248\u300d: monolingual \u300c\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9\u300d: monolingual \u300cNHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178\u300d: utility \u300cJMDict Surface Forms\u300d: utility \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300c\u65b0\u548c\u82f1\u300d: bilingual If a dictionary is miscategorized, you will have to edit bilingual-dict-regex or utility-dict-regex at the top of the template code. Monolingual dictionaries are considered to be dictionaries that aren't either of the two above, so no handlebars code has to be changed if one were to use more monolingual dictionaries. To see how to edit the regex, go to this section .","title":"Categorization of Dictionaries"},{"location":"yomichantemplates/#ignoring-a-dictionary","text":"If you want to see the dictionary on Yomichan but not have it show on Anki, you can use the ignored-dict-regex option. To see how to edit the option, see the section below . Conversely, if you want to not see the dictionary on Yomichan but want it to show up on Anki, see here .","title":"Ignoring a Dictionary"},{"location":"yomichantemplates/#editing-the-dictionary-regex","text":"To modify a regex string: Determine the exact tag your dictionary has. To see this, take a word that has a definition in the desired dictionary, and test {jpmn-test-dict-type} like above. The string inside the quotes \u300c\u300d is exactly the tag of the dictionary. Add the dictionary tag to the string, by replacing ADD_x_DICTIONARIES_HERE . For example, if your bilingual dictionary tag is Amazing Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary . If you want to add more than one dictionary, they have to be joined with the | character. For example, if you want to add the bilingual dictionaries Amazing Dictionary and Somewhat-Okay-Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary|Somewhat-Okay-Dictionary . For completeness, here is the modified line for the second example: {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|Amazing Dictionary|Somewhat-Okay-Dictionary)$ {{ ~/set~ }}","title":"Editing the dictionary regex"},{"location":"yomichantemplates/#selected-text","text":"TODO flesh out and layout info better","title":"Selected Text"},{"location":"yomichantemplates/#overriding-a-dictionary","text":"Highlighting a dictionary overrides the first definition you see with that dictionary. This is togglable by opt-selection-text-dictionary .","title":"Overriding a Dictionary"},{"location":"yomichantemplates/#overriding-the-definition","text":"If you select a portion of the definition, the template code will use the dictionary containing the selected definition, and bold the selected portion. This is togglable by opt-selection-text-glossary . Note This is not guaranteed to work: if the highlighted text could not be automatically detected from the custom template code, then it will fallback to simply using the highlighted text. This is most likely to fail if you select formatted parts of text, such as (but not limited to): line breaks furigana across multiple items in a list (common with JMdict) If you do not want to use the entire dictionary, and prefer that only the selected text is shown in the first definition, set opt-selection-text-glossary-attempt-bold to false . TODO gif","title":"Overriding the Definition"},{"location":"yomichantemplates/#options","text":"opt-selection-text-enabled disabled -> selection text is ignored enabled -> selection text (if exists) is processed according to the options below: opt-selection-text-dictionary if the selected text is a dictionary, then replaces the PrimaryDefinition with said dictionary opt-selection-text-glossary replaces the PrimaryDefinition with the selected text the dictionary that the selected text will not be detected, so the same dictionary should appear in one of the SecondaryDefinition or ExtraDefinition fields. if both opt-selection-text-dictionary and opt-selection-text-glossary are enabled, the opt-selection-text-dictionary option takes priority over opt-selection-text-glossary , i.e. the dictionary is searched first, then if not found the selected text is used opt-selection-text-glossary-attempt-bold attempts to replace the PrimaryDefinition field with the full glossary value, with only the selected section highlighted do NOT rely on this working all the time: many factors can make it not work (especially if the highlighted text contains custom formatting or newlines) if could not be detected, falls back to the normal selected text opt-selection-text-glossary must be true for this option to have any effect","title":"Options"}]}