{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to jp-mining-note's documentation! Click here to get started, or head over to the table of contents to the left of this page.","title":"Home"},{"location":"autopa/","text":"This page is dedicated to explaining the details of the auto-pitch-accent module. If you want a quick summary of how to set the the pitch accent in the card, see the usage page . How Pitch Accent is Selected \u00b6 Pitch accent is selected based on the following priority: (1) PAOverride number \u00b6 format is any integer (i.e. 0 , 1 , 3 , etc.) represents mora on which the downstep happens ( 0 means no downstep / \u5e73\u677f) -1 sets the downstep to be right before the last mora other negative numbers won't work ( -1 is a special number for the \u8d77\u4f0f pattern) primary way to set/override the pitch accent (2) PAOverride raw text \u00b6 set to whatever you want to be displayed example is the \u4e0d\u5be9\u8005 example card (TODO picture) (3) PAPositions field \u00b6 first bolded text found this will be chosen otherwise first pitch in first dictionary is chosen this is usually the pitch that is shown on cards (4) AJTWordPitch field \u00b6 occasionally, pitch accent info not found in your Yomichan dictionaries can show up in the auto-generated AJTWordPitch field in this case, as there is no other option, AJTWordPitch field is used Note If the module is disabled in options file , the displayed pitch accent will be exactly what is shown in AJTWordPitch (or PAOverride ). How the Reading is Selected \u00b6 AJT word pitch by default can include devoiced and nasal info usually katakana with long vowel marks some words don't have long vowel marks (i.e. adjectives ending with \u301c\u3057\u3044 will be displayed as \u301c\u30b7\u30a4 and not \u301c\u30b7\u30fc) ajt word reading must match the reading found in WordReading , otherwise this field is ignored some pre-processing is done to turn this reading into hiragana to be properly searched Otherwise, the card uses the reading from WordReading in katakana. This reading can be changed to hiragana, katakana, or katakana with long vowel marks in options file : \"auto-pitch-accent\": { // 0: hiragana // 1: katakana // 2: katakana with long vowel marks \"reading-display-mode\": 1, ... } Colored Pitch Accent \u00b6 The reading, word and pitch overline can be automatically colored in Migaku style colors. This automatic coloring behavior is disabled by default , and must be enabled in the options file : \"colored-pitch-accent\": { \"enabled\": true, ... } A summary of the colors used is shown below: English \u65e5\u672c\u8a9e Example Reading heiban \u5e73\u677f \u81ea\u7136 \u3057\u305c\u3093\uffe3 atamadaka \u982d\u9ad8 \u4eba\u751f \u3058\uff3c\u3093\u305b\u3044 nakadaka \u4e2d\u9ad8 \u5f31\u70b9 \u3058\u3083\u304f\u3066\uff3c\u3093 odaka \u5c3e\u9ad8 \u9053\u5177 \u3069\u3046\u3050\uff3c kifuku \u8d77\u4f0f \u9a5a\u304f \u304a\u3069\u308d\uff3c\u304f TODO gif (change \u507d\u8005 to 0, 1, 2, 4, -1) Note The \u8d77\u4f0f pattern is not automatically detected. To use this color, you must manually set the PAOverride field to -1 . Position Selection \u00b6 In most all cases, the position should be automatically found and the word can be colored. However, there are two cases where the position cannot be automatically calculated: PAPositions is not filled, but AJTWordPitch is. PAOverride is a non-integer value. Override Colors \u00b6 To manually set the color, the main way (as described above) is by manually setting PAOverride to the correct number number. However, if you are using a non-integer value in PAOverride to override the entire display, you must add the correct tag to your note. The exact tags that can be used are shown in the summary table above, under the English and \u65e5\u672c\u8a9e sections. For example, the tag can be heiban , \u5e73\u677f , etc. Note The tag only overrides the pitch accent color, and does not affect the pitch accent representation itself. This fact can be useful for certain exceptions, such as how \u901a\u308b is [1] instead of [2]. If you want to use the \u8d77\u4f0f pattern on \u901a\u308b, you will have to set the PAOverride value to 1 , and then add the \u8d77\u4f0f tag. TODO image of above (without tag, with tag) Pitch Accent Styling Details \u00b6 TODO outdated TODO only if you care about the exact text value TODO what bold does Editing the content in WordPitch requires some special attention. To preserve the style and get expected results, you must use Ctrl + Shift + x when editing the field, and edit the html tags directly. Use other cards as examples of what the html should look like. TODO more details + example (\u83ef) TODO replace with positions :eyes: example of something that has all possible formats (bold, overline, downstep, nasal, devoiced) \u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span >< span class = \"nopron\" > \u30af </ span > \u30bb\u30a4 < b > \u30fb\u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span >< span class = \"nopron\" > \u30af </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30bb\u30a4 </ b > The WordPitch field may have more than one pitch accent for a given word. To choose which pitch accent is correct to the sentence, one can bold the unused pitch accents to grey them out.","title":"Auto Pitch Accent (TODO)"},{"location":"autopa/#how-pitch-accent-is-selected","text":"Pitch accent is selected based on the following priority:","title":"How Pitch Accent is Selected"},{"location":"autopa/#1-paoverride-number","text":"format is any integer (i.e. 0 , 1 , 3 , etc.) represents mora on which the downstep happens ( 0 means no downstep / \u5e73\u677f) -1 sets the downstep to be right before the last mora other negative numbers won't work ( -1 is a special number for the \u8d77\u4f0f pattern) primary way to set/override the pitch accent","title":"(1) PAOverride number"},{"location":"autopa/#2-paoverride-raw-text","text":"set to whatever you want to be displayed example is the \u4e0d\u5be9\u8005 example card (TODO picture)","title":"(2) PAOverride raw text"},{"location":"autopa/#3-papositions-field","text":"first bolded text found this will be chosen otherwise first pitch in first dictionary is chosen this is usually the pitch that is shown on cards","title":"(3) PAPositions field"},{"location":"autopa/#4-ajtwordpitch-field","text":"occasionally, pitch accent info not found in your Yomichan dictionaries can show up in the auto-generated AJTWordPitch field in this case, as there is no other option, AJTWordPitch field is used Note If the module is disabled in options file , the displayed pitch accent will be exactly what is shown in AJTWordPitch (or PAOverride ).","title":"(4) AJTWordPitch field"},{"location":"autopa/#how-the-reading-is-selected","text":"AJT word pitch by default can include devoiced and nasal info usually katakana with long vowel marks some words don't have long vowel marks (i.e. adjectives ending with \u301c\u3057\u3044 will be displayed as \u301c\u30b7\u30a4 and not \u301c\u30b7\u30fc) ajt word reading must match the reading found in WordReading , otherwise this field is ignored some pre-processing is done to turn this reading into hiragana to be properly searched Otherwise, the card uses the reading from WordReading in katakana. This reading can be changed to hiragana, katakana, or katakana with long vowel marks in options file : \"auto-pitch-accent\": { // 0: hiragana // 1: katakana // 2: katakana with long vowel marks \"reading-display-mode\": 1, ... }","title":"How the Reading is Selected"},{"location":"autopa/#colored-pitch-accent","text":"The reading, word and pitch overline can be automatically colored in Migaku style colors. This automatic coloring behavior is disabled by default , and must be enabled in the options file : \"colored-pitch-accent\": { \"enabled\": true, ... } A summary of the colors used is shown below: English \u65e5\u672c\u8a9e Example Reading heiban \u5e73\u677f \u81ea\u7136 \u3057\u305c\u3093\uffe3 atamadaka \u982d\u9ad8 \u4eba\u751f \u3058\uff3c\u3093\u305b\u3044 nakadaka \u4e2d\u9ad8 \u5f31\u70b9 \u3058\u3083\u304f\u3066\uff3c\u3093 odaka \u5c3e\u9ad8 \u9053\u5177 \u3069\u3046\u3050\uff3c kifuku \u8d77\u4f0f \u9a5a\u304f \u304a\u3069\u308d\uff3c\u304f TODO gif (change \u507d\u8005 to 0, 1, 2, 4, -1) Note The \u8d77\u4f0f pattern is not automatically detected. To use this color, you must manually set the PAOverride field to -1 .","title":"Colored Pitch Accent"},{"location":"autopa/#position-selection","text":"In most all cases, the position should be automatically found and the word can be colored. However, there are two cases where the position cannot be automatically calculated: PAPositions is not filled, but AJTWordPitch is. PAOverride is a non-integer value.","title":"Position Selection"},{"location":"autopa/#override-colors","text":"To manually set the color, the main way (as described above) is by manually setting PAOverride to the correct number number. However, if you are using a non-integer value in PAOverride to override the entire display, you must add the correct tag to your note. The exact tags that can be used are shown in the summary table above, under the English and \u65e5\u672c\u8a9e sections. For example, the tag can be heiban , \u5e73\u677f , etc. Note The tag only overrides the pitch accent color, and does not affect the pitch accent representation itself. This fact can be useful for certain exceptions, such as how \u901a\u308b is [1] instead of [2]. If you want to use the \u8d77\u4f0f pattern on \u901a\u308b, you will have to set the PAOverride value to 1 , and then add the \u8d77\u4f0f tag. TODO image of above (without tag, with tag)","title":"Override Colors"},{"location":"autopa/#pitch-accent-styling-details","text":"TODO outdated TODO only if you care about the exact text value TODO what bold does Editing the content in WordPitch requires some special attention. To preserve the style and get expected results, you must use Ctrl + Shift + x when editing the field, and edit the html tags directly. Use other cards as examples of what the html should look like. TODO more details + example (\u83ef) TODO replace with positions :eyes: example of something that has all possible formats (bold, overline, downstep, nasal, devoiced) \u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span >< span class = \"nopron\" > \u30af </ span > \u30bb\u30a4 < b > \u30fb\u30c1\u30e5 < span style = \"text-decoration:overline;\" class = \"pitchoverline\" > \u30fc\u30ab < span class = \"nasal\" > \u00b0 </ span >< span class = \"nopron\" > \u30af </ span ></ span >< span class = \"downstep\" >< span class = \"downstep-inner\" > \ua71c </ span ></ span > \u30bb\u30a4 </ b > The WordPitch field may have more than one pitch accent for a given word. To choose which pitch accent is correct to the sentence, one can bold the unused pitch accents to grey them out.","title":"Pitch Accent Styling Details"},{"location":"cardtypes/","text":"Previously, this note type only had vocab and sentence cards. Although I was originally fine with this, I started to realize some issues with only having these two card types: Vocab cards that require context have to be turned into sentence cards, and Sentence cards take a very long time to review, and can create context-based memories. I found that many vocab cards had to be turned into sentence cards, since either the context was fundamental to understanding the definition, or there were other parts of the sentence that I wanted to test. This lead to many sentence cards, which naturally meant that Anki sessions lasted longer. I attempted to tackle these exact issues by introducing new card types outside of the fundamental vocab and sentence cards. Vocab Card \u00b6 A vocab card simply shows the target word at the front. You test yourself on the reading and definition of the word. How to create: This is the default card type. Nothing has to be done for the card to be a vocab card. Sentence Card \u00b6 A sentence card simply shows the entire sentence at the front. You test yourself on the reading and meaning of the entire sentence. How to create: Fill the IsSentenceCard field. Targetted Sentence Card (TSC) \u00b6 A targetted sentence card is a special case of the sentence card. The sentence is shown at the front, but only the highlighted content (only the word by default) is tested. This allows you to have all the information and context of the sentence, but you don't have to waste your time testing other parts of the sentence. This card type was originally defined here . How to create: Fill the IsTargetedSentenceCard field. Hybrid Cards \u00b6 TODO: update all the gifs and pictures of the hybrid cards Hybrid cards are a group of card types that attempt to combine the power of sentence cards and vocab cards into one. They all have the distinct feature that the word is shown at the front, but the sentence can be shown through some natural means. The primary reason why this exists is to prevent context-based memories. For example, in a TSC or sentence card, you may only remember the tested word due to its surrounding context. Note For all forms of hybrid cards, you can press \"n\" to toggle whether the sentence is shown or not. Hover Vocab Card \u00b6 A hover vocab word shows the tested word at the front. When you hover over the word, you can see the full sentence, with the tested word highlighted. This acts similarly to a vocab card. However, you are given the option to see the full sentence without failing the card. This is also known as the fallback card . Indicator: Yellow & dashed underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. If you are able to guess both the reading and definition of the word, flip the card. Otherwise, hover over the word and guess the reading and definition of the word with the entire sentence. How to create: Fill the IsHoverCard field. Click Vocab Card \u00b6 A click vocab word shows the tested word at the front. When you click on the word, you can see the full sentence, with the tested word highlighted. This card acts as an intermediary between the hover vocab card and the vocab card itself. You must guess the reading BEFORE revealing the sentence, but you can use the sentence to guess the definition. Indicator: White & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, you can optionally click on the word to reveal the entire sentence to guess the definition. In other words, if you can only guess the definition by reading the sentence, then the card should still be passed. How to create: Fill the IsClickCard field. Hover Sentence Card \u00b6 This acts similarly to the hover vocab card. However, the tested content is the entire sentence, so you must hover over the word to test the entire sentence. Indicator: Yellow & solid underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. Regardless of whether you are able to guess the reading and definition of the word, hover over the word and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsHoverCard and IsSentenceCard fields. Click Sentence Card \u00b6 This acts similar to the click vocab card. However, similarly to the hover sentence card, the tested content is the entire display, so you must click the word to test the entire display Indicator: White & solid underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, click on the word to reveal the entire sentence, and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsClickCard and IsSentenceCard fields. Hybrid TSC \u00b6 Similarly to the normal TSC, if you want to use the hover sentence card or click sentence card to only test a specific portion of the sentence, you can bold the desired selection of the sentence and fill IsTargetedSentenceCard . The above example is a Hover TSC, with the last sentence was bolded. Card Creation Summary \u00b6 IsSentenceCard IsTargetedSentenceCard IsClickCard IsHoverCard Result (Card Type) Vocab Card x Sentence Card x TSC x Click Vocab x x Click Sentence x x Click TSC x Hover Vocab x x Hover Sentence x x Hover TSC","title":"Card Types"},{"location":"cardtypes/#vocab-card","text":"A vocab card simply shows the target word at the front. You test yourself on the reading and definition of the word. How to create: This is the default card type. Nothing has to be done for the card to be a vocab card.","title":"Vocab Card"},{"location":"cardtypes/#sentence-card","text":"A sentence card simply shows the entire sentence at the front. You test yourself on the reading and meaning of the entire sentence. How to create: Fill the IsSentenceCard field.","title":"Sentence Card"},{"location":"cardtypes/#targetted-sentence-card-tsc","text":"A targetted sentence card is a special case of the sentence card. The sentence is shown at the front, but only the highlighted content (only the word by default) is tested. This allows you to have all the information and context of the sentence, but you don't have to waste your time testing other parts of the sentence. This card type was originally defined here . How to create: Fill the IsTargetedSentenceCard field.","title":"Targetted Sentence Card (TSC)"},{"location":"cardtypes/#hybrid-cards","text":"TODO: update all the gifs and pictures of the hybrid cards Hybrid cards are a group of card types that attempt to combine the power of sentence cards and vocab cards into one. They all have the distinct feature that the word is shown at the front, but the sentence can be shown through some natural means. The primary reason why this exists is to prevent context-based memories. For example, in a TSC or sentence card, you may only remember the tested word due to its surrounding context. Note For all forms of hybrid cards, you can press \"n\" to toggle whether the sentence is shown or not.","title":"Hybrid Cards"},{"location":"cardtypes/#hover-vocab-card","text":"A hover vocab word shows the tested word at the front. When you hover over the word, you can see the full sentence, with the tested word highlighted. This acts similarly to a vocab card. However, you are given the option to see the full sentence without failing the card. This is also known as the fallback card . Indicator: Yellow & dashed underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. If you are able to guess both the reading and definition of the word, flip the card. Otherwise, hover over the word and guess the reading and definition of the word with the entire sentence. How to create: Fill the IsHoverCard field.","title":"Hover Vocab Card"},{"location":"cardtypes/#click-vocab-card","text":"A click vocab word shows the tested word at the front. When you click on the word, you can see the full sentence, with the tested word highlighted. This card acts as an intermediary between the hover vocab card and the vocab card itself. You must guess the reading BEFORE revealing the sentence, but you can use the sentence to guess the definition. Indicator: White & dashed underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, you can optionally click on the word to reveal the entire sentence to guess the definition. In other words, if you can only guess the definition by reading the sentence, then the card should still be passed. How to create: Fill the IsClickCard field.","title":"Click Vocab Card"},{"location":"cardtypes/#hover-sentence-card","text":"This acts similarly to the hover vocab card. However, the tested content is the entire sentence, so you must hover over the word to test the entire sentence. Indicator: Yellow & solid underline under the word. How to test: Attempt to guess the reading and definition of the word without hovering over the word. Regardless of whether you are able to guess the reading and definition of the word, hover over the word and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsHoverCard and IsSentenceCard fields.","title":"Hover Sentence Card"},{"location":"cardtypes/#click-sentence-card","text":"This acts similar to the click vocab card. However, similarly to the hover sentence card, the tested content is the entire display, so you must click the word to test the entire display Indicator: White & solid underline under the word. How to test: Attempt to guess the reading of the word without hovering over the word. If you are unable to guess the reading of the word before revealing the entire sentence, then the card must be marked as a fail . After guessing the reading of the word, click on the word to reveal the entire sentence, and test yourself on the sentence (as if it was a sentence card). How to create: Fill the IsClickCard and IsSentenceCard fields.","title":"Click Sentence Card"},{"location":"cardtypes/#hybrid-tsc","text":"Similarly to the normal TSC, if you want to use the hover sentence card or click sentence card to only test a specific portion of the sentence, you can bold the desired selection of the sentence and fill IsTargetedSentenceCard . The above example is a Hover TSC, with the last sentence was bolded.","title":"Hybrid TSC"},{"location":"cardtypes/#card-creation-summary","text":"IsSentenceCard IsTargetedSentenceCard IsClickCard IsHoverCard Result (Card Type) Vocab Card x Sentence Card x TSC x Click Vocab x x Click Sentence x x Click TSC x Hover Vocab x x Hover Sentence x x Hover TSC","title":"Card Creation Summary"},{"location":"faq/","text":"Errors \u00b6 These are various errors that can show up on the info circle at the top right. TODO image / gif Javascript handler error: `failed to issue request` \u00b6 This is an indication that Anki-Connect is failing. There are two main reasons that Anki-Connect can fail: Ensure that Anki-Connect is installed. If it is installed, be sure to restart Anki to ensure the add-on is actually running. If you are using an older version of Anki (2.1.49 and below), see the note in the Anki-Connect setup section here . ReferenceError: EFDRC is not defined \u00b6 You are likely using an old version of this note type if you get this, as this error is ignored by default within the options file . See the example options file (under ignored-errors ) for more infomation on this error. General Error Troubleshooting \u00b6 If none of the above worked, the following will be some general troubleshooting tips that can help you figure out what the error is: Do you have a conflicting addon installed? Try disabling all of your add-ons other than the mandatory ones listed in the setup page. Note that you have to restart Anki after disabling the add-ons for the changes to take effect. If it works after this step, please let me know which add-on(s) conflicts with this note type! To do this, re-enable the add-ons one-by-one (remembering to restart Anki each time!). With all of your non-mandatory add-ons disabled, try to upgrade Anki to the latest version, and see if the issue still persists. If this works but an add-on you consider mandatory no longer works, please let me know! (I won't be able to upgrade the add-on for you, but I can potentially point to alternatives and/or add it to the documentation somewhere so others are aware of the issue.) If you can't manage to fix it, please submit an issue! Troubleshooting \u00b6 The sentence quotes are on completely different lines! \u00b6 (TODO) edit the underlying html (ctrl+shift+x) and remove the <div> and </div> tags. happens if you copy/paste directly from certain pages (i.e. texthooker) the sharex clipboard shortcut shouldn't have this problem because it uses <br> instead of <div> The Show/Hide button doesn't do anything. \u00b6 The show/hide button requires that the displayed sentence has a bolded element. For example, this means if the currently displayed sentence comes from the AltDisplay field and nothing in that field is bolded, then the show/hide button will do nothing. The replay audio button plays the sentence, word, and then sentence. \u00b6 This is playing the audio from the front of the card, and then the back of the card, in sequence. To fix it so you only hear the audio displayed in the back of the card, go to: Decks (main anki browser) \u2192 The gear beside your deck \u2192 Options \u2192 Audio section \u2192 Toggle Skip question when replaying answer Pitch accent bold doesn't work on the last downstep \u00b6 TODO weird quirk with css injector only solution I know of atm is to edit the raw html and move the </b> to the very end of the html Card Editing \u00b6 How do I use this note type as an Anime Card? \u00b6 Anime Cards are simply regular vocab cards with a non-collapsable hint field. To use this as an Anime Card, follow the steps to make a vocab card ( here ), and use the HintNotHidden field for your hint. How do I change the default value of a binary field? \u00b6 In Yomichan Format, you can simply toggle the field. Any new card that is created will now default to that default value. Of course, this will not affect existing cards. To change existing cards, I recommend bulk-editing your cards, say, with this add-on . (TODO write a way with python) Note You technically have a second option, and that is to change the code itself (i.e. flip # with ^ for the desired field). However, you should only do this if you know what you are doing, and are fine with knowing that you may lose those changes if you update this note. How do I remove an empty card without deleting the entire note? \u00b6 Quote To remove the empty cards, go to Tools \u2192 Empty Cards in the main window. You will be shown a list of empty cards and be given the option to delete them. Taken from the official Anki documentation . How do I edit the field's raw HTML? \u00b6 ctrl+shift+x Other Questions \u00b6 Where is the (X) folder in Anki? \u00b6 See the official documentation to find the Anki2 folder. Your profile folder is under Anki2/PROFILE_NAME . Your media folder is under Anki2/PROFILE_NAME/collections.media . Your addons folder is under Anki2/addons21 . What card type should I use? \u00b6 The short answer is: whichever one you want. :) The long answer is: whichever one you want, because everyone has their own preferences on what card types they like. I recommend being open about it and experiment with them, to see which one you like. What is the point of the PASilence field? \u00b6 It's a hack to not play audio even if you setup your Anki client to do so. See the PASilence field in the field reference for more information. How do you see the currently installed version of this note? \u00b6 Preview any card. At the top left corner the version should be displayed. For example: Vocab (info circle) JP Mining Note: Version (VERSION DISPLAYED HERE) TODO image Do you plan on supporting any other language other than Japanese? \u00b6 Unfortunately, other languages outside of Japanese will not be supported. The reason for this decision is best explained in the \"When are you going to add support for $MYLANGUAGE?\" question within Yomichan's README : Quote Developing Yomichan requires a decent understanding of Japanese sentence structure and grammar, and other languages are likely to have their own unique set of rules for syntax, grammar, inflection, and so on. Supporting additional languages would not only require many additional changes to the codebase, it would also incur significant maintenance overhead and knowledge demands for the developers. Therefore, suggestions and contributions for supporting new languages will be declined, allowing Yomichan's focus to remain Japanese-centric.","title":"FAQ & Troubleshooting"},{"location":"faq/#errors","text":"These are various errors that can show up on the info circle at the top right. TODO image / gif","title":"Errors"},{"location":"faq/#javascript-handler-error-failed-to-issue-request","text":"This is an indication that Anki-Connect is failing. There are two main reasons that Anki-Connect can fail: Ensure that Anki-Connect is installed. If it is installed, be sure to restart Anki to ensure the add-on is actually running. If you are using an older version of Anki (2.1.49 and below), see the note in the Anki-Connect setup section here .","title":"Javascript handler error: `failed to issue request`"},{"location":"faq/#referenceerror-efdrc-is-not-defined","text":"You are likely using an old version of this note type if you get this, as this error is ignored by default within the options file . See the example options file (under ignored-errors ) for more infomation on this error.","title":"ReferenceError: EFDRC is not defined"},{"location":"faq/#general-error-troubleshooting","text":"If none of the above worked, the following will be some general troubleshooting tips that can help you figure out what the error is: Do you have a conflicting addon installed? Try disabling all of your add-ons other than the mandatory ones listed in the setup page. Note that you have to restart Anki after disabling the add-ons for the changes to take effect. If it works after this step, please let me know which add-on(s) conflicts with this note type! To do this, re-enable the add-ons one-by-one (remembering to restart Anki each time!). With all of your non-mandatory add-ons disabled, try to upgrade Anki to the latest version, and see if the issue still persists. If this works but an add-on you consider mandatory no longer works, please let me know! (I won't be able to upgrade the add-on for you, but I can potentially point to alternatives and/or add it to the documentation somewhere so others are aware of the issue.) If you can't manage to fix it, please submit an issue!","title":"General Error Troubleshooting"},{"location":"faq/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"faq/#the-sentence-quotes-are-on-completely-different-lines","text":"(TODO) edit the underlying html (ctrl+shift+x) and remove the <div> and </div> tags. happens if you copy/paste directly from certain pages (i.e. texthooker) the sharex clipboard shortcut shouldn't have this problem because it uses <br> instead of <div>","title":"The sentence quotes are on completely different lines!"},{"location":"faq/#the-showhide-button-doesnt-do-anything","text":"The show/hide button requires that the displayed sentence has a bolded element. For example, this means if the currently displayed sentence comes from the AltDisplay field and nothing in that field is bolded, then the show/hide button will do nothing.","title":"The Show/Hide button doesn't do anything."},{"location":"faq/#the-replay-audio-button-plays-the-sentence-word-and-then-sentence","text":"This is playing the audio from the front of the card, and then the back of the card, in sequence. To fix it so you only hear the audio displayed in the back of the card, go to: Decks (main anki browser) \u2192 The gear beside your deck \u2192 Options \u2192 Audio section \u2192 Toggle Skip question when replaying answer","title":"The replay audio button plays the sentence, word, and then sentence."},{"location":"faq/#pitch-accent-bold-doesnt-work-on-the-last-downstep","text":"TODO weird quirk with css injector only solution I know of atm is to edit the raw html and move the </b> to the very end of the html","title":"Pitch accent bold doesn't work on the last downstep"},{"location":"faq/#card-editing","text":"","title":"Card Editing"},{"location":"faq/#how-do-i-use-this-note-type-as-an-anime-card","text":"Anime Cards are simply regular vocab cards with a non-collapsable hint field. To use this as an Anime Card, follow the steps to make a vocab card ( here ), and use the HintNotHidden field for your hint.","title":"How do I use this note type as an Anime Card?"},{"location":"faq/#how-do-i-change-the-default-value-of-a-binary-field","text":"In Yomichan Format, you can simply toggle the field. Any new card that is created will now default to that default value. Of course, this will not affect existing cards. To change existing cards, I recommend bulk-editing your cards, say, with this add-on . (TODO write a way with python) Note You technically have a second option, and that is to change the code itself (i.e. flip # with ^ for the desired field). However, you should only do this if you know what you are doing, and are fine with knowing that you may lose those changes if you update this note.","title":"How do I change the default value of a binary field?"},{"location":"faq/#how-do-i-remove-an-empty-card-without-deleting-the-entire-note","text":"Quote To remove the empty cards, go to Tools \u2192 Empty Cards in the main window. You will be shown a list of empty cards and be given the option to delete them. Taken from the official Anki documentation .","title":"How do I remove an empty card without deleting the entire note?"},{"location":"faq/#how-do-i-edit-the-fields-raw-html","text":"ctrl+shift+x","title":"How do I edit the field's raw HTML?"},{"location":"faq/#other-questions","text":"","title":"Other Questions"},{"location":"faq/#where-is-the-x-folder-in-anki","text":"See the official documentation to find the Anki2 folder. Your profile folder is under Anki2/PROFILE_NAME . Your media folder is under Anki2/PROFILE_NAME/collections.media . Your addons folder is under Anki2/addons21 .","title":"Where is the (X) folder in Anki?"},{"location":"faq/#what-card-type-should-i-use","text":"The short answer is: whichever one you want. :) The long answer is: whichever one you want, because everyone has their own preferences on what card types they like. I recommend being open about it and experiment with them, to see which one you like.","title":"What card type should I use?"},{"location":"faq/#what-is-the-point-of-the-pasilence-field","text":"It's a hack to not play audio even if you setup your Anki client to do so. See the PASilence field in the field reference for more information.","title":"What is the point of the PASilence field?"},{"location":"faq/#how-do-you-see-the-currently-installed-version-of-this-note","text":"Preview any card. At the top left corner the version should be displayed. For example: Vocab (info circle) JP Mining Note: Version (VERSION DISPLAYED HERE) TODO image","title":"How do you see the currently installed version of this note?"},{"location":"faq/#do-you-plan-on-supporting-any-other-language-other-than-japanese","text":"Unfortunately, other languages outside of Japanese will not be supported. The reason for this decision is best explained in the \"When are you going to add support for $MYLANGUAGE?\" question within Yomichan's README : Quote Developing Yomichan requires a decent understanding of Japanese sentence structure and grammar, and other languages are likely to have their own unique set of rules for syntax, grammar, inflection, and so on. Supporting additional languages would not only require many additional changes to the codebase, it would also incur significant maintenance overhead and knowledge demands for the developers. Therefore, suggestions and contributions for supporting new languages will be declined, allowing Yomichan's focus to remain Japanese-centric.","title":"Do you plan on supporting any other language other than Japanese?"},{"location":"importing/","text":"Transfer Existing Notes \u00b6 This section is dedicated to explaining how you can change other Anki cards into this note format. Note If you are simply importing old JPMN notes, updating JPMN will properly update all the notes in place. See this section instead. Introduction \u00b6 Unfortunately, there are so many card formats out there that it would be impossible to cover how to import from every format with detailed rigor. Instead, this section will give you some general tips on operations that will likely be common across most or all formats, as well as present a small example for Anime Cards. Additionally, although you maybe able to import most of the card, it is unlikely that you will have complete 100% full functionality after importing the notes. The biggest example is frequency list information, as it requires special HTML + css formatting that can only be specified in the Yomichan Templates section. Prerequisites \u00b6 Before doing anything that affects your Anki collection in a major way, please make a complete backup of your collection (Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package ). Note Importing your previous notes shouldn't change your media files at all. However I recommend exporting with media just in case, so long as you have the disk space for it. As explained further below, you will likely need to batch edit your newly imported notes. There are two ways you can do this: If you have python , then you're already set. Otherwise, you require a batch editing add-on. I recommend this one . Anki \u00b6 Anki provides a feature to switch between note types, without affecting scheduling information. To do this, follow the proceeding steps: Head to the Card Browser window (Main Window \u2192 Browse ) Select all the cards that you want to switch Tip: ctrl+a selects all cards in the browser. Right click the selection \u2192 Notes \u2192 Change Note Type... (TODO gif) Mapping Fields \u00b6 Here is where I can't give specific advice, as every note is different. However, here are a few tips: Your card likely doesn't have a separate Key and Word field, and instead only contains one Word field. To import this correctly into JPMN, make sure JPMN's Key and Word field are exactly your old card's Word field. WordPitch and SentenceReading can be left empty, as the AJT plugins can batch generate both word pitches and sentence furigana. You may have some word pitch fields already in your card. The only thing you should import is the pitch accent graphs, into the PAGraphs field. PA positions and PA text should be ignored. You may have frequency list info already in your card. As a quick warning, although you are free to import that info it may not work as you would expect in the JPMN card. Because there's no standard way to store this data, there is no convenience function to convert it to the proper format. See the field reference (TODO link) for more information about other fields. An example with Anime cards is shown below. Click here to see the example for Anime Cards. Anki Fields Yomichan Format Key front Word front WordReading Reading PAOverride AJTWordPitch PrimaryDefinition Glossary Sentence SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard IsHoverCard IsTargetedSentenceCard PAShowInfo PATestOnlyWord PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Hint Picture Picture WordAudio WordAudio SentenceAudio SentenceAudio PAGraphs Graph PAPositions PASilence FrequenciesStylized FrequencySort SecondaryDefinition ExtraDefinitions UtilityDictionaries Comment Note Anything not specified should be set to (Nothing) Batch Editing \u00b6 After switching your notes, you will have to do the following 3 things: (1) Batch generate pitch accents \u00b6 Head to the Card Browser window. Select all of your newly imported notes. Tip: the query \"note:JP Mining Note\" should reveal all of your newly imported notes. Make sure you include the double quotes in the query search. Head over to Edit (top left corner) \u2192 Bulk-add pitch accents . (TODO gif) (2) Batch generate sentence furigana \u00b6 Head to the Card Browser window. Select all of your newly imported notes. Head over to Edit (top left corner) \u2192 Bulk-add furigana . (3) Batch set PASilence field \u00b6 Head to the Card Browser window. Select all of your newly imported notes. The following step differs if you are using python or the Batch Note Editing Add-on. If you are using python : # assuming you are at the root of the repo, # i.e. after the `git clone ...` and `cd jp-mining-note` cd ./tools # make sure you have Anki open and Anki-Connect installed! python3 ./batch.py -f \"set_pasilence_field\" Otherwise, if you are using the add-on, follow the instructions in the videos Head over to Edit (top left corner) \u2192 Batch Edit... . Set the content to be [sound:_silence.wav] . Set the field to be PASilence . Click on Replace . See the official add-on video here for an example of how to do this. Final Notes \u00b6 Auto-generating frequency info (with the correct css, html, etc.) doesn't seem trivial, and I currently provide no way of doing that (primarily because I'm not sure how to do it in the first place). If you know of a way or would like to help me out with doing this, please let me know!","title":"Transfer Existing Notes"},{"location":"importing/#transfer-existing-notes","text":"This section is dedicated to explaining how you can change other Anki cards into this note format. Note If you are simply importing old JPMN notes, updating JPMN will properly update all the notes in place. See this section instead.","title":"Transfer Existing Notes"},{"location":"importing/#introduction","text":"Unfortunately, there are so many card formats out there that it would be impossible to cover how to import from every format with detailed rigor. Instead, this section will give you some general tips on operations that will likely be common across most or all formats, as well as present a small example for Anime Cards. Additionally, although you maybe able to import most of the card, it is unlikely that you will have complete 100% full functionality after importing the notes. The biggest example is frequency list information, as it requires special HTML + css formatting that can only be specified in the Yomichan Templates section.","title":"Introduction"},{"location":"importing/#prerequisites","text":"Before doing anything that affects your Anki collection in a major way, please make a complete backup of your collection (Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package ). Note Importing your previous notes shouldn't change your media files at all. However I recommend exporting with media just in case, so long as you have the disk space for it. As explained further below, you will likely need to batch edit your newly imported notes. There are two ways you can do this: If you have python , then you're already set. Otherwise, you require a batch editing add-on. I recommend this one .","title":"Prerequisites"},{"location":"importing/#anki","text":"Anki provides a feature to switch between note types, without affecting scheduling information. To do this, follow the proceeding steps: Head to the Card Browser window (Main Window \u2192 Browse ) Select all the cards that you want to switch Tip: ctrl+a selects all cards in the browser. Right click the selection \u2192 Notes \u2192 Change Note Type... (TODO gif)","title":"Anki"},{"location":"importing/#mapping-fields","text":"Here is where I can't give specific advice, as every note is different. However, here are a few tips: Your card likely doesn't have a separate Key and Word field, and instead only contains one Word field. To import this correctly into JPMN, make sure JPMN's Key and Word field are exactly your old card's Word field. WordPitch and SentenceReading can be left empty, as the AJT plugins can batch generate both word pitches and sentence furigana. You may have some word pitch fields already in your card. The only thing you should import is the pitch accent graphs, into the PAGraphs field. PA positions and PA text should be ignored. You may have frequency list info already in your card. As a quick warning, although you are free to import that info it may not work as you would expect in the JPMN card. Because there's no standard way to store this data, there is no convenience function to convert it to the proper format. See the field reference (TODO link) for more information about other fields. An example with Anime cards is shown below. Click here to see the example for Anime Cards. Anki Fields Yomichan Format Key front Word front WordReading Reading PAOverride AJTWordPitch PrimaryDefinition Glossary Sentence SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard IsHoverCard IsTargetedSentenceCard PAShowInfo PATestOnlyWord PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Hint Picture Picture WordAudio WordAudio SentenceAudio SentenceAudio PAGraphs Graph PAPositions PASilence FrequenciesStylized FrequencySort SecondaryDefinition ExtraDefinitions UtilityDictionaries Comment Note Anything not specified should be set to (Nothing)","title":"Mapping Fields"},{"location":"importing/#batch-editing","text":"After switching your notes, you will have to do the following 3 things:","title":"Batch Editing"},{"location":"importing/#final-notes","text":"Auto-generating frequency info (with the correct css, html, etc.) doesn't seem trivial, and I currently provide no way of doing that (primarily because I'm not sure how to do it in the first place). If you know of a way or would like to help me out with doing this, please let me know!","title":"Final Notes"},{"location":"jpresources/","text":"A collection of tips and tricks, primarily related to CSS and Yomichan templates. This page was inspired by Marv's resources page , which has a bunch of different but equally awesome resources. I highly recommend checking it out! If you encounter any problems, have any questions, etc., feel free to contact me on discord Aquafina water bottle#3026 , or submit an issue . I exist on the TheMoeWay and Refold (Japanese) servers. CSS (Yomichan) \u00b6 How to Add Custom CSS In Yomichan \u00b6 To add custom CSS in Yomichan, do the following: Head over to Yomichan settings (Yomichan extension marker -> cogwheel) Go to Appearance \u2192 Configure custom CSS... Add the CSS to the top section. Close the window. Not selecting or copying furigana \u00b6 If you want to select / copy the main word within Yomichan without copying the furigana, you can use the following CSS: . headword-term ruby rt { user-select : none ; } Note The above is actually general enough to use for Anki cards itself, say with the following CSS: ruby rt { user-select : none ; } Unfortunately, the above doesn't seem to work on Linux (tested on Ubuntu / Xfce, Anki Qt6 2.1.54). Limiting the number of frequency lists \u00b6 /* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; } (Thanks Marv#5144 for the CSS) Limiting the number of pitch accent dictionaries \u00b6 The following CSS displays only the first 2 pitch accent dictionaries: /* Only shows the first 2 pitch accent dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } Make the pitch accent dictionary text a bit grey by default, and to make specifically the \"NHK\" and \"\u5927\u8f9e\u6cc9\" white (change these two to any dictionary you find to be of higher quality) /* Greys out all pitch accent dictionary names */ /* Sets NHK and \u5927\u8f9e\u6cc9 pitch accent dictionaries to a white name */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } Hide the dictionary, but allow it to be used by Anki \u00b6 The default way to hide a dictionary is by disabling the dictionary under Yomichan's Dictionaries section. However, if you disable the dictionary, you cannot export it into Anki, which is a problem if you are using a bilingual profile but you want to export monolingual definitions. Steps : 1. Ensure that the dictionary is enabled in your Yomichan profile. 1. Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] { display : none ; } Click here to see an example. li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } Hide bilingual definitions until hover \u00b6 Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'DICTIONARY' ] : hover . gloss-list { opacity : 1 ; } Click here to see an example. li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } Remove the \"Add Reading\" button \u00b6 button [ title ^= \"Add reading\" ] { display : none ; } Left: without CSS. Right: with CSS. CSS (Other) \u00b6 Ensuring \u300c\u300d properly quotes the text \u00b6 . text { text-indent : -1 em ; padding-left : 1 em ; } On the example to the right, the first quote is the standard display without any custom CSS. The second quote is with the aforementioned CSS. An example JSFiddle can be found here . Changing the Japanese font on Discord \u00b6 Note Discord's codebase is always subject to change, so this method may not work in the future. Get BetterDiscord so you can use custom CSS. In Discord Settings -> Custom CSS section, add the following: : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , YOUR-PREFERRED-FONT , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Click here to see an example. : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Click here to see Discord's default CSS. : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Yomichan Templates / Handlebars \u00b6 How to Edit Yomichan Fields \u00b6 Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Note that the above showcases option 2 of this example . How to Edit Yomichan Templates (Handlebars) \u00b6 Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... Grab only the first pitch accent dictionary \u00b6 Add the following template code to Yomichan templates: {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }} <ol> {{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} <li> {{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} No pitch accent data {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'position' ~ }} {{ /inline }} You can now use the following in Yomichan Fields: {pitch-accents-single-dict} {pitch-accent-graphs-single-dict} {pitch-accent-positions-single-dict} Click here to see a modified version for Anime Cards. {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ #regexReplace \"<(.|\\n)*?>\" \"\" }}{{ ~> pitch-accent-list-single-dict format = 'position' ~ }}{{ /regexReplace }} {{ /inline }} (Thanks An#7416 for the template code) Automatically highlight the tested word within the sentence upon card creation \u00b6 (Option 1) Bold only Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} (Option 2) Bold + Styling Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Anki Note CSS : b { color : #fffd9e ; /* bright yellow */ } If your card template is formatted like <div class=\"sentence\">{{ Sentence }}</div> : . sentence b { color : #fffd9e ; /* bright yellow */ /* if you want to make the word not bolded, un-comment the following */ /*font-weight: normal;*/ } (Option 3) Custom div Yomichan Fields : {cloze-prefix}<span class=\"word-highlight\">{cloze-body}</span>{cloze-suffix} Anki Note CSS : . word-highlight { color : #fffd9e ; } Note I personally prefer using Option 2 (bold + styling) over a custom div because it makes editing the note easier. For example, if you want to edit the highlighted region, you only have to bold the desired region (say, with ctrl+b) instead of having to edit the raw HTML of the field (say, with ctrl+shift+x). Export only the selected text (only if text is selected) \u00b6 Allows you to export only a section of a glossary by highlighting over it, and uses the glossary by default if you don't have anything highlighted. {{#*inline \"selection-text\"}} {{~#if (op \"!==\" (getMedia \"selectionText\") \"\")~}} {{~#getMedia \"selectionText\"}}{{/getMedia~}} {{~else~}} {{~> glossary ~}} {{/if~}} {{/inline}} Note Related Github issue . Grab only the first dictionary \u00b6 The following grabs the first dictionary, but with every definition within said dictionary. For further customization on how the first dictionary is selected (say, for automatic bilingual / monolingual separation), see the handlebars code used by JPMN here . {{ ~#*inline \"glossary-first\" ~ }} {{ ~#scope~ }} {{ ~#set \"first-dictionary\" null }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#if (op \"== = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" != = \" null (get \" first-dictionary \"))~}} <div style=\" text-align : left ; \"><ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" first-dictionary \" )) ~ }} <li> {{ ~> glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol></div> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} Further Reading \u00b6 The documentation I used: Yomichan template helper functions Yomichan template structure Example template code can be found here: Markers for individual dictionaries: here This has certain extended capabilities over my template code, such as removing the first line. Template code for this note: here and here Old template code for this note (NO LONGER USED / MAINTAINED): here ShareX \u00b6 TODO make non-point form main steps from are https://rentry.co/mining (webarchive link without pictures here ) all powershell commands rewritten to be readable + work with jp-mining-note by default 1 liners are generated from this file note that f3 keybinds do NOT record media, requires slightly different setup - TODO document - iirc grabs current window picture + deletes after (the only purpose of the f3 keybinds is to execute ankiconnect calls in powershell) f1: screenshot and clipboard \u00b6 adds the image to the note adds a tag to the note (tag is exactly the window name of the current application) adds the clipboard to AdditionalNotes (I use this for copying/pasting context) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne \\\"\\\"}) -join \\\"<br>\\\"; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; AdditionalNotes = $clipboard; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag']; } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $clipboard = (Get-Clipboard | where{$_ -ne \"\"}) -join \"<br>\"; # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \"<img data-editor-shrink=`\"true`\" src=`\"$media_name`\">\"; AdditionalNotes = $clipboard; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag']; } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } }; shift+f1: screenshot (only) \u00b6 the above without clipboard (adds image and tag) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \"<img data-editor-shrink=`\"true`\" src=`\"$media_name`\">\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } }; f2: audio \u00b6 adds audio to anki -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \\\"[sound:$media_name]\\\"; } } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \"[sound:$media_name]\"; } } } }; shift+f3: update sentence \u00b6 update the sentence without losing the bold (python script + clipboard) remove sentence reading good for when the sentence just doesn't match -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; # may not replace anything $result_sent = $clipboard.replace($bolded, \"<b>$bolded</b>\"); } else { # default $result_sent = $clipboard; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } }; ctrl+f3 - copy from previous: \u00b6 set additional notes and picture to previous card also copy all tags good for adding more than 1 sentence with the same text box -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $prev_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($prev_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = $prev_note_data.result.fields.Picture.value; AdditionalNotes = $prev_note_data.result.fields.AdditionalNotes.value; } } } }; foreach ($tag in $prev_note_data.result.tags) { Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $prev_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($prev_note_id); } }; # copies picture & additional notes to current note Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = $prev_note_data.result.fields.Picture.value; AdditionalNotes = $prev_note_data.result.fields.AdditionalNotes.value; } } } }; # copies tags foreach ($tag in $prev_note_data.result.tags) { Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } } }; ctrl+shift+f3: fix sentence and freq \u00b6 update the previous note with the current's frequency, sentence & sentence reading remove current note ! good for the orthographic dict! -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $prev_note_id; fields = @{ FrequenciesStylized = $curr_note_data.result.fields.FrequenciesStylized.value; Sentence = $curr_note_data.result.fields.Sentence.value; SentenceReading = $curr_note_data.result.fields.SentenceReading.value; } } } }; Run-Json @{ action = 'deleteNotes'; version = 6; params = @{ notes = @($curr_note_id); } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; # copies frequency, sentence, sentence reading to previous note Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $prev_note_id; fields = @{ FrequenciesStylized = $curr_note_data.result.fields.FrequenciesStylized.value; Sentence = $curr_note_data.result.fields.Sentence.value; SentenceReading = $curr_note_data.result.fields.SentenceReading.value; } } } }; # removes current note Run-Json @{ action = 'deleteNotes'; version = 6; params = @{ notes = @($curr_note_id); } }; Other Random Resources \u00b6 Animecards Yomichan setup Their Anki note type TheMoeWay Yomichan setup Cade's guide to optimizing Anki Mining guides: \u00b6 Xelieu's mining guide (Windows, Android) stegatxins0's mining guide (Windows, Kindle) Shiki's mining workflow (cross platform with ASBPlayer) Tigy01's mining workflow (cross platform with ASBPlayer) Mikagu pitch accent alternatives \u00b6 migaku updated fork of migaku to be updated for anki version 2.1.50+ anki-jrp completely stand-alone plugin from migaku with a completely different codebase only does one thing: adds pitch accent colors (along with furigana) How to Mokuro \u00b6 main mokuro page lazy guide (recommend) (windows users) make sure to check the \"add python to path\" on install make sure online processing (google colab) is using the gpu to speed up the process basic setup guide doesn't include how to process online, compared to the one above","title":"Various Resources"},{"location":"jpresources/#css-yomichan","text":"","title":"CSS (Yomichan)"},{"location":"jpresources/#how-to-add-custom-css-in-yomichan","text":"To add custom CSS in Yomichan, do the following: Head over to Yomichan settings (Yomichan extension marker -> cogwheel) Go to Appearance \u2192 Configure custom CSS... Add the CSS to the top section. Close the window.","title":"How to Add Custom CSS In Yomichan"},{"location":"jpresources/#not-selecting-or-copying-furigana","text":"If you want to select / copy the main word within Yomichan without copying the furigana, you can use the following CSS: . headword-term ruby rt { user-select : none ; } Note The above is actually general enough to use for Anki cards itself, say with the following CSS: ruby rt { user-select : none ; } Unfortunately, the above doesn't seem to work on Linux (tested on Ubuntu / Xfce, Anki Qt6 2.1.54).","title":"Not selecting or copying furigana"},{"location":"jpresources/#limiting-the-number-of-frequency-lists","text":"/* Only shows the first 2 frequency lists */ span . frequency-group-item : nth-child ( n + 3 ) { display : none ; } (Thanks Marv#5144 for the CSS)","title":"Limiting the number of frequency lists"},{"location":"jpresources/#limiting-the-number-of-pitch-accent-dictionaries","text":"The following CSS displays only the first 2 pitch accent dictionaries: /* Only shows the first 2 pitch accent dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } Make the pitch accent dictionary text a bit grey by default, and to make specifically the \"NHK\" and \"\u5927\u8f9e\u6cc9\" white (change these two to any dictionary you find to be of higher quality) /* Greys out all pitch accent dictionary names */ /* Sets NHK and \u5927\u8f9e\u6cc9 pitch accent dictionaries to a white name */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; }","title":"Limiting the number of pitch accent dictionaries"},{"location":"jpresources/#hide-the-dictionary-but-allow-it-to-be-used-by-anki","text":"The default way to hide a dictionary is by disabling the dictionary under Yomichan's Dictionaries section. However, if you disable the dictionary, you cannot export it into Anki, which is a problem if you are using a bilingual profile but you want to export monolingual definitions. Steps : 1. Ensure that the dictionary is enabled in your Yomichan profile. 1. Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] { display : none ; } Click here to see an example. li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; }","title":"Hide the dictionary, but allow it to be used by Anki"},{"location":"jpresources/#hide-bilingual-definitions-until-hover","text":"Add the following CSS for the desired dictionaries (this has to be done for each individual dictionary): li . definition-item [ data-dictionary = 'DICTIONARY' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'DICTIONARY' ] : hover . gloss-list { opacity : 1 ; } Click here to see an example. li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; }","title":"Hide bilingual definitions until hover"},{"location":"jpresources/#remove-the-add-reading-button","text":"button [ title ^= \"Add reading\" ] { display : none ; } Left: without CSS. Right: with CSS.","title":"Remove the \"Add Reading\" button"},{"location":"jpresources/#css-other","text":"","title":"CSS (Other)"},{"location":"jpresources/#ensuring-properly-quotes-the-text","text":". text { text-indent : -1 em ; padding-left : 1 em ; } On the example to the right, the first quote is the standard display without any custom CSS. The second quote is with the aforementioned CSS. An example JSFiddle can be found here .","title":"Ensuring \u300c\u300d properly quotes the text"},{"location":"jpresources/#changing-the-japanese-font-on-discord","text":"Note Discord's codebase is always subject to change, so this method may not work in the future. Get BetterDiscord so you can use custom CSS. In Discord Settings -> Custom CSS section, add the following: : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , YOUR-PREFERRED-FONT , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Click here to see an example. : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } Click here to see Discord's default CSS. : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \u30e1\u30a4\u30ea\u30aa , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; }","title":"Changing the Japanese font on Discord"},{"location":"jpresources/#yomichan-templates-handlebars","text":"","title":"Yomichan Templates / Handlebars"},{"location":"jpresources/#how-to-edit-yomichan-fields","text":"Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Note that the above showcases option 2 of this example .","title":"How to Edit Yomichan Fields"},{"location":"jpresources/#how-to-edit-yomichan-templates-handlebars","text":"Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates...","title":"How to Edit Yomichan Templates (Handlebars)"},{"location":"jpresources/#grab-only-the-first-pitch-accent-dictionary","text":"Add the following template code to Yomichan templates: {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }} <ol> {{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} <li> {{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} No pitch accent data {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'position' ~ }} {{ /inline }} You can now use the following in Yomichan Fields: {pitch-accents-single-dict} {pitch-accent-graphs-single-dict} {pitch-accent-positions-single-dict} Click here to see a modified version for Anime Cards. {{ #*inline \"pitch-accent-list-single-dict\" }} {{ ~#if (op \">\" pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~#eachUpTo pitches 1~ }} {{ ~#each pitches ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~> pitch-accent-item format = ../../format ~ }} {{ ~#if (op \">\" ../../pitchCount 1 ) ~ }}{{ ~/if~ }} {{ ~/each~ }} {{ ~else~ }} {{ ~/eachUpTo~ }} {{ /inline }} {{ #*inline \"pitch-accents-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'text' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-graphs-single-dict\" }} {{ ~> pitch-accent-list-single-dict format = 'graph' ~ }} {{ /inline }} {{ #*inline \"pitch-accent-positions-single-dict\" }} {{ #regexReplace \"<(.|\\n)*?>\" \"\" }}{{ ~> pitch-accent-list-single-dict format = 'position' ~ }}{{ /regexReplace }} {{ /inline }} (Thanks An#7416 for the template code)","title":"Grab only the first pitch accent dictionary"},{"location":"jpresources/#automatically-highlight-the-tested-word-within-the-sentence-upon-card-creation","text":"(Option 1) Bold only Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} (Option 2) Bold + Styling Yomichan Fields : {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} Anki Note CSS : b { color : #fffd9e ; /* bright yellow */ } If your card template is formatted like <div class=\"sentence\">{{ Sentence }}</div> : . sentence b { color : #fffd9e ; /* bright yellow */ /* if you want to make the word not bolded, un-comment the following */ /*font-weight: normal;*/ } (Option 3) Custom div Yomichan Fields : {cloze-prefix}<span class=\"word-highlight\">{cloze-body}</span>{cloze-suffix} Anki Note CSS : . word-highlight { color : #fffd9e ; } Note I personally prefer using Option 2 (bold + styling) over a custom div because it makes editing the note easier. For example, if you want to edit the highlighted region, you only have to bold the desired region (say, with ctrl+b) instead of having to edit the raw HTML of the field (say, with ctrl+shift+x).","title":"Automatically highlight the tested word within the sentence upon card creation"},{"location":"jpresources/#export-only-the-selected-text-only-if-text-is-selected","text":"Allows you to export only a section of a glossary by highlighting over it, and uses the glossary by default if you don't have anything highlighted. {{#*inline \"selection-text\"}} {{~#if (op \"!==\" (getMedia \"selectionText\") \"\")~}} {{~#getMedia \"selectionText\"}}{{/getMedia~}} {{~else~}} {{~> glossary ~}} {{/if~}} {{/inline}} Note Related Github issue .","title":"Export only the selected text (only if text is selected)"},{"location":"jpresources/#grab-only-the-first-dictionary","text":"The following grabs the first dictionary, but with every definition within said dictionary. For further customization on how the first dictionary is selected (say, for automatic bilingual / monolingual separation), see the handlebars code used by JPMN here . {{ ~#*inline \"glossary-first\" ~ }} {{ ~#scope~ }} {{ ~#set \"first-dictionary\" null }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#if (op \"== = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/each~}} {{~#if (op \" != = \" null (get \" first-dictionary \"))~}} <div style=\" text-align : left ; \"><ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" first-dictionary \" )) ~ }} <li> {{ ~> glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol></div> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }}","title":"Grab only the first dictionary"},{"location":"jpresources/#further-reading","text":"The documentation I used: Yomichan template helper functions Yomichan template structure Example template code can be found here: Markers for individual dictionaries: here This has certain extended capabilities over my template code, such as removing the first line. Template code for this note: here and here Old template code for this note (NO LONGER USED / MAINTAINED): here","title":"Further Reading"},{"location":"jpresources/#sharex","text":"TODO make non-point form main steps from are https://rentry.co/mining (webarchive link without pictures here ) all powershell commands rewritten to be readable + work with jp-mining-note by default 1 liners are generated from this file note that f3 keybinds do NOT record media, requires slightly different setup - TODO document - iirc grabs current window picture + deletes after (the only purpose of the f3 keybinds is to execute ankiconnect calls in powershell)","title":"ShareX"},{"location":"jpresources/#f1-screenshot-and-clipboard","text":"adds the image to the note adds a tag to the note (tag is exactly the window name of the current application) adds the clipboard to AdditionalNotes (I use this for copying/pasting context) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne \\\"\\\"}) -join \\\"<br>\\\"; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; AdditionalNotes = $clipboard; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag']; } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $clipboard = (Get-Clipboard | where{$_ -ne \"\"}) -join \"<br>\"; # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \"<img data-editor-shrink=`\"true`\" src=`\"$media_name`\">\"; AdditionalNotes = $clipboard; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag']; } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };","title":"f1: screenshot and clipboard"},{"location":"jpresources/#shiftf1-screenshot-only","text":"the above without clipboard (adds image and tag) -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \\\"<img data-editor-shrink=`\\\"true`\\\" src=`\\\"$media_name`\\\">\\\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = \"<img data-editor-shrink=`\"true`\" src=`\"$media_name`\">\"; } } } }; if ($media_name -match '(?<tag>.+)_.*') { $tag = $matches['tag'] } Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } };","title":"shift+f1: screenshot (only)"},{"location":"jpresources/#f2-audio","text":"adds audio to anki -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \\\"[sound:$media_name]\\\"; } } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) # gets only the file name $media_name = '$input' | Split-Path -leaf; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ SentenceAudio = \"[sound:$media_name]\"; } } } };","title":"f2: audio"},{"location":"jpresources/#shiftf3-update-sentence","text":"update the sentence without losing the bold (python script + clipboard) remove sentence reading good for when the sentence just doesn't match -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; $result_sent = $clipboard.replace($bolded, \\\"<b>$bolded</b>\\\"); } else { $result_sent = $clipboard; }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $clipboard = (Get-Clipboard | where{$_ -ne ''}) -join ''; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; $curr_note_sent = $curr_note_data.result.fields.Sentence.value; $result_sent = ''; if ($curr_note_sent -match '<b>(?<bolded>.+)</b>') { $bolded = $matches['bolded']; # may not replace anything $result_sent = $clipboard.replace($bolded, \"<b>$bolded</b>\"); } else { # default $result_sent = $clipboard; }; # updates current card with result_sent Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Sentence = $result_sent; SentenceReading = ''; } } } };","title":"shift+f3: update sentence"},{"location":"jpresources/#ctrlf3-copy-from-previous","text":"set additional notes and picture to previous card also copy all tags good for adding more than 1 sentence with the same text box -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $prev_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($prev_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = $prev_note_data.result.fields.Picture.value; AdditionalNotes = $prev_note_data.result.fields.AdditionalNotes.value; } } } }; foreach ($tag in $prev_note_data.result.tags) { Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $prev_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($prev_note_id); } }; # copies picture & additional notes to current note Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $curr_note_id; fields = @{ Picture = $prev_note_data.result.fields.Picture.value; AdditionalNotes = $prev_note_data.result.fields.AdditionalNotes.value; } } } }; # copies tags foreach ($tag in $prev_note_data.result.tags) { Run-Json @{ action = 'addTags'; version = 6; params = @{ notes = @($curr_note_id); tags = $tag; } } };","title":"ctrl+f3 - copy from previous:"},{"location":"jpresources/#ctrlshiftf3-fix-sentence-and-freq","text":"update the previous note with the current's frequency, sentence & sentence reading remove current note ! good for the orthographic dict! -NoProfile -Command \"function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType 'application/json; charset=UTF-8' -Body $json; return $data; }; $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $prev_note_id; fields = @{ FrequenciesStylized = $curr_note_data.result.fields.FrequenciesStylized.value; Sentence = $curr_note_data.result.fields.Sentence.value; SentenceReading = $curr_note_data.result.fields.SentenceReading.value; } } } }; Run-Json @{ action = 'deleteNotes'; version = 6; params = @{ notes = @($curr_note_id); } };\" Click here to see the original code. # (common begin) function Run-Json { param( $json_map ); $json = $json_map | ConvertTo-Json -Depth 5; $data = Invoke-RestMethod -Uri http://127.0.0.1:8765 -Method Post -ContentType ` 'application/json; charset=UTF-8' -Body $json; return $data; }; # (common end) $added_notes = Run-Json @{ action = 'findNotes'; version = 6; params = @{ query = 'added:1'; } }; $sorted_list = $added_notes.result | Sort-Object -Descending {[Long]$_}; $prev_note_id = $sorted_list[1]; $curr_note_id = $sorted_list[0]; $curr_note_data = Run-Json @{ action = 'notesInfo'; version = 6; params = @{ notes = @($curr_note_id); } }; # copies frequency, sentence, sentence reading to previous note Run-Json @{ action = 'updateNoteFields'; version = 6; params = @{ note = @{ id = $prev_note_id; fields = @{ FrequenciesStylized = $curr_note_data.result.fields.FrequenciesStylized.value; Sentence = $curr_note_data.result.fields.Sentence.value; SentenceReading = $curr_note_data.result.fields.SentenceReading.value; } } } }; # removes current note Run-Json @{ action = 'deleteNotes'; version = 6; params = @{ notes = @($curr_note_id); } };","title":"ctrl+shift+f3: fix sentence and freq"},{"location":"jpresources/#other-random-resources","text":"Animecards Yomichan setup Their Anki note type TheMoeWay Yomichan setup Cade's guide to optimizing Anki","title":"Other Random Resources"},{"location":"jpresources/#mining-guides","text":"Xelieu's mining guide (Windows, Android) stegatxins0's mining guide (Windows, Kindle) Shiki's mining workflow (cross platform with ASBPlayer) Tigy01's mining workflow (cross platform with ASBPlayer)","title":"Mining guides:"},{"location":"jpresources/#mikagu-pitch-accent-alternatives","text":"migaku updated fork of migaku to be updated for anki version 2.1.50+ anki-jrp completely stand-alone plugin from migaku with a completely different codebase only does one thing: adds pitch accent colors (along with furigana)","title":"Mikagu pitch accent alternatives"},{"location":"jpresources/#how-to-mokuro","text":"main mokuro page lazy guide (recommend) (windows users) make sure to check the \"add python to path\" on install make sure online processing (google colab) is using the gpu to speed up the process basic setup guide doesn't include how to process online, compared to the one above","title":"How to Mokuro"},{"location":"kanjihover/","text":"TODO flesh out Result Queries & Categorization \u00b6 The exact results shown through Kanji Hover is not completely trivial, so this process is explained below. The words are searched and sorted into 3 categories: The two oldest, not new cards (already reviewed before, in order of add date) The two latest, not new cards (the most recent two cards that you have reviewed, in order of add date) The two oldest, new cards (the first 2 new cards that you will see with the kanji) The last category (the new cards) are greyed out to show that you haven't reviewed the card yet (i.e. you may not know the word yet). Conversely, the first two categories (the non-new cards) represent words that you likely already know, so they are not greyed out. The exact numbers shown in each category can be changed in the options file : \"kanji-hover\": { \"max-non-new-oldest\": ... \"max-non-new-latest\": ... \"max-new-latest\": ... } Results Sorting \u00b6 The above makes the assumption that you are reviewing in order of creation date, rather than the time of first review, to save resources. In other words, if you re-ordered your cards to be different from the add-date, then the kanji hover will not be able to recognize that. For people who review in order of frequency only, then the assumption above is completely broken. Unfortunately, there is currently no way to order the results by anything other than by the creation date. Suspended Cards \u00b6 Some assumptions are made about suspended cards. For example, suspended cards flagged as green are counted in the \"non-new\" cards category (known words), and suspended cards flagged as red are counted as words that you do not know AND will not study in the future (not shown in any category). This can be changed in the options file : \"kanji-hover\": { \"non-new-query\": ... \"new-query\": ... }","title":"Kanji Hover (TODO)"},{"location":"kanjihover/#result-queries-categorization","text":"The exact results shown through Kanji Hover is not completely trivial, so this process is explained below. The words are searched and sorted into 3 categories: The two oldest, not new cards (already reviewed before, in order of add date) The two latest, not new cards (the most recent two cards that you have reviewed, in order of add date) The two oldest, new cards (the first 2 new cards that you will see with the kanji) The last category (the new cards) are greyed out to show that you haven't reviewed the card yet (i.e. you may not know the word yet). Conversely, the first two categories (the non-new cards) represent words that you likely already know, so they are not greyed out. The exact numbers shown in each category can be changed in the options file : \"kanji-hover\": { \"max-non-new-oldest\": ... \"max-non-new-latest\": ... \"max-new-latest\": ... }","title":"Result Queries &amp; Categorization"},{"location":"kanjihover/#results-sorting","text":"The above makes the assumption that you are reviewing in order of creation date, rather than the time of first review, to save resources. In other words, if you re-ordered your cards to be different from the add-date, then the kanji hover will not be able to recognize that. For people who review in order of frequency only, then the assumption above is completely broken. Unfortunately, there is currently no way to order the results by anything other than by the creation date.","title":"Results Sorting"},{"location":"kanjihover/#suspended-cards","text":"Some assumptions are made about suspended cards. For example, suspended cards flagged as green are counted in the \"non-new\" cards category (known words), and suspended cards flagged as red are counted as words that you do not know AND will not study in the future (not shown in any category). This can be changed in the options file : \"kanji-hover\": { \"non-new-query\": ... \"new-query\": ... }","title":"Suspended Cards"},{"location":"modding/","text":"Introduction \u00b6 This page describes all the ways of modding your note, and goes into depth on the ways you can mod your note without losing your changes upon updates. Note This document is primarily for developer use. It is assumed that you have knowledge of basic command line. The instructions listed below will be primarily Linux based as well. Notes for other operating systems may be shown. Modding: The Obvious Way \u00b6 Throughout the documentation and within the templates alone, you will likely see warning messages to not edit the templates directly unless you are willing to lose your changes when you update the note. The most obvious way to mod the note is directly in the pre-built template downloaded. If you are completely fine with losing your changes upon each update, and don't want to take advantages of certain tools that comes with this note (such as compile-time options), then you can simply edit the template and ignore the rest of this page. Project Description \u00b6 The Anki card template is generated through jinja templates, which is a popular templating engine for Python . All of these templates are located under the (root)/templates folder. The Anki templates are generated through a combination of sass (for css) and jinja (for everything else) through the tools/make.py script. You must build the note to use compile-time options, as compile-time options are applied upon note building. Building \u00b6 Prerequisites: \u00b6 Python 3.10.6 or higher I recommend pyenv to upgrade your python version if you're running linux. and have a lower version of Python. dart sass (dart version is required to use the latest features of sass) Anki 2.1.54 or higher Anki-connect addon Initialization \u00b6 git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git cd jp-mining-note # alternatively, if you already have the repository on your system: git pull origin/master # You may have to use `python` instead of `python3`, and `pip` instead of `pip3`. python3 -m venv . # The following is for POSIX (bash/zsh) only. # See how to activate venv on your system in the official documentation: # https://docs.python.org/3/library/venv.html source ./bin/activate pip3 install -r tools/requirements.txt Disabling the venv: deactivate Resetting the venv: # run this only if you're already in a venv deactivate rm -r bin lib python3 -m venv . source ./bin/activate pip3 install -r tools/requirements.txt Note The master branch is the bleeding edge version of the note. If you want to build a more stable version of the note, do the following: git fetch git checkout tags/TAG_NAME # or if you want to create a new branch as well: git checkout tags/TAG_NAME -b BRANCH_NAME # to return back to the master branch: git checkout master Note In case you don't want to use a venv (highly recommended that you use venv!!), you can install the following python packages: pip3 install JSON-minify jinja2 black pytest Building and Installing \u00b6 cd tools # Builds into a temporary folder and installs # WARNING: completely overrides current note that is installed python3 ./main.py Running the ./main.py script is equivalent of running: # builds the note into the ./build folder python3 make.py # installs the note from the ./build folder python3 install.py --from-build --update Running Tests \u00b6 cd tools python3 -m pytest ./tests Building the Documentation \u00b6 all documentation files are found under (root)/docs . if already done the above steps with the requirements.txt, all dependencies should already be installed main files should be found under docs/docs/PAGE.md to preview the documentation: mkdocs serve Note If you are not using requirements.txt and venv, you can install the dependencies manually here: pip3 install mkdocs mkdocs-video mkdocs-material mkdocs-macros-plugin mkdocs-git-revision-date-localized-plugin Modding the Note \u00b6 After running main.py (or make.py ), a new file config/config.py should appear. The main compile-time options can be found in this file. Always filled & Never filled fields \u00b6 You can set a field to act as if it has always been filled, or it has never been filled. This will remove the conditional Anki templates ( {{#FIELD}} and {{^FIELD}} markers) for the specified fields. For example, if your compile-options is: \"always-filled-fields\": [\"A\"], \"never-filled-fields\": [\"B\"], ... and your card template is: {{#A}} A is filled {{/A}} {{^A}} A is not filled {{/A}} {{#B}} B is filled {{/B}} {{^B}} B is not filled {{/B}} {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} then upon card build, the resulting card template will be: A is filled B is not filled {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} Modules \u00b6 TODO basic explanation primary use is for javascript javascript-only modules do not require any edits to the raw html some modules may still have to edit the raw html -> cannot update the note edits are minimal so you should be able to re-add upon update uses runtime options Extra Javascript \u00b6 TODO: not implemented primarily for testing, not for production use appends whatever javascript you want to the very end of the anonymous function Custom CSS \u00b6 allows for custom themes / minor user customizations can override variables, etc. simply appends the css at the very end of the existing css make new folder under scss (e.g. scss/extra ) and add to css-folders in config.py, e.g. \"css-folders\": [\"default\", \"dictionaries\", \"extra\"], Template Overrides \u00b6 overrides folder (or whatever folder you specify under templates-override-folder in config.py) same format as existing templates folder Make your changes shown! \u00b6 If you think your changes will be useful for others, I highly recommend contributing your work to this project! TODO Yomichan Templates CSS \u00b6 example generated html for frequencies: < div class = \"frequencies\" > < div class = \"frequencies__group\" data-details = \"Anime &amp; Jdrama Freq:\" > < div class = \"frequencies__number\" >< span class = \"frequencies__number-inner\" > 3128 </ span ></ div > < div class = \"frequencies__dictionary\" > < span class = \"frequencies__dictionary-inner\" >< span class = \"frequencies__dictionary-inner2\" > Anime &amp; Jdrama Freq: </ span ></ span > </ div > </ div > < div class = \"frequencies__group\" data-details = \"Innocent Ranked\" > < div class = \"frequencies__number\" >< span class = \"frequencies__number-inner\" > 6230 </ span ></ div > < div class = \"frequencies__dictionary\" > < span class = \"frequencies__dictionary-inner\" >< span class = \"frequencies__dictionary-inner2\" > Innocent Ranked </ span ></ span > </ div > </ div > <!-- etc. --> </ div > example generated html for pitch accent positions: <!-- surrounded by <div class=\"pa-positions\"> in Anki template --> < div class = \"pa-positions__group\" data-details = \"NHK\" > < div class = \"pa-positions__dictionary\" >< div class = \"pa-positions__dictionary-inner\" > NHK </ div ></ div > < ol > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 0 </ span >< span > ] </ span ></ span > </ li > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 3 </ span >< span > ] </ span ></ span > </ li > </ ol > </ div > < div class = \"pa-positions__group\" data-details = \"\u5927\u8f9e\u6cc9\" > < div class = \"pa-positions__dictionary\" >< div class = \"pa-positions__dictionary-inner\" > \u5927\u8f9e\u6cc9 </ div ></ div > < ol > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 0 </ span >< span > ] </ span ></ span > </ li > </ ol > </ div > <!-- etc. --> example generated html for pitch accent graphs: <!-- surrounded by <div class=\"pa-graphs\"> in Anki template --> < div class = \"pa-graphs__group\" data-details = \"NHK\" > < div class = \"pa-graphs__dictionary\" >< div class = \"pa-graphs__dictionary-inner\" > NHK </ div ></ div > < ol > < li > < svg > ... </ svg > <!-- Yomichan's generated SVG --> </ li > </ ol > </ div > < div class = \"pa-graphs__group\" data-details = \"\u5927\u8f9e\u6cc9\" > < div class = \"pa-graphs__dictionary\" >< div class = \"pa-graphs__dictionary-inner\" > \u5927\u8f9e\u6cc9 </ div ></ div > < ol > < li > < svg > ... </ svg > <!-- Yomichan's generated SVG --> </ li > </ ol > </ div > <!-- etc... --> Tips and Tricks \u00b6 Print statements \u00b6 Anki doesn't come with a way to use console.log() normally, so I made one myself. // global logger LOGGER . error ( \"message\" ); LOGGER . warn ( \"message\" ); LOGGER . info ( \"message\" ); LOGGER . debug ( \"message\" ); // module-specific logger const logger = JPMNLogger ( \"module-name\" ); logger . error ( \"message\" ); logger . warn ( \"message\" ); logger . info ( \"message\" ); logger . debug ( \"message\" ); The above functions prints a message of the given log level to the info circle. To see the message, hover over the info circle. To use the debug function, make sure that the debug option is set to true in the javascript options. Modding Yomichan Templates \u00b6 TODO transfer yomichan templates section here Contributing \u00b6 TODO separate page before: highly prefer if you contact me before-hand with the changes you want to make during: attempt to match style around the code final steps: use black to format all python files (TODO script) make sure tests run (maybe CI at some point, might be overkill atm though lmao) update documentation (see wiki/ folder) # Build for release, if you want to contribute to the project python3 ./make.py --release","title":"Modding & Dev Docs (TODO)"},{"location":"modding/#introduction","text":"This page describes all the ways of modding your note, and goes into depth on the ways you can mod your note without losing your changes upon updates. Note This document is primarily for developer use. It is assumed that you have knowledge of basic command line. The instructions listed below will be primarily Linux based as well. Notes for other operating systems may be shown.","title":"Introduction"},{"location":"modding/#modding-the-obvious-way","text":"Throughout the documentation and within the templates alone, you will likely see warning messages to not edit the templates directly unless you are willing to lose your changes when you update the note. The most obvious way to mod the note is directly in the pre-built template downloaded. If you are completely fine with losing your changes upon each update, and don't want to take advantages of certain tools that comes with this note (such as compile-time options), then you can simply edit the template and ignore the rest of this page.","title":"Modding: The Obvious Way"},{"location":"modding/#project-description","text":"The Anki card template is generated through jinja templates, which is a popular templating engine for Python . All of these templates are located under the (root)/templates folder. The Anki templates are generated through a combination of sass (for css) and jinja (for everything else) through the tools/make.py script. You must build the note to use compile-time options, as compile-time options are applied upon note building.","title":"Project Description"},{"location":"modding/#building","text":"","title":"Building"},{"location":"modding/#prerequisites","text":"Python 3.10.6 or higher I recommend pyenv to upgrade your python version if you're running linux. and have a lower version of Python. dart sass (dart version is required to use the latest features of sass) Anki 2.1.54 or higher Anki-connect addon","title":"Prerequisites:"},{"location":"modding/#initialization","text":"git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git cd jp-mining-note # alternatively, if you already have the repository on your system: git pull origin/master # You may have to use `python` instead of `python3`, and `pip` instead of `pip3`. python3 -m venv . # The following is for POSIX (bash/zsh) only. # See how to activate venv on your system in the official documentation: # https://docs.python.org/3/library/venv.html source ./bin/activate pip3 install -r tools/requirements.txt Disabling the venv: deactivate Resetting the venv: # run this only if you're already in a venv deactivate rm -r bin lib python3 -m venv . source ./bin/activate pip3 install -r tools/requirements.txt Note The master branch is the bleeding edge version of the note. If you want to build a more stable version of the note, do the following: git fetch git checkout tags/TAG_NAME # or if you want to create a new branch as well: git checkout tags/TAG_NAME -b BRANCH_NAME # to return back to the master branch: git checkout master Note In case you don't want to use a venv (highly recommended that you use venv!!), you can install the following python packages: pip3 install JSON-minify jinja2 black pytest","title":"Initialization"},{"location":"modding/#building-and-installing","text":"cd tools # Builds into a temporary folder and installs # WARNING: completely overrides current note that is installed python3 ./main.py Running the ./main.py script is equivalent of running: # builds the note into the ./build folder python3 make.py # installs the note from the ./build folder python3 install.py --from-build --update","title":"Building and Installing"},{"location":"modding/#running-tests","text":"cd tools python3 -m pytest ./tests","title":"Running Tests"},{"location":"modding/#building-the-documentation","text":"all documentation files are found under (root)/docs . if already done the above steps with the requirements.txt, all dependencies should already be installed main files should be found under docs/docs/PAGE.md to preview the documentation: mkdocs serve Note If you are not using requirements.txt and venv, you can install the dependencies manually here: pip3 install mkdocs mkdocs-video mkdocs-material mkdocs-macros-plugin mkdocs-git-revision-date-localized-plugin","title":"Building the Documentation"},{"location":"modding/#modding-the-note","text":"After running main.py (or make.py ), a new file config/config.py should appear. The main compile-time options can be found in this file.","title":"Modding the Note"},{"location":"modding/#always-filled-never-filled-fields","text":"You can set a field to act as if it has always been filled, or it has never been filled. This will remove the conditional Anki templates ( {{#FIELD}} and {{^FIELD}} markers) for the specified fields. For example, if your compile-options is: \"always-filled-fields\": [\"A\"], \"never-filled-fields\": [\"B\"], ... and your card template is: {{#A}} A is filled {{/A}} {{^A}} A is not filled {{/A}} {{#B}} B is filled {{/B}} {{^B}} B is not filled {{/B}} {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}} then upon card build, the resulting card template will be: A is filled B is not filled {{#C}} C is filled {{/C}} {{^C}} C is not filled {{/C}}","title":"Always filled &amp; Never filled fields"},{"location":"modding/#modules","text":"TODO basic explanation primary use is for javascript javascript-only modules do not require any edits to the raw html some modules may still have to edit the raw html -> cannot update the note edits are minimal so you should be able to re-add upon update uses runtime options","title":"Modules"},{"location":"modding/#extra-javascript","text":"TODO: not implemented primarily for testing, not for production use appends whatever javascript you want to the very end of the anonymous function","title":"Extra Javascript"},{"location":"modding/#custom-css","text":"allows for custom themes / minor user customizations can override variables, etc. simply appends the css at the very end of the existing css make new folder under scss (e.g. scss/extra ) and add to css-folders in config.py, e.g. \"css-folders\": [\"default\", \"dictionaries\", \"extra\"],","title":"Custom CSS"},{"location":"modding/#template-overrides","text":"overrides folder (or whatever folder you specify under templates-override-folder in config.py) same format as existing templates folder","title":"Template Overrides"},{"location":"modding/#make-your-changes-shown","text":"If you think your changes will be useful for others, I highly recommend contributing your work to this project! TODO","title":"Make your changes shown!"},{"location":"modding/#yomichan-templates-css","text":"example generated html for frequencies: < div class = \"frequencies\" > < div class = \"frequencies__group\" data-details = \"Anime &amp; Jdrama Freq:\" > < div class = \"frequencies__number\" >< span class = \"frequencies__number-inner\" > 3128 </ span ></ div > < div class = \"frequencies__dictionary\" > < span class = \"frequencies__dictionary-inner\" >< span class = \"frequencies__dictionary-inner2\" > Anime &amp; Jdrama Freq: </ span ></ span > </ div > </ div > < div class = \"frequencies__group\" data-details = \"Innocent Ranked\" > < div class = \"frequencies__number\" >< span class = \"frequencies__number-inner\" > 6230 </ span ></ div > < div class = \"frequencies__dictionary\" > < span class = \"frequencies__dictionary-inner\" >< span class = \"frequencies__dictionary-inner2\" > Innocent Ranked </ span ></ span > </ div > </ div > <!-- etc. --> </ div > example generated html for pitch accent positions: <!-- surrounded by <div class=\"pa-positions\"> in Anki template --> < div class = \"pa-positions__group\" data-details = \"NHK\" > < div class = \"pa-positions__dictionary\" >< div class = \"pa-positions__dictionary-inner\" > NHK </ div ></ div > < ol > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 0 </ span >< span > ] </ span ></ span > </ li > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 3 </ span >< span > ] </ span ></ span > </ li > </ ol > </ div > < div class = \"pa-positions__group\" data-details = \"\u5927\u8f9e\u6cc9\" > < div class = \"pa-positions__dictionary\" >< div class = \"pa-positions__dictionary-inner\" > \u5927\u8f9e\u6cc9 </ div ></ div > < ol > < li > < span style = \"display: inline;\" >< span > [ </ span >< span > 0 </ span >< span > ] </ span ></ span > </ li > </ ol > </ div > <!-- etc. --> example generated html for pitch accent graphs: <!-- surrounded by <div class=\"pa-graphs\"> in Anki template --> < div class = \"pa-graphs__group\" data-details = \"NHK\" > < div class = \"pa-graphs__dictionary\" >< div class = \"pa-graphs__dictionary-inner\" > NHK </ div ></ div > < ol > < li > < svg > ... </ svg > <!-- Yomichan's generated SVG --> </ li > </ ol > </ div > < div class = \"pa-graphs__group\" data-details = \"\u5927\u8f9e\u6cc9\" > < div class = \"pa-graphs__dictionary\" >< div class = \"pa-graphs__dictionary-inner\" > \u5927\u8f9e\u6cc9 </ div ></ div > < ol > < li > < svg > ... </ svg > <!-- Yomichan's generated SVG --> </ li > </ ol > </ div > <!-- etc... -->","title":"Yomichan Templates CSS"},{"location":"modding/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"modding/#modding-yomichan-templates","text":"TODO transfer yomichan templates section here","title":"Modding Yomichan Templates"},{"location":"modding/#contributing","text":"TODO separate page before: highly prefer if you contact me before-hand with the changes you want to make during: attempt to match style around the code final steps: use black to format all python files (TODO script) make sure tests run (maybe CI at some point, might be overkill atm though lmao) update documentation (see wiki/ folder) # Build for release, if you want to contribute to the project python3 ./make.py --release","title":"Contributing"},{"location":"personalsetup/","text":"Welcome to my (hidden) personal setup page! This will contain condense, usually point form information on how to get my exact setup, and this section will be in continuous flux so long as I am learning japanese. If you want to use this note type, I recommend looking at the other pages of the wiki, as points will be better explained. Anki \u00b6 plugins: 1344485230 1225470483 2055492159 580654285 ajt furigana / ajt pitch accent / ankiconnect / local forvo config under normal setup page custom audio sources: http://localhost:8770/?expression={expression}&reading={reading} local audio plugin w/ sqlite get audio zips from existing computer / backup . \u251c\u2500\u2500 jpod_alternate_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 jpod_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 nhk16_files \u251c\u2500\u2500 audio \u2502 \u2514\u2500\u2500 20170616125910.aac \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 entries.json forvo plugin Yomichan \u00b6 import settings from an existing computer / backup drive TMW dicts Yomichan settings \u2192 \"Popup Appearance\": \"Compact glossaries\": on \"Compact tags\": off, monolingual: hold shift: bilingual (at any level) mouseover: monolingual monolingual shift: hold shift: access monolingual at first level bilingual at all other levels mouseover to access monolingual at other levels bilingual: mouseover: bilingual pa: hold shift: pitch accent and utilities {{~! NOTE: this MUST be put at the very top of the templates section! ~}} {{~! REGEX ~}} {{~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~}} {{~#set \"bilingual-dict-regex\"~}} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*)(\\[object Object\\])?$ {{~/set~}} {{~#set \"utility-dict-regex\"~}} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms)(\\[object Object\\])?$ {{~/set~}} {{~#set \"ignored-dict-regex\"~}} ^(\u65b0\u548c\u82f1.*)(\\[object Object\\])?$ {{~/set~}} {{~! OPTIONS ~}} {{~! valid values: \"bilingual\", \"monolingual\" ~}} {{~#set \"first-definition-type\" \"monolingual\"}}{{/set~}} monolingual profile \u00b6 scale: 110% condition: modifier keys are shift /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } li . definition-item [ data-dictionary = 'NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] : hover . gloss-list { opacity : 1 ; } bilingual profile \u00b6 scale: 100% NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 and \u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003 should have lower priority compared to bilingual dicts condition: modifier keys are ctrl /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b' ] { display : none ; } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } PA and grammar profile \u00b6 scale: 100% /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] { display : none ; } Yomichan Fields \u00b6 Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard 1 IsHoverCard IsTargetedSentenceCard PAShowInfo 1 PATestOnlyWord 1 PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment Discord \u00b6 Custom CSS \u00b6 : lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } code { font-family : Ubuntu Mono , BlinkMacSystemFont , 'Segoe UI' , Roboto , Oxygen , Ubuntu , Cantarell , 'Open Sans' , 'Helvetica Neue' , sans-serif , Consolas , Andale Mono WT , Andale Mono , Lucida Console , Lucida Sans Typewriter , DejaVu Sans Mono , Bitstream Vera Sans Mono , Liberation Mono , Nimbus Mono L , Monaco , Courier New , Courier , monospace !important ; }","title":"Personalsetup"},{"location":"personalsetup/#anki","text":"plugins: 1344485230 1225470483 2055492159 580654285 ajt furigana / ajt pitch accent / ankiconnect / local forvo config under normal setup page custom audio sources: http://localhost:8770/?expression={expression}&reading={reading} local audio plugin w/ sqlite get audio zips from existing computer / backup . \u251c\u2500\u2500 jpod_alternate_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 jpod_files \u2502 \u2514\u2500\u2500 \u3088\u3080 - \u8aad\u3080.mp3 \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 nhk16_files \u251c\u2500\u2500 audio \u2502 \u2514\u2500\u2500 20170616125910.aac \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 entries.json forvo plugin","title":"Anki"},{"location":"personalsetup/#yomichan","text":"import settings from an existing computer / backup drive TMW dicts Yomichan settings \u2192 \"Popup Appearance\": \"Compact glossaries\": on \"Compact tags\": off, monolingual: hold shift: bilingual (at any level) mouseover: monolingual monolingual shift: hold shift: access monolingual at first level bilingual at all other levels mouseover to access monolingual at other levels bilingual: mouseover: bilingual pa: hold shift: pitch accent and utilities {{~! NOTE: this MUST be put at the very top of the templates section! ~}} {{~! REGEX ~}} {{~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~}} {{~#set \"bilingual-dict-regex\"~}} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*)(\\[object Object\\])?$ {{~/set~}} {{~#set \"utility-dict-regex\"~}} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms)(\\[object Object\\])?$ {{~/set~}} {{~#set \"ignored-dict-regex\"~}} ^(\u65b0\u548c\u82f1.*)(\\[object Object\\])?$ {{~/set~}} {{~! OPTIONS ~}} {{~! valid values: \"bilingual\", \"monolingual\" ~}} {{~#set \"first-definition-type\" \"monolingual\"}}{{/set~}}","title":"Yomichan"},{"location":"personalsetup/#monolingual-profile","text":"scale: 110% condition: modifier keys are shift /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; } li . definition-item [ data-dictionary = 'NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] : hover . gloss-list { opacity : 1 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] . gloss-list { opacity : 0 ; } li . definition-item [ data-dictionary = '\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178(\u5168\u96c6)' ] : hover . gloss-list { opacity : 1 ; }","title":"monolingual profile"},{"location":"personalsetup/#bilingual-profile","text":"scale: 100% NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 and \u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003 should have lower priority compared to bilingual dicts condition: modifier keys are ctrl /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u6bce\u65e5\u306e\u3093\u3073\u308a\u65e5\u672c\u8a9e\u6559\u5e2b' ] { display : none ; } /* only shows the first 2 pitch dictionaries */ li . pronunciation-group : nth-child ( n + 3 ) { display : none ; } /* makes \u5927\u8f9e\u6cc9 and NHK have white text, and all other pitch dictionaries have grey text */ . tag [ data-category = \"pronunciation-dictionary\" ] { --tag-text-color : #c8bfdb ; } . tag [ data-details = \"\u5927\u8f9e\u6cc9\" ], . tag [ data-details = \"NHK\" ] { --tag-text-color : #FFFFFF ; }","title":"bilingual profile"},{"location":"personalsetup/#pa-and-grammar-profile","text":"scale: 100% /* global */ button [ title ^= \"Add reading\" ] { display : none ; } [ data-sc-ortho = \"table\" ] td { text-align : center ; } . headword-term ruby rt { user-select : none } li . definition-item [ data-dictionary = '\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = '\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248' ] { display : none ; } li . definition-item [ data-dictionary = '\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9' ] { display : none ; } li . definition-item [ data-dictionary = '\u6f22\u5b57\u6e90' ] { display : none ; } li . definition-item [ data-dictionary = '\u5b9f\u7528\u65e5\u672c\u8a9e\u8868\u73fe\u8f9e\u5178' ] { display : none ; } li . definition-item [ data-dictionary = 'JMdict (English)' ] { display : none ; } li . definition-item [ data-dictionary = '\u65b0\u548c\u82f1' ] { display : none ; }","title":"PA and grammar profile"},{"location":"personalsetup/#yomichan-fields","text":"Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes IsSentenceCard IsClickCard 1 IsHoverCard IsTargetedSentenceCard PAShowInfo 1 PATestOnlyWord 1 PADoNotTest PASeparateWordCard PASeparateSentenceCard SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment","title":"Yomichan Fields"},{"location":"personalsetup/#discord","text":"","title":"Discord"},{"location":"personalsetup/#custom-css","text":": lang ( ja ), : lang ( ja-JP ) { --font-primary : Whitney , \"Noto Sans CJK JP\" , \"Hiragino Sans\" , \"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\" , \"Hiragino Kaku Gothic ProN\" , \"\u30e1\u30a4\u30ea\u30aa\" , Meiryo , Osaka , \"MS PGothic\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } code { font-family : Ubuntu Mono , BlinkMacSystemFont , 'Segoe UI' , Roboto , Oxygen , Ubuntu , Cantarell , 'Open Sans' , 'Helvetica Neue' , sans-serif , Consolas , Andale Mono WT , Andale Mono , Lucida Console , Lucida Sans Typewriter , DejaVu Sans Mono , Bitstream Vera Sans Mono , Liberation Mono , Nimbus Mono L , Monaco , Courier New , Courier , monospace !important ; }","title":"Custom CSS"},{"location":"preface/","text":"Before committing and going through the setup process, it would be best to make sure that the note aligns with exactly what you want. Supported Systems \u00b6 The most important step is to see if jp-mining-note (JPMN) works on your device. Anki Desktop \u00b6 Primary support is given to the latest Anki versions (and Qt6). Limited support will be given for older versions of Anki. With that being said, JPMN should work for Anki versions 2.1.49+. Mobile (AnkiDroid and AnkiMobile) \u00b6 As of writing this, 1 mobile versions of Anki are not yet supported. There are plans of supporting AnkiDroid in the future. As I do not have an iPhone to test AnkiMobile, there are no plans to support AnkiMobile. Anki Web \u00b6 There is no support for AnkiWeb, and there are no plans to support AnkiWeb. Themes \u00b6 The main theme of this card is with Anki's default dark mode. However, light mode is also supported. Theme & Design Principles \u00b6 Made for Japanese Learning \u00b6 The absolute fundamental goal of this note type is to make learning Japanese easier . Every feature you see is to simply make this learning process easier and smoother. Minimalistic Design \u00b6 This note is visually designed to be minimalistic because the fundamental goal is to learn Japanese, not to have eye catching graphics. Minimal Dependencies \u00b6 The only fundamental dependencies are Yomichan (to create the note) and the Anki-Connect add-on (to export the note from Yomichan , download the note, and for certain features to work within the note). Absolutely nothing else is required. This helps with ensuring the lifespan of the note, and to make the note more stable across various Anki versions. Modularized, Customizable & Extendable \u00b6 This project ships with built-in tools to easily disable/enable features, or even completely remove them from the base template via compile-time options. Additionally, there are many built-in ways to extend the note to suit your exact needs. Free & Open Source \u00b6 Everything here, including the documentation itself, is completely free and open source, licensed under MIT . Rest easy knowing you will keep full ownership of your note, forever. Alternatives \u00b6 Of course, there are many alternatives to this note type. Below contains a non-exhaustive list of some of the note types that exist out there. P.S. Feel free to let me know of any note types you find interesting (including your own note type, or modified versions of this note), and I will likely add it here! Click here to see example note types (for Japanese learning). Anime Cards ( download ) Vocab card template Lazy Guide's Modified Anime Card Xeliu's Modified Anime Card ( demo ) Targeted sentence cards ( download ) My note type is a heavily modified (to the point of it being completely rewritten) version of this. AJATT-Tool's AnkiNoteTypes A collection of user-created notes, most of which are based off of the above Targeted Sentence Cards Eminent Note Type Has some interesting ways to display pitch accent and show kanji info Elax's note type (demo 1 , 2 , 3 , 4 ) Original message on TMW discord server here Can switch between vocab / sentence / vocab audio / sentence audio Tigy01's note type Vocab card template MonnieBiloney's note types Click here to see example note types (outside of Japanese learning). Prettify \"Collection of customizable Anki flashcard templates with modern and clean themes.\" Modern Card Themes Anki Cards Templates SuperList Raagaception's 12STD CBSE Deck (Science stream, PCM) Setup \u00b6 Excited to take this note on a whirl? See the setup page to see just that! As of 2022/09/17.--> \u21a9","title":"Preface"},{"location":"preface/#supported-systems","text":"The most important step is to see if jp-mining-note (JPMN) works on your device.","title":"Supported Systems"},{"location":"preface/#anki-desktop","text":"Primary support is given to the latest Anki versions (and Qt6). Limited support will be given for older versions of Anki. With that being said, JPMN should work for Anki versions 2.1.49+.","title":"Anki Desktop"},{"location":"preface/#mobile-ankidroid-and-ankimobile","text":"As of writing this, 1 mobile versions of Anki are not yet supported. There are plans of supporting AnkiDroid in the future. As I do not have an iPhone to test AnkiMobile, there are no plans to support AnkiMobile.","title":"Mobile (AnkiDroid and AnkiMobile)"},{"location":"preface/#anki-web","text":"There is no support for AnkiWeb, and there are no plans to support AnkiWeb.","title":"Anki Web"},{"location":"preface/#themes","text":"The main theme of this card is with Anki's default dark mode. However, light mode is also supported.","title":"Themes"},{"location":"preface/#theme-design-principles","text":"","title":"Theme &amp; Design Principles"},{"location":"preface/#made-for-japanese-learning","text":"The absolute fundamental goal of this note type is to make learning Japanese easier . Every feature you see is to simply make this learning process easier and smoother.","title":"Made for Japanese Learning"},{"location":"preface/#minimalistic-design","text":"This note is visually designed to be minimalistic because the fundamental goal is to learn Japanese, not to have eye catching graphics.","title":"Minimalistic Design"},{"location":"preface/#minimal-dependencies","text":"The only fundamental dependencies are Yomichan (to create the note) and the Anki-Connect add-on (to export the note from Yomichan , download the note, and for certain features to work within the note). Absolutely nothing else is required. This helps with ensuring the lifespan of the note, and to make the note more stable across various Anki versions.","title":"Minimal Dependencies"},{"location":"preface/#modularized-customizable-extendable","text":"This project ships with built-in tools to easily disable/enable features, or even completely remove them from the base template via compile-time options. Additionally, there are many built-in ways to extend the note to suit your exact needs.","title":"Modularized, Customizable &amp; Extendable"},{"location":"preface/#free-open-source","text":"Everything here, including the documentation itself, is completely free and open source, licensed under MIT . Rest easy knowing you will keep full ownership of your note, forever.","title":"Free &amp; Open Source"},{"location":"preface/#alternatives","text":"Of course, there are many alternatives to this note type. Below contains a non-exhaustive list of some of the note types that exist out there. P.S. Feel free to let me know of any note types you find interesting (including your own note type, or modified versions of this note), and I will likely add it here! Click here to see example note types (for Japanese learning). Anime Cards ( download ) Vocab card template Lazy Guide's Modified Anime Card Xeliu's Modified Anime Card ( demo ) Targeted sentence cards ( download ) My note type is a heavily modified (to the point of it being completely rewritten) version of this. AJATT-Tool's AnkiNoteTypes A collection of user-created notes, most of which are based off of the above Targeted Sentence Cards Eminent Note Type Has some interesting ways to display pitch accent and show kanji info Elax's note type (demo 1 , 2 , 3 , 4 ) Original message on TMW discord server here Can switch between vocab / sentence / vocab audio / sentence audio Tigy01's note type Vocab card template MonnieBiloney's note types Click here to see example note types (outside of Japanese learning). Prettify \"Collection of customizable Anki flashcard templates with modern and clean themes.\" Modern Card Themes Anki Cards Templates SuperList Raagaception's 12STD CBSE Deck (Science stream, PCM)","title":"Alternatives"},{"location":"preface/#setup","text":"Excited to take this note on a whirl? See the setup page to see just that! As of 2022/09/17.--> \u21a9","title":"Setup"},{"location":"runtimeoptions/","text":"There are many options that can be set within the (javascript) runtime options file. To edit this, navigate to your profile's media folder ), and open the _jpmn-options.js file as a text file. TODO gif for windows (open as notepad) Note If you are using an older version of JPMN, you can find the most recent version of the options file here . The contents of the file should look something like the following: var JPMNOpts = (function (my) { my.settings = { ... // a bunch of settings } return my; }(JPMNOpts || {})); I recommend going through this file and selecting the options that best fits your workflow. As each setting is already documented in the file, the settings will not be documented heavily here. Instead, a small number of hand selected settings will be showcased below, to give you a taste of what is available. TODO flesh out below Keybinds \u00b6 TODO gif with screenkey Modules \u00b6 Many javascript heavy code are separated into modules by default. These can be enabled and disabled at the user's will if the user wants to sacrifice functionality for a slightly faster card. Some examples include: kanji-hover auto-pitch-accent sent-utils (basic sentence processing) img-utils (basic image processing) These modules likely also also have their own collection of settings to modify the behavior of said module. Colored Quotes instead of PA Indicator \u00b6 TODO picture comparisons between word PA indicator in quotes / word PA with PA indicator Greyed out fields \u00b6 TODO picture comparisons empty fields / empty fields but greyed out Open Collapsed Field on New Cards \u00b6 TODO gif","title":"Runtime Options (TODO)"},{"location":"runtimeoptions/#keybinds","text":"TODO gif with screenkey","title":"Keybinds"},{"location":"runtimeoptions/#modules","text":"Many javascript heavy code are separated into modules by default. These can be enabled and disabled at the user's will if the user wants to sacrifice functionality for a slightly faster card. Some examples include: kanji-hover auto-pitch-accent sent-utils (basic sentence processing) img-utils (basic image processing) These modules likely also also have their own collection of settings to modify the behavior of said module.","title":"Modules"},{"location":"runtimeoptions/#colored-quotes-instead-of-pa-indicator","text":"TODO picture comparisons between word PA indicator in quotes / word PA with PA indicator","title":"Colored Quotes instead of PA Indicator"},{"location":"runtimeoptions/#greyed-out-fields","text":"TODO picture comparisons empty fields / empty fields but greyed out","title":"Greyed out fields"},{"location":"runtimeoptions/#open-collapsed-field-on-new-cards","text":"TODO gif","title":"Open Collapsed Field on New Cards"},{"location":"setup/","text":"This entire section is dedicated to providing the minimal setup to properly create cards with this note type. Note that this setup is primarly PC based, and requires Anki and Yomichan for the main card creation process. Prerequisites \u00b6 It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Additionally, it is recommeded to use the Qt6 version of Anki if possible. Note Worst case scenario, if any essential add-ons no longer work, you can always downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, try updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done). Finally, notice that this website contains a search bar! If you have a problem at any point, you may find the solution by searching for it. Installing the Card \u00b6 There are two ways of installing the card: Option 1: The Automatic Way (click here) If you know what git and python is, here's all you have to do: Windows MacOS & Linux git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) python tools\\install.py git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. python tools/install.py The above does the following: Installs the latest version of the note Installs the fonts required for the note If the above made no sense to you, or you just want to install this normally, see the second option below. Option 2: The Manual Way (click here) Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ). Verifying the Note Works \u00b6 You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Dark Theme Light Theme Please check the following in particular: The fonts should match very similarly with the above example. Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this is red, that means something is wrong with the note's javascript. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box. If you already have Anki-Connect installed, kanji hover should also work. If the furigana on your card seems to appear higher above the kanji compared to the picture, this is likely because you are using the older Qt5 version of Anki. Unfortunately, as this seems like a quirk of Qt5, there does not seem to be a way to fix it outside of upgrading Anki from a Qt5 version to a Qt6 version. Anki Setup \u00b6 Updating Anki \u00b6 If you are updating Anki from an older version, this section aims to give some general tips on updating Anki. If you aren't upgrading Anki from an older version, you can skip this section. Official Documentation \u00b6 The official documentation on how to install and upgrade Anki is shown below: Windows MacOS Linux Note that for all three, there are additional sections in the table of contents to the left that could be helpful. Add-ons Breaking \u00b6 If an add-on (that worked in a previous version of Anki) no longer works, you have a few options you can try: As a sanity check, click the Check for Updates button on Anki's Addons window. Check that the add-on supports the current version of Anki in the official Ankiweb page. If the page says that the current Anki version is supported, try reinstalling it again from Ankiweb. This is because occasionally, the Check for Updates button doesn't properly work. Dark Mode \u00b6 The recommended theme for this note is with Anki's dark mode. To change Anki's theme, head over to: Tools \u2192 Preferences \u2192 Basic \u2192 Theme (dropdown) \u2192 Theme: Dark (TODO gif) Anki Add-ons \u00b6 There are certain add-ons that must be installed for this note type to work. Conflicting Add-ons \u00b6 There are no conflicting add-ons, since I'm not aware of any currently. Let me know if you find one! Downloading Add-ons \u00b6 To download an add-on, copy the add-on's code, and navigate to the following to paste the code: Tools \u2192 Add-ons \u2192 Get Add-ons... Required Anki Add-ons \u00b6 Anki-Connect \u00b6 (Official page) Code: 2055492159 Required for Yomichan and most other Anki-related automated tasks to work. I use the default config that comes with the add-on. Note for Anki versions 2.1.49 and below Anki versions 2.1.49 and below require a hack to the Anki-Connect config for certain features within the card to work. In particular, Anki-Connect is used for the \"Kanji Hover\" feature and the \"Open Fields on New Card\" feature. To make those features work, add \"null\" to the webCorsOriginList list in the Anki-Connect config file. An example of how the config should look is shown below: \"webCorsOriginList\": [ \"http://localhost\", \"null\" ] Of course, this isn't very safe and it is highly recommended that you upgrade Anki to avoid this problem. If you aren't interested in those features, you can skip this step and disable them in the runtime options . Optional Add-ons \u00b6 These are a set of optional, but useful add-ons that can easily work with the card. If this is your first time here, I recommend skimming through the descriptions and choosing the add-ons that seem appealing for you. Note Make sure to head over to the final steps section afterwards! CSS Injector \u00b6 (Official page) Code: 181103283 I strongly recommend using this, because if you don't use this, the fields within the Anki field editor won't have certain stylizations that makes the field actually interpretable. There are two ways of using css injector with this note type: Option 1: Automatically updates with the card (recommended) Windows MacOS Linux As a preliminary step, you will have to remove the empty field.css file that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete field.css . # be sure to change USERNAME to your computer username! del \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" Afterwards, open command prompt with elevated permissions. Note Be sure to open command prompt, and not PowerShell. If you've never used command prompt before, see this . With command prompt opened, run the following command: # be sure to change USERNAME to your computer username and PROFILENAME to your Anki profile. # There are **two** USERNAME's to replace, and **one** PROFILENAME to replace in the command below. # Make sure to replace all the fields! mklink \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\PROFILENAME\\collection.media\\_field.css\" As a preliminary step, you will have to remove the empty field.css file that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete field.css . rm \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" Afterwards, run the following command: # be sure to change `PROFILENAME` to your Anki profile ln -s \"~/Library/Application Support/Anki2/PROFILENAME/collection.media/_field.css\" \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" As a preliminary step, you will have to remove the empty field.css file that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete field.css . rm \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" Afterwards, run the following command: # be sure to change `PROFILENAME` to your Anki profile ln -s \"~/.local/share/Anki2/PROFILENAME/collection.media/_field.css\" \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" Option 2: Manually without respecting updates Navigate to css injector addon folder ( Anki2/addons21/181103283/user_files ) Remove the existing field.css file Copy the _field.css file (found under your profile's media folder ) into the css injector add-on directory. Rename _field.css into field.css . Note If the _field.css file ever updates, you will have to manually copy and rename the file again into the correct position. AJT Furigana \u00b6 (Official page) Code: 1344485230 Alternative and up-to-date version of JapaneseSupport. Automatically generates furigana upon Yomichan card creation. This add-on is optional, because the card will simply show the sentence without furigana if there is no furigana generated sentence. Note Furigana generation is occasionally incorrect, so if you plan on using these regularly, you should double-check the readings to make sure they are correct. JapaneseSupport v.s. AJT Furigana If you use JapaneseSupport , bolded words and other styles within a field are not transferred over from the original field to the reading field. Additionally, JapaneseSupport does not have an option to automatically add the reading upon card creation. AJT Furigana supports both of those of those features. Config Changes \u00b6 To change the config of any Anki add-on, head over to Tools \u2192 Add-ons \u2192 (select the add-on) \u2192 Config . The important things to change in the config are generate_on_note_add , fields and note_types . Click here to see the full AJT Furigana config { \"context_menu\" : { \"generate_furigana\" : true , \"generate_furigana_no_kanji\" : true , \"to_hiragana\" : true , \"to_katakana\" : true }, \"fields\" : [ // (1)! { \"destination\" : \"SentenceReading\" , \"source\" : \"Sentence\" } ], \"furigana_suffix\" : \" (furigana)\" , \"generate_on_note_add\" : true , // (2)! \"note_types\" : [ // (3)! \"jp\" ], \"skip_numbers\" : false , \"skip_words\" : \"\" , \"toolbar\" : { \"clean_furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+u\" , \"text\" : \"\u524a\" }, \"furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+o\" , \"text\" : \"\u632f\" } } } We change the field names to match this note type. This ensures that the pitch accent is added upon initial note creation. Note that this is technically optional. If you are likely to change the sentence after adding the note, then it is possible to leave this as false , and bulk add the furigana later. Similarly to the fields change, we change this to properly detect this note type. AJT Pitch Accent \u00b6 (Official page) Code: 1225470483 Automatically adds pitch accent info given the word. For the purposes of the card, the only purpose that this add-on serves is the following: Adds devoiced and nasal information to the existing reading. If your Yomichan pitch accent dictionaries did not contain any pitch accent info for the word but the add-on does, then it will use the add-on data. Config Changes \u00b6 The important things to change in the config are generate_on_note_add , destination_fields , source_fields note_types , and styles . Click here to see the full AJT Pitch Accent config { \"destination_fields\" : [ \"AJTWordPitch\" ], \"generate_on_note_add\" : true , // (1)! \"kana_lookups\" : true , \"lookup_shortcut\" : \"Ctrl+8\" , \"note_types\" : [ \"jp\" ], \"regenerate_readings\" : false , \"skip_words\" : \"\u3078,\u304b,\u3088,\u3093,\u3060,\u3073,\u306e,\u3084,\u306d,\u3070,\u3066,\u3068,\u305f,\u304c,\u306b,\u306a,\u306f,\u3082,\u307e\u3059,\u304b\u3089,\u3044\u308b,\u305f\u3061,\u3066\u308b,\u3046,\u307e\u3057\u3087,\u305f\u3044,\u3067\u3059\" , \"source_fields\" : [ \"Word\" ], \"styles\" : { // (2)! \"&#42780;\" : \"<span class=\\\"downstep\\\"><span class=\\\"downstep-inner\\\">&#42780;</span></span>\" , \"class=\\\"overline\\\"\" : \"style=\\\"text-decoration:overline;\\\" class=\\\"pitchoverline\\\"\" }, \"use_hiragana\" : false , \"use_mecab\" : true } We change generate_on_note_add and note_types for the exact same reasons as the AJT Furigana Config section. The destination_fields and source_fields options are changed similarily to the fields option in the AJT Furigana Config section. styles adds custom stylization that creates the pitch accent lines and downsteps as you see in the example note. Without this, the default styles will look like the word you see in the official add-on page. Final Steps \u00b6 After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other. Transfer Existing Notes \u00b6 If you wish to transfer existing cards into this note type, please see this page . Updating the Note \u00b6 If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update. Yomichan Setup \u00b6 Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working. Note If you are planning on using the JMdict dictionary, the ones provided from most sources (TMW's google drive, Matt's video on Yomichan, and Yomichan's main github page) are all somewhat outdated, which usually means less accurate definitions and less coverage. To get the most recent version of JMdict, download it from the official site and using yomichan-import to get the latest JMdict version available. If you don't want to compile it from source, I provide a download link here , which should only be a few months stale at most. Preliminary Steps \u00b6 If you have used Yomichan before, please make a backup of your settings (just in case): Navigate to Yomichan Settings. Go to the Backup section Select Export Settings Yomichan Fields \u00b6 To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable. Yomichan Templates \u00b6 Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 3 types : \"bilingual\" , \"monolingual\" , or \"pitch-accent\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#if (op \"!= = \" (regexMatch (get \" ignored-dict-regex \") \" gu \" dictionaryName) \"\")~}} ignored {{~else if (op \" != = \" (regexMatch (get \" bilingual-dict-regex \") \" gu \" dictionaryName) \"\")~}} bilingual {{~else if (op \" != = \" (regexMatch (get \" utility-dict-regex \") \" gu \" dictionaryName) \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/inline~}} {{~! primary def: first monolingual (or first bilingual if no monolingual dicts found) ~}} {{~#*inline \" jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! custom glossary-single function for additional regex parsing per dictionary ~}} {{~! OVERRIDES brief and noDictionaryTag ~}} {{#*inline \" jpmn-glossary-single \"}} {{~#scope~}} {{~#if (op \" == = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} <div class=\" frequencies \"> {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner2\"> {{ ~dictionary~ }} </span> {{ ~s~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} </div> {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ #*inline \"jpmn-min-freq\" }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0 }}{{ /set~ }} {{ #each definition.frequencies }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{/each}} {{get \" min-freq \"}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : bilingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-secondary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }} Make an example card! \u00b6 At this point, you should be able to make an example card with Yomichan! Here's an excerpt of text you can test Yomichan on: \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right. Yomichan Templates Settings \u00b6 Monolingual Definition \u00b6 If you want the first definition you see (the PrimaryDefinition field) to be monolingual, change the following line at the top of the templates code: {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} to {{ ~#set \"opt-first-definition-type\" \"monolingual\" }}{{ /set~ }} Categorization of Dictionaries \u00b6 If your dictionaries are ending up in the wrong sections, then it is likely a problem with how the template code categorizes the dictionaries. If you made a card above, check that your dictionaries are in the expected places. The foolproof way to check that your dictionaries are correctly categorized is with the {jpmn-test-dict-type} (new as of 0.9.1.2) marker. Under the Anki Templates code, replace Card field with {jpmn-test-dict-type} and press Test . An example output of the above (on the word \u7d50\u69cb) is the following: \u300c\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248\u300d: monolingual \u300c\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248\u300d: monolingual \u300c\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797\u300d: monolingual \u300c\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248\u300d: monolingual \u300c\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9\u300d: monolingual \u300cNHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178\u300d: utility \u300cJMDict Surface Forms\u300d: utility \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300c\u65b0\u548c\u82f1\u300d: bilingual If a dictionary is miscategorized, you will have to edit bilingual-dict-regex or utility-dict-regex at the top of the template code. Monolingual dictionaries are considered to be dictionaries that aren't either of the two above, so no handlebars code has to be changed if one were to use more monolingual dictionaries. To see how to edit the regex, go to this section . Ignoring a Dictionary \u00b6 If you want to see the dictionary on Yomichan but not have it show on Anki, you can use the ignored-dict-regex option. To see how to edit the option, see the section below . Conversely, if you want to not see the dictionary on Yomichan but want it to show up on Anki, see here . Editing the dictionary regex \u00b6 To modify a regex string: Determine the exact tag your dictionary has. To see this, take a word that has a definition in the desired dictionary, and test {jpmn-test-dict-type} like above. The string inside the quotes \u300c\u300d is exactly the tag of the dictionary. Add the dictionary tag to the string, by replacing ADD_x_DICTIONARIES_HERE . For example, if your bilingual dictionary tag is Amazing Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary . If you want to add more than one dictionary, they have to be joined with the | character. For example, if you want to add the bilingual dictionaries Amazing Dictionary and Somewhat-Okay-Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary|Somewhat-Okay-Dictionary . For completeness, here is the modified line for the second example: {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|Amazing Dictionary|Somewhat-Okay-Dictionary)(\\[object Object\\])?$ {{ ~/set~ }} Creating the Cards \u00b6 I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files. This texthooker process has already been explained in great detail by many other smart people in the following links: Texthooker basics Texthooker basics & Visual Novels The setup also works with video files if the video player supports automated copying of subtitles, and if you have the correct subtitle files. MPV with either mpvacious or Immersive add-ons supports this workflow, as detailed in the next section. Many anime subtitle files can be found under kitsuneko . Automating Pictures and Sentence Audio \u00b6 If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! Yomichan is able to automatically generate everything EXCEPT the pictures and sentence audio from the media you are consuming. Fortunately, that can be automated as well. However, the tools to automate that will likely be slightly different for each individual user as it depends on what media they consume, operating system / device, etc. Instead of walking you through how to get these to work, I will instead provide a list of resources you can use. Of course, this list is incomplete, and there could be tools better suited for your workflow. mpvacious add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. Click here to see some basic config changes to get it working with JPMN. # Model names are listed in `Tools -> Manage note types` menu in Anki. model_name = JP Mining Note # Field names as they appear in the selected note type. # If you set `audio_field` or `image_field` empty, # the corresponding media file will not be created. sentence_field = Sentence #secondary_field=SentEng # Not used by the note. This is ignored entirely. audio_field = SentenceAudio image_field = Picture Immersive A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. asbplayer Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Animebook Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. ShareX Windows media recorder which can both take screenshots and record audio. Personally tested. This can be automated to add audio and pictures to the most recently added anki card by following the instructions here . Useful for things that don't have an easy way of getting audio, such as visual novels. ames ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added anki card. jidoujisho Android reader and media player, which can also create Anki cards. Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically mokuro This is not something that can automatically add images or audio to your cards, BUT it allows you to use popup-dictionaries like Yomichan on manga (an actual game-changer). Other \u00b6 Additional Anki add-on(s) \u00b6 These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link) Separate Pitch Accent Deck \u00b6 If you want card types to go to a different deck by default, you can change it by doing the following: Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override... Conclusion \u00b6 If everything is setup correctly, then the difficult part is finally done! The cards can now be created at ease, and now all that's left is understanding how to use and edit the card itself. Head over to Usage to see exactly that.","title":"Setup"},{"location":"setup/#prerequisites","text":"It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Additionally, it is recommeded to use the Qt6 version of Anki if possible. Note Worst case scenario, if any essential add-ons no longer work, you can always downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, try updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done). Finally, notice that this website contains a search bar! If you have a problem at any point, you may find the solution by searching for it.","title":"Prerequisites"},{"location":"setup/#installing-the-card","text":"There are two ways of installing the card: Option 1: The Automatic Way (click here) If you know what git and python is, here's all you have to do: Windows MacOS & Linux git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) python tools\\install.py git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. python tools/install.py The above does the following: Installs the latest version of the note Installs the fonts required for the note If the above made no sense to you, or you just want to install this normally, see the second option below. Option 2: The Manual Way (click here) Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ).","title":"Installing the Card"},{"location":"setup/#verifying-the-note-works","text":"You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Dark Theme Light Theme Please check the following in particular: The fonts should match very similarly with the above example. Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this is red, that means something is wrong with the note's javascript. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box. If you already have Anki-Connect installed, kanji hover should also work. If the furigana on your card seems to appear higher above the kanji compared to the picture, this is likely because you are using the older Qt5 version of Anki. Unfortunately, as this seems like a quirk of Qt5, there does not seem to be a way to fix it outside of upgrading Anki from a Qt5 version to a Qt6 version.","title":"Verifying the Note Works"},{"location":"setup/#anki-setup","text":"","title":"Anki Setup"},{"location":"setup/#updating-anki","text":"If you are updating Anki from an older version, this section aims to give some general tips on updating Anki. If you aren't upgrading Anki from an older version, you can skip this section.","title":"Updating Anki"},{"location":"setup/#dark-mode","text":"The recommended theme for this note is with Anki's dark mode. To change Anki's theme, head over to: Tools \u2192 Preferences \u2192 Basic \u2192 Theme (dropdown) \u2192 Theme: Dark (TODO gif)","title":"Dark Mode"},{"location":"setup/#anki-add-ons","text":"There are certain add-ons that must be installed for this note type to work.","title":"Anki Add-ons"},{"location":"setup/#required-anki-add-ons","text":"","title":"Required Anki Add-ons"},{"location":"setup/#optional-add-ons","text":"These are a set of optional, but useful add-ons that can easily work with the card. If this is your first time here, I recommend skimming through the descriptions and choosing the add-ons that seem appealing for you. Note Make sure to head over to the final steps section afterwards!","title":"Optional Add-ons"},{"location":"setup/#final-steps","text":"After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other.","title":"Final Steps"},{"location":"setup/#transfer-existing-notes","text":"If you wish to transfer existing cards into this note type, please see this page .","title":"Transfer Existing Notes"},{"location":"setup/#updating-the-note","text":"If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update.","title":"Updating the Note"},{"location":"setup/#yomichan-setup","text":"Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working. Note If you are planning on using the JMdict dictionary, the ones provided from most sources (TMW's google drive, Matt's video on Yomichan, and Yomichan's main github page) are all somewhat outdated, which usually means less accurate definitions and less coverage. To get the most recent version of JMdict, download it from the official site and using yomichan-import to get the latest JMdict version available. If you don't want to compile it from source, I provide a download link here , which should only be a few months stale at most.","title":"Yomichan Setup"},{"location":"setup/#preliminary-steps","text":"If you have used Yomichan before, please make a backup of your settings (just in case): Navigate to Yomichan Settings. Go to the Backup section Select Export Settings","title":"Preliminary Steps"},{"location":"setup/#yomichan-fields","text":"To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable.","title":"Yomichan Fields"},{"location":"setup/#yomichan-templates","text":"Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 3 types : \"bilingual\" , \"monolingual\" , or \"pitch-accent\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#if (op \"!= = \" (regexMatch (get \" ignored-dict-regex \") \" gu \" dictionaryName) \"\")~}} ignored {{~else if (op \" != = \" (regexMatch (get \" bilingual-dict-regex \") \" gu \" dictionaryName) \"\")~}} bilingual {{~else if (op \" != = \" (regexMatch (get \" utility-dict-regex \") \" gu \" dictionaryName) \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/inline~}} {{~! primary def: first monolingual (or first bilingual if no monolingual dicts found) ~}} {{~#*inline \" jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! custom glossary-single function for additional regex parsing per dictionary ~}} {{~! OVERRIDES brief and noDictionaryTag ~}} {{#*inline \" jpmn-glossary-single \"}} {{~#scope~}} {{~#if (op \" == = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} <div class=\" frequencies \"> {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner2\"> {{ ~dictionary~ }} </span> {{ ~s~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} </div> {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ #*inline \"jpmn-min-freq\" }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0 }}{{ /set~ }} {{ #each definition.frequencies }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{/each}} {{get \" min-freq \"}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : bilingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-secondary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }}","title":"Yomichan Templates"},{"location":"setup/#make-an-example-card","text":"At this point, you should be able to make an example card with Yomichan! Here's an excerpt of text you can test Yomichan on: \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right.","title":"Make an example card!"},{"location":"setup/#yomichan-templates-settings","text":"","title":"Yomichan Templates Settings"},{"location":"setup/#creating-the-cards","text":"I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files. This texthooker process has already been explained in great detail by many other smart people in the following links: Texthooker basics Texthooker basics & Visual Novels The setup also works with video files if the video player supports automated copying of subtitles, and if you have the correct subtitle files. MPV with either mpvacious or Immersive add-ons supports this workflow, as detailed in the next section. Many anime subtitle files can be found under kitsuneko .","title":"Creating the Cards"},{"location":"setup/#automating-pictures-and-sentence-audio","text":"If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! Yomichan is able to automatically generate everything EXCEPT the pictures and sentence audio from the media you are consuming. Fortunately, that can be automated as well. However, the tools to automate that will likely be slightly different for each individual user as it depends on what media they consume, operating system / device, etc. Instead of walking you through how to get these to work, I will instead provide a list of resources you can use. Of course, this list is incomplete, and there could be tools better suited for your workflow. mpvacious add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. Click here to see some basic config changes to get it working with JPMN. # Model names are listed in `Tools -> Manage note types` menu in Anki. model_name = JP Mining Note # Field names as they appear in the selected note type. # If you set `audio_field` or `image_field` empty, # the corresponding media file will not be created. sentence_field = Sentence #secondary_field=SentEng # Not used by the note. This is ignored entirely. audio_field = SentenceAudio image_field = Picture Immersive A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. asbplayer Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Animebook Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. ShareX Windows media recorder which can both take screenshots and record audio. Personally tested. This can be automated to add audio and pictures to the most recently added anki card by following the instructions here . Useful for things that don't have an easy way of getting audio, such as visual novels. ames ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added anki card. jidoujisho Android reader and media player, which can also create Anki cards. Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically mokuro This is not something that can automatically add images or audio to your cards, BUT it allows you to use popup-dictionaries like Yomichan on manga (an actual game-changer).","title":"Automating Pictures and Sentence Audio"},{"location":"setup/#other","text":"","title":"Other"},{"location":"setup/#additional-anki-add-ons","text":"These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link)","title":"Additional Anki add-on(s)"},{"location":"setup/#separate-pitch-accent-deck","text":"If you want card types to go to a different deck by default, you can change it by doing the following: Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override...","title":"Separate Pitch Accent Deck"},{"location":"setup/#conclusion","text":"If everything is setup correctly, then the difficult part is finally done! The cards can now be created at ease, and now all that's left is understanding how to use and edit the card itself. Head over to Usage to see exactly that.","title":"Conclusion"},{"location":"updating/","text":"Updating the Card \u00b6 This section is dedicated to explaining how to update the card itself. Warning Updating your card will DELETE ANY CHANGES you have made to the templates. Please make a complete backup of your collection (Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package ). Method 1: Python Script (recommended) \u00b6 The recommended way to install the note is by using a python script. This will change the note in place, and gives you various options on how the note will be changed. Lastly, it will give you warnings on anything you have to change manually, such as Yomichan Templates. Running the Script \u00b6 After installing Anki-Connect-Dev, you can now run the python script: Command Line Windows The cross platform command line summary is shown below. A more user friendly set of instructions for Windows users is also available on the second tab, for people who have never used python or git before. # assuming you are at the root of the repo, i.e. after the following commands: # $ git clone https://github.com/Aquafina-water-bottle/jp-mining-note.git # $ cd jp-mining-note # grabs the latest version of the master branch git pull origin/master cd tools # Make sure you have Anki open and Anki-Connect installed! # Also ensure that your python version is 3.10.6 or higher. # Note: Linux users may have to use `python3` instead of `python`. python install.py --update This section explains how to run the script on Windows if you have never used python or git before. Install Python . Any version above 3.10.6 should suffice. Make sure the box for \"Add Python to PATH\" is checked. (This is a common error for people to make. Please pay attention to this step!) Get the latest version of the repository. The easiest way to do this is by heading to the main repository , click on the green Code dropdown, and then download the zip by the Download Zip button. After that, unzip the directory. Open command prompt, and cd (change directory) into jp-mining-note/tools . If you don't know how to do that, see here . With your current directory being the tools directory, run the following command: python install.py --update Once you run the command, further instructions should be given to you through the command line interface. Common Errors \u00b6 This section will document common errors that occur when running the /install.py script. (TODO) Anki-Connect is missing actions \u00b6 re-download anki-connect from ankiweb Anki fields are different \u00b6 updating script is very picky about fields, including order if added field(s): if field matches newly-added field e.g. if your note doesn't have PAPositions but you added a field Positions that fulfills the same purpose, then rename Positions to PAPositions option 1: move fields under Comment all fields under Comment are ignored option 2: use --ignore-order flag (i.e. install.py --update --ignore-order if removed field: don't do this next time, re-add the field and update if you don't want to use the field, move field under Comment and run with --ignore-order flag Simulated fields do not match expected fields \u00b6 see above Expected fields do not appear in Anki's fields list \u00b6 see above Method 2: Manually \u00b6 Warning This method is not recommended . Furthermore, very limited support will be given if you attempt this method. Click here to see the steps on how to update the note manually. Sometimes, you may be able to update the card simply by re-installing the newer version of the .apkg . However, this has the main caveat where if any of the fields are added, renamed, repositioned or deleted between card versions, this will not work (and instead add a new version of JP Mining Note , e.g. named JP Mining Note-b320fa ). Additionally, if you manually edited any of the fields, then this method will not work. To see if the fields have been changed, compare the first two numbers in the version you want to install to the first two numbers of the current card version. (TODO link FAQ) If the first two numbers match, then you are likely safe to manually update the card. If they don't match, then you MAY be able to get away with installing it anyways and transferring the old note types to the new note type. For example, a possible way to update the note is: Install the new version of the note. Select all the cards you want to transfer to the version, and change note type. Remove the old note type. Rename the new note type to the old note type name ( JP Mining Note ). See the changelog to see how the fields have changed and how you have to map the old fields to the new fields. Final Steps \u00b6 There may be further steps outside of just updating the card, such as updating Yomichan's templates / format. Further instructions on these are written below. Updating Yomichan's Anki Card Format \u00b6 To update the Yomichan Format, the steps should be almost the same as the one specified already in the setup . However, there are some differences that you should keep in mind. Refreshing the Fields \u00b6 The most important difference is that if a new field was added or a field has been renamed, then the field will not show up automatically in Yomichan . The only way to refresh the fields as of writing this (2022/09/06) is to change the Model at the top right hand corner to something else, and then switching back to JP Mining Note . Warning Doing the above WILL clear all the fields that you previously had, unless there is a matching field in that other card. Here is how I recommend transitioning as smoothly as possible: As always, create a backup of your Yomichan settings, just in case. After running install.py --update , create a temporary copy of the note by: Tools \u2192 Manage Note Types \u2192 Add \u2192 (select Clone: JP Mining Note ) \u2192 (name it to anything you want. For the following examples, it will be named JP Mining Note (copy) .) \u2192 Ok Head over to Anki Card Format as before . In the top right corner, change Model to JP Mining Note (copy) , and then change it back to JP Mining Note . Update the fields as specified. It will be both specified in the text you see when running install.py --update . However, you should also simply compare the table on the setup page to your filled out fields. Remove the temporary note: Tools \u2192 Manage Note Types \u2192 (select JP Mining Note (copy) ) \u2192 Delete Explanation Using the temporary copy of the updated card means that fields that remain unchanged between the old card and new card will be transferred automatically in the Yomichan Format. If you simply choose some random model like Basic , then almost none of the fields will be preserved, as the Basic card does not have any matching fields with the JP Mining Note model. Updating Yomichan Templates \u00b6 Like the above, you can simply follow the steps already specified in setup . Again, please make sure you reset the existing templates (unless you know what you are doing), and again, please make a backup of your Yomichan settings just in case. Updating the Options File \u00b6 The options file is not updated by default, because default options are built-in within the note itself for each option. If you want to update this file, see the repository's example options file .","title":"Updating JPMN"},{"location":"updating/#updating-the-card","text":"This section is dedicated to explaining how to update the card itself. Warning Updating your card will DELETE ANY CHANGES you have made to the templates. Please make a complete backup of your collection (Main Window \u2192 File (top left corner) \u2192 Export... \u2192 Anki Collection Package ).","title":"Updating the Card"},{"location":"updating/#method-1-python-script-recommended","text":"The recommended way to install the note is by using a python script. This will change the note in place, and gives you various options on how the note will be changed. Lastly, it will give you warnings on anything you have to change manually, such as Yomichan Templates.","title":"Method 1: Python Script (recommended)"},{"location":"updating/#method-2-manually","text":"Warning This method is not recommended . Furthermore, very limited support will be given if you attempt this method. Click here to see the steps on how to update the note manually. Sometimes, you may be able to update the card simply by re-installing the newer version of the .apkg . However, this has the main caveat where if any of the fields are added, renamed, repositioned or deleted between card versions, this will not work (and instead add a new version of JP Mining Note , e.g. named JP Mining Note-b320fa ). Additionally, if you manually edited any of the fields, then this method will not work. To see if the fields have been changed, compare the first two numbers in the version you want to install to the first two numbers of the current card version. (TODO link FAQ) If the first two numbers match, then you are likely safe to manually update the card. If they don't match, then you MAY be able to get away with installing it anyways and transferring the old note types to the new note type. For example, a possible way to update the note is: Install the new version of the note. Select all the cards you want to transfer to the version, and change note type. Remove the old note type. Rename the new note type to the old note type name ( JP Mining Note ). See the changelog to see how the fields have changed and how you have to map the old fields to the new fields.","title":"Method 2: Manually"},{"location":"updating/#final-steps","text":"There may be further steps outside of just updating the card, such as updating Yomichan's templates / format. Further instructions on these are written below.","title":"Final Steps"},{"location":"updating/#updating-yomichans-anki-card-format","text":"To update the Yomichan Format, the steps should be almost the same as the one specified already in the setup . However, there are some differences that you should keep in mind.","title":"Updating Yomichan's Anki Card Format"},{"location":"updating/#refreshing-the-fields","text":"The most important difference is that if a new field was added or a field has been renamed, then the field will not show up automatically in Yomichan . The only way to refresh the fields as of writing this (2022/09/06) is to change the Model at the top right hand corner to something else, and then switching back to JP Mining Note . Warning Doing the above WILL clear all the fields that you previously had, unless there is a matching field in that other card. Here is how I recommend transitioning as smoothly as possible: As always, create a backup of your Yomichan settings, just in case. After running install.py --update , create a temporary copy of the note by: Tools \u2192 Manage Note Types \u2192 Add \u2192 (select Clone: JP Mining Note ) \u2192 (name it to anything you want. For the following examples, it will be named JP Mining Note (copy) .) \u2192 Ok Head over to Anki Card Format as before . In the top right corner, change Model to JP Mining Note (copy) , and then change it back to JP Mining Note . Update the fields as specified. It will be both specified in the text you see when running install.py --update . However, you should also simply compare the table on the setup page to your filled out fields. Remove the temporary note: Tools \u2192 Manage Note Types \u2192 (select JP Mining Note (copy) ) \u2192 Delete Explanation Using the temporary copy of the updated card means that fields that remain unchanged between the old card and new card will be transferred automatically in the Yomichan Format. If you simply choose some random model like Basic , then almost none of the fields will be preserved, as the Basic card does not have any matching fields with the JP Mining Note model.","title":"Refreshing the Fields"},{"location":"updating/#updating-yomichan-templates","text":"Like the above, you can simply follow the steps already specified in setup . Again, please make sure you reset the existing templates (unless you know what you are doing), and again, please make a backup of your Yomichan settings just in case.","title":"Updating Yomichan Templates"},{"location":"updating/#updating-the-options-file","text":"The options file is not updated by default, because default options are built-in within the note itself for each option. If you want to update this file, see the repository's example options file .","title":"Updating the Options File"},{"location":"usage/","text":"This entire section is dedicated to showcasing the user interface, as well as how to use the fields and card options to change the card to your liking. Definitions \u00b6 Binary Field: A field that checks whether it is filled or not with any value, say 1 . The default is implied by the name of the field, and a value of \"true\" means that the field is filled. For example, the IsSentenceCard field will turn the card into a sentence card if filled. If it is not filled, then the card will be a word card. To fill a field automatically, see here . To \"toggle\" a binary field means to either fill the value if is not filled yet, or to remove the value if it is filled. In other words, it means to flip the value of the field between empty and filled. PA: Short for \"Pitch Accent\". User Interface \u00b6 Most of the user interface is already shown off in the video demo in the README, and I would recommend watching it before continuing. However, to dispell any mysteries, here is a fully annotated summary of the user interface. Additional information on some parts of the UI is stated below: Info Circle \u00b6 On hover, the info circle on the top left corner just shows some basic info. TODO gif However, it serves as a sort of notification system to the user, when it has a color. Error \u00b6 TODO gif This should only appear when some javascript code fails. In other words, this should not appear normally. If you get this without modifying the note in any way, please report this as an issue! Warning \u00b6 TODO gif This serves to warn the user about something. It can appear without breaking the functionality of the card. In other words, you can choose to ignore it. Leech \u00b6 TODO gif When the card is a leech, the circle is highlighted yellow (only on the back side) to indicate that it is a leech. Kanji Hover \u00b6 Main page: Kanji Hover Kanji hover shows you if you have seen the kanji in previous cards or not. By default, it searches for the kanji within the \"Word\" field, only for notes of the same type (JP Mining Note). Notice how some results are greyed out. Those results are results from cards that have not been reviewed yet. Conversely, as non-greyed out results come from cards that you have already reviewed, they should represent words that you already know. Note The maximum number of results, as well as the exact queries themselves, can be changed in the options file . Word Pitch \u00b6 The colors and what the lines mean are all described in the official anki addon page as specified here . Images \u00b6 TODO non bullet point click to zoom (the obvious feature) yomichan inserted images + user inserted images get changed to be similar to how yomichan displays images TODO gif Modifying the Front Side (Tested Content) \u00b6 The front side is exactly the content that we want to test ourselves on. Naturally, since we can test ourselves on many aspects of the word, there are many ways to change this tested content. Card types \u00b6 The default card type is a vocab card, where the tested content is simply the word. To change the card to a sentence card, toggle the IsSentenceCard binary field. There are many other card types that this note supports. To see the full list, see this section . Changing the Displayed Content \u00b6 Vocab cards show the Word field and sentence cards show the Sentence fields by default. However, you can modify what is exactly shown in the front by using the AltDisplay field. For example, the previous sentence card looks a little ugly, because the sentence splits off at a strange point. In the AltDisplay field, we add a newline at a sensible place (after the period) to get the following: Another example is shown below, when we want to only test the last sentence: One nice feature is that the AltDisplay has hoverable furigana text enabled by default. In other words, you can use furigana in the field. I personally use this to insert furigana for certain names, since I'm usually not testing myself on how to read a name. For example, the card below has the following HTML: \u4e0a\u6761[\u304b\u307f\u3058\u3087\u3046] \u606d\u4ecb[\u304d\u3087\u3046\u3059\u3051]\u541b\u306e\u3053\u3068\u304a < b > \u6155\u3044 </ b > \u3057\u3066\u307e\u3057\u305f\u306e Note If you are using a vocab card, you can use AltDisplay to show something that differs from the Word field. Note On Hybrid Card types, the AltDisplay field only affects the sentence, and not the front displayed word. Hints \u00b6 Finally, you can include a customized hint to show at the front of the card, by using the Hint field. This will show as a collapsible field at the front of card. If you do not want the hint to be hidden by default, you can use the HintNotHidden field instead. Modifying the Back Side \u00b6 Not much has to be said about modifying the back side of the card, outside of modifying pitch accent. The PrimaryDefinition field contains the main content, and should be the main field to edit if one wants to put down more notes about the card. I personally use this to write down grammar point explanations, sentence pitch accent info, etc. on top of the defintions. The AdditionalNotes field is useful if you want to put down even more notes, but keep it in a collapsible field to reduce vertical space. I personally use it to write down the context of the scene, and other notes that aren't completely crutial to understanding the tested content. Bolding anything in these sections will highlight the word in a light yellow tint, to make the bold stand out more. Modifying Pitch Accent \u00b6 Main page: Auto Pitch Accent The displayed pitch accent is usually the first position found in PAPositions . However, you can override this automatically chosen position using the PAOverride field. TODO gif (change \u507d\u8005 to 0, 1, 2, 4) More information and customization, including automatically coloring the word with Migaku colors, can be found in the main page linked above. Modifying Other Aspects of the Card \u00b6 Key field \u00b6 This contains the tested word. In other words, this contains the exact same content as the field below, but this field is specifically not used in the card template. This is to allow the user to modify the key if duplicates arise, while still being able to test the word. For example, if I were to test different usages of \u4e0a, I can change this key value to \u4e0a (preposition) , \u4e0a (grammar) , etc. and add a new card. It is expected that this Key field is unique; a warning will appear on cards that have a duplicate key. Comment field \u00b6 Similarly to the Key field, this field will not be used in any card template. In other words, this is a place where you can write down notes without affecting the card itself. Testing Pitch Accent \u00b6 This note type provides many options to target exactly what parts of pitch accent you want to test yourself on. By default, pitch accent is not tested. To test for pitch accent, fill the PAShowInfo field. You should see a circle to the left of the word or sentence. TODO annotated image for testing pitch accent Pitch Accent Indicator \u00b6 This circle you see is called the \"Pitch Accent Indicator\", or \"PA Indicator\" for short. How this card indicates what pitch accent is tested is by the PA indicator's color. Here are what the colors represent: Green: The entire sentence is tested. Blue: Only the word is tested. Red: Pitch accent should not be tested in any way. If you ever forget what the colors mean, you can hover your mouse over the circle to get a description of what is being tested. Alternatively, you can look at the top right of the screen and look at the value after the / . Note If the tested content is a sentence (card), but you want to only test for word pitch accent, you would not be able to see the word normally. To see the word that is tested, there is a button to toggle whether the word is highlighted or not. The content that is highlighted is exactly what is bolded in the Sentence (or AltDisplay / AltDisplayPASentenceCard ) field, which is the added word by default. Selecting the Pitch Accent \u00b6 The following shows how to fill in the proper fields to test pitch accent: Filled fields PA Indicator Separated Cards (None, default) (Doesn't exist) PAShowInfo Green (sentence) or blue (word), depending on the tested content PAShowInfo & PADoNotTest Red (not tested) PAShowInfo & PATestOnlyWord Blue (word) PAShowInfo & PASeparateWordCard Red (not tested) Word PAShowInfo & PASeparateSentenceCard Blue (word) Sentence PAShowInfo & PASeparateWordCard & PASeparateSentenceCard Red (not tested) Word & Sentence To clarify some of the above: By default, if only PAShowInfo is filled, then the entire display is tested For vocab cards, targeted sentence cards, and hybrid vocab cards, only the word PA is tested (PA indicator: blue). For sentence cards and hybrid sentence, the entire sentence PA is tested (PA indicator: green). To test just the word pitch accent, fill the PATestOnlyWord field. To create completely separate cards to just test pitch accent on, use the fields PASeparateSentenceCard and/or PASeparateWordCard . If a PA word card is created, then the default card does not test pitch accent. Similarly, if a PA sentence card is created, then the default card only tests the word pitch accent. Modifying Pitch Accent Sentence Cards \u00b6 The field AltDisplayPASentenceCard exists to customize the display of the PA sentence card, if it exists. It works similarly to AltDisplay , and takes priority over AltDisplay in the PA sentence card. Cloze Deletion Cards \u00b6 Cloze deletion cards are simply a fancy way of saying \"fill-in-the-blank cards\". To test yourself, you simply check if you can hear the correct word in the missing sections. To create a cloze deletion card, simply fill in the SeparateClozeDeletionCard field. The words that are hidden are exactly the words that are bolded in the Sentence (or AltDisplay ) field.","title":"Usage"},{"location":"usage/#definitions","text":"Binary Field: A field that checks whether it is filled or not with any value, say 1 . The default is implied by the name of the field, and a value of \"true\" means that the field is filled. For example, the IsSentenceCard field will turn the card into a sentence card if filled. If it is not filled, then the card will be a word card. To fill a field automatically, see here . To \"toggle\" a binary field means to either fill the value if is not filled yet, or to remove the value if it is filled. In other words, it means to flip the value of the field between empty and filled. PA: Short for \"Pitch Accent\".","title":"Definitions"},{"location":"usage/#user-interface","text":"Most of the user interface is already shown off in the video demo in the README, and I would recommend watching it before continuing. However, to dispell any mysteries, here is a fully annotated summary of the user interface. Additional information on some parts of the UI is stated below:","title":"User Interface"},{"location":"usage/#info-circle","text":"On hover, the info circle on the top left corner just shows some basic info. TODO gif However, it serves as a sort of notification system to the user, when it has a color.","title":"Info Circle"},{"location":"usage/#kanji-hover","text":"Main page: Kanji Hover Kanji hover shows you if you have seen the kanji in previous cards or not. By default, it searches for the kanji within the \"Word\" field, only for notes of the same type (JP Mining Note). Notice how some results are greyed out. Those results are results from cards that have not been reviewed yet. Conversely, as non-greyed out results come from cards that you have already reviewed, they should represent words that you already know. Note The maximum number of results, as well as the exact queries themselves, can be changed in the options file .","title":"Kanji Hover"},{"location":"usage/#word-pitch","text":"The colors and what the lines mean are all described in the official anki addon page as specified here .","title":"Word Pitch"},{"location":"usage/#images","text":"TODO non bullet point click to zoom (the obvious feature) yomichan inserted images + user inserted images get changed to be similar to how yomichan displays images TODO gif","title":"Images"},{"location":"usage/#modifying-the-front-side-tested-content","text":"The front side is exactly the content that we want to test ourselves on. Naturally, since we can test ourselves on many aspects of the word, there are many ways to change this tested content.","title":"Modifying the Front Side (Tested Content)"},{"location":"usage/#card-types","text":"The default card type is a vocab card, where the tested content is simply the word. To change the card to a sentence card, toggle the IsSentenceCard binary field. There are many other card types that this note supports. To see the full list, see this section .","title":"Card types"},{"location":"usage/#changing-the-displayed-content","text":"Vocab cards show the Word field and sentence cards show the Sentence fields by default. However, you can modify what is exactly shown in the front by using the AltDisplay field. For example, the previous sentence card looks a little ugly, because the sentence splits off at a strange point. In the AltDisplay field, we add a newline at a sensible place (after the period) to get the following: Another example is shown below, when we want to only test the last sentence: One nice feature is that the AltDisplay has hoverable furigana text enabled by default. In other words, you can use furigana in the field. I personally use this to insert furigana for certain names, since I'm usually not testing myself on how to read a name. For example, the card below has the following HTML: \u4e0a\u6761[\u304b\u307f\u3058\u3087\u3046] \u606d\u4ecb[\u304d\u3087\u3046\u3059\u3051]\u541b\u306e\u3053\u3068\u304a < b > \u6155\u3044 </ b > \u3057\u3066\u307e\u3057\u305f\u306e Note If you are using a vocab card, you can use AltDisplay to show something that differs from the Word field. Note On Hybrid Card types, the AltDisplay field only affects the sentence, and not the front displayed word.","title":"Changing the Displayed Content"},{"location":"usage/#hints","text":"Finally, you can include a customized hint to show at the front of the card, by using the Hint field. This will show as a collapsible field at the front of card. If you do not want the hint to be hidden by default, you can use the HintNotHidden field instead.","title":"Hints"},{"location":"usage/#modifying-the-back-side","text":"Not much has to be said about modifying the back side of the card, outside of modifying pitch accent. The PrimaryDefinition field contains the main content, and should be the main field to edit if one wants to put down more notes about the card. I personally use this to write down grammar point explanations, sentence pitch accent info, etc. on top of the defintions. The AdditionalNotes field is useful if you want to put down even more notes, but keep it in a collapsible field to reduce vertical space. I personally use it to write down the context of the scene, and other notes that aren't completely crutial to understanding the tested content. Bolding anything in these sections will highlight the word in a light yellow tint, to make the bold stand out more.","title":"Modifying the Back Side"},{"location":"usage/#modifying-pitch-accent","text":"Main page: Auto Pitch Accent The displayed pitch accent is usually the first position found in PAPositions . However, you can override this automatically chosen position using the PAOverride field. TODO gif (change \u507d\u8005 to 0, 1, 2, 4) More information and customization, including automatically coloring the word with Migaku colors, can be found in the main page linked above.","title":"Modifying Pitch Accent"},{"location":"usage/#modifying-other-aspects-of-the-card","text":"","title":"Modifying Other Aspects of the Card"},{"location":"usage/#key-field","text":"This contains the tested word. In other words, this contains the exact same content as the field below, but this field is specifically not used in the card template. This is to allow the user to modify the key if duplicates arise, while still being able to test the word. For example, if I were to test different usages of \u4e0a, I can change this key value to \u4e0a (preposition) , \u4e0a (grammar) , etc. and add a new card. It is expected that this Key field is unique; a warning will appear on cards that have a duplicate key.","title":"Key field"},{"location":"usage/#comment-field","text":"Similarly to the Key field, this field will not be used in any card template. In other words, this is a place where you can write down notes without affecting the card itself.","title":"Comment field"},{"location":"usage/#testing-pitch-accent","text":"This note type provides many options to target exactly what parts of pitch accent you want to test yourself on. By default, pitch accent is not tested. To test for pitch accent, fill the PAShowInfo field. You should see a circle to the left of the word or sentence. TODO annotated image for testing pitch accent","title":"Testing Pitch Accent"},{"location":"usage/#pitch-accent-indicator","text":"This circle you see is called the \"Pitch Accent Indicator\", or \"PA Indicator\" for short. How this card indicates what pitch accent is tested is by the PA indicator's color. Here are what the colors represent: Green: The entire sentence is tested. Blue: Only the word is tested. Red: Pitch accent should not be tested in any way. If you ever forget what the colors mean, you can hover your mouse over the circle to get a description of what is being tested. Alternatively, you can look at the top right of the screen and look at the value after the / . Note If the tested content is a sentence (card), but you want to only test for word pitch accent, you would not be able to see the word normally. To see the word that is tested, there is a button to toggle whether the word is highlighted or not. The content that is highlighted is exactly what is bolded in the Sentence (or AltDisplay / AltDisplayPASentenceCard ) field, which is the added word by default.","title":"Pitch Accent Indicator"},{"location":"usage/#selecting-the-pitch-accent","text":"The following shows how to fill in the proper fields to test pitch accent: Filled fields PA Indicator Separated Cards (None, default) (Doesn't exist) PAShowInfo Green (sentence) or blue (word), depending on the tested content PAShowInfo & PADoNotTest Red (not tested) PAShowInfo & PATestOnlyWord Blue (word) PAShowInfo & PASeparateWordCard Red (not tested) Word PAShowInfo & PASeparateSentenceCard Blue (word) Sentence PAShowInfo & PASeparateWordCard & PASeparateSentenceCard Red (not tested) Word & Sentence To clarify some of the above: By default, if only PAShowInfo is filled, then the entire display is tested For vocab cards, targeted sentence cards, and hybrid vocab cards, only the word PA is tested (PA indicator: blue). For sentence cards and hybrid sentence, the entire sentence PA is tested (PA indicator: green). To test just the word pitch accent, fill the PATestOnlyWord field. To create completely separate cards to just test pitch accent on, use the fields PASeparateSentenceCard and/or PASeparateWordCard . If a PA word card is created, then the default card does not test pitch accent. Similarly, if a PA sentence card is created, then the default card only tests the word pitch accent.","title":"Selecting the Pitch Accent"},{"location":"usage/#modifying-pitch-accent-sentence-cards","text":"The field AltDisplayPASentenceCard exists to customize the display of the PA sentence card, if it exists. It works similarly to AltDisplay , and takes priority over AltDisplay in the PA sentence card.","title":"Modifying Pitch Accent Sentence Cards"},{"location":"usage/#cloze-deletion-cards","text":"Cloze deletion cards are simply a fancy way of saying \"fill-in-the-blank cards\". To test yourself, you simply check if you can hear the correct word in the missing sections. To create a cloze deletion card, simply fill in the SeparateClozeDeletionCard field. The words that are hidden are exactly the words that are bolded in the Sentence (or AltDisplay ) field.","title":"Cloze Deletion Cards"}]}