{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Testing media \u00b6 this is expected to work right? and css code: . headword-term ruby rt { user-select : none ; } Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Various Options \u00b6 Option 1: test Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Option 2: testing Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. {{ #*inline \"selection-text\" }} {{ ~#if (op \"!= = \" (getMedia \" selectionText \") \"\")~}} {{~#getMedia \" selectionText \" }}{{ /getMedia~ }} {{ ~else~ }} {{ ~> glossary ~ }} {{ /if~ }} {{ /inline }} testing jinja stuff: 1 ? 2 ? 3 ? a? guh","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#testing-media","text":"this is expected to work right? and css code: . headword-term ruby rt { user-select : none ; } Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Testing media"},{"location":"#various-options","text":"Option 1: test Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Option 2: testing Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. {{ #*inline \"selection-text\" }} {{ ~#if (op \"!= = \" (getMedia \" selectionText \") \"\")~}} {{~#getMedia \" selectionText \" }}{{ /getMedia~ }} {{ ~else~ }} {{ ~> glossary ~ }} {{ /if~ }} {{ /inline }} testing jinja stuff: 1 ? 2 ? 3 ? a? guh","title":"Various Options"},{"location":"about/","text":"Procubuit petit dea est Rhodopen \u00b6 Pudoris novercae bracchia adsere \u00b6 Lorem markdownum mihi Charybdis decorem. Pingit penetrant suum. Protinus heu columbas , Hippalmon quae tollensque saxo. Quos infelix spectes temptasse nominis tu manifesta Tu precantem aetas Caelestibus adsensere cetera Exitium auras Celasset illius Secum ambo Devorat ipsi sonis lunae \u00b6 Ratis remollescit tuae praemia ratus laevaque, et aut cui et sibilat rarus, umidus cervina. Rutilis eodem Circaea cui! Suis femina supremumque tantae precor? Pars lucus silva in suas vectabantur absens poteris : enim non atque Praescia, quamquam. Simul sinamus se arcuit frustra Natalis vero haerent Aut ut dederant leones receptis De igni Diu ora amans in resecat tempestate inmotos Tecta pugnatque aequora taurus abesse illud \u00b6 Et pestem Herculeamque illis cruris subiungit innumerae, capillis subsequitur talis poterit exarsit patriam indicet est oculos illic fervoribus retorsit. Lupum squamea longe lupis oculos vita inlimis dixit nec diemque ense qualia, somno prospiciens mihi ait manus concipit. Diversis illa, cum parentum circumdat gaudia! Memnonis carent Aquis cuncta armos quod solum recurvam bene Languescuntque posse in scit manibus sine Mihi arbor domus haud viderat venturas gaudia Et magna Pars illo pauca ait quae superba pluribus Et aetas da ille increscere ulterius monte ; per alas haec tollere, qui. Tum nunc ubi dea, est et qua, sua ira illa. Confinia est coniunx rapta traderet vocem nostro, squamea si. Terras desinite litus, iter sua et sacrificos se dare se rapior haec amaris. Vos o! Vobis figuras. Haec massa, faciem, incubuitque regnum. Arva quoque cute.","title":"About"},{"location":"about/#procubuit-petit-dea-est-rhodopen","text":"","title":"Procubuit petit dea est Rhodopen"},{"location":"about/#pudoris-novercae-bracchia-adsere","text":"Lorem markdownum mihi Charybdis decorem. Pingit penetrant suum. Protinus heu columbas , Hippalmon quae tollensque saxo. Quos infelix spectes temptasse nominis tu manifesta Tu precantem aetas Caelestibus adsensere cetera Exitium auras Celasset illius Secum ambo","title":"Pudoris novercae bracchia adsere"},{"location":"about/#devorat-ipsi-sonis-lunae","text":"Ratis remollescit tuae praemia ratus laevaque, et aut cui et sibilat rarus, umidus cervina. Rutilis eodem Circaea cui! Suis femina supremumque tantae precor? Pars lucus silva in suas vectabantur absens poteris : enim non atque Praescia, quamquam. Simul sinamus se arcuit frustra Natalis vero haerent Aut ut dederant leones receptis De igni Diu ora amans in resecat tempestate inmotos","title":"Devorat ipsi sonis lunae"},{"location":"about/#tecta-pugnatque-aequora-taurus-abesse-illud","text":"Et pestem Herculeamque illis cruris subiungit innumerae, capillis subsequitur talis poterit exarsit patriam indicet est oculos illic fervoribus retorsit. Lupum squamea longe lupis oculos vita inlimis dixit nec diemque ense qualia, somno prospiciens mihi ait manus concipit. Diversis illa, cum parentum circumdat gaudia! Memnonis carent Aquis cuncta armos quod solum recurvam bene Languescuntque posse in scit manibus sine Mihi arbor domus haud viderat venturas gaudia Et magna Pars illo pauca ait quae superba pluribus Et aetas da ille increscere ulterius monte ; per alas haec tollere, qui. Tum nunc ubi dea, est et qua, sua ira illa. Confinia est coniunx rapta traderet vocem nostro, squamea si. Terras desinite litus, iter sua et sacrificos se dare se rapior haec amaris. Vos o! Vobis figuras. Haec massa, faciem, incubuitque regnum. Arva quoque cute.","title":"Tecta pugnatque aequora taurus abesse illud"},{"location":"setup/","text":"This entire section is dedicated to providing the minimal setup to properly create cards with this note type. Note that this setup is primarly PC based, and requires Anki and Yomichan for the main card creation process. Prerequisites \u00b6 It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Worst case scenario, if any essential add-ons no longer work, you can downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, I recommend updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done). Installing the Card \u00b6 There are two ways of installing the card: (Option 1) The Automatic Way If you know what git and python is, here's all you have to do: git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. # Additionally, on Windows machines, your file path should be `tools\\install.py` python tools/install.py The above does the following: - Installs the latest version of the note - Installs the fonts required for the note (Option 2) The Manual Way If the above made literally no sense to you, or you just want to install this normally, see below: Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ). Verifying the Note Works \u00b6 You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Please check the following in particular: The fonts should match very similarly with the above example. Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this is red, that means something is wrong with the note's javascript. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box. Anki Setup \u00b6 For this card type to work, some Anki add-ons are required to connect to external sources and to auto-generate certain fields. There are also certain add-ons that will not be supported by this note type. Please disable them and restart Anki before continuing. Conflicting add-ons \u00b6 None since I'm not aware of any currently. Let me know if you find one! Required Anki add-ons \u00b6 To download all the required add-ons, copy and paste the following numbers into the Add-ons window. ( Tools \u2192 Add-ons \u2192 Get Add-ons... ) 2055492159 181103283 After installing the add-ons, you will have to change the configs of the add-ons to work with this note type. Continue reading to see the required config changes. Anki-Connect \u00b6 (Official page) Code: 2055492159 Required for Yomichan and most other Anki-related automated tasks to work. I use the default config that comes with the add-on. Note Some older versions of Anki (2.1.49 and below) require a hack to the Anki-Connect config for the card to work. Add \"null\" to the webCorsOriginList list. An example of how the config should look is shown below: \"webCorsOriginList\": [ \"http://localhost\", \"null\" ] Of course, this isn't very safe and it is highly recommended that you upgrade Anki to avoid this problem. CSS Injector \u00b6 (Official page) Code: 181103283 This add-on is not strictly necessary. However, if you don't use this, the fields within the Anki field editor won't have certain stylizations that makes the field actually interpretable, so I strongly recommend using this. There are two ways of using css injector with this note type: (Option 1) Automatically updates with the card (recommended) As a preliminary step, you will have to remove the empty field.css file that comes with the add-on. That can be done through command line (below), or you can simply navigate to the Anki2/addons21/181103283/user_files folder (within the addons folder ) and delete field.css . # windows command # be sure to change USERNAME to your computer username! del \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" # mac command rm \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" # linux command rm \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" For Windows users, run these two commands in command prompt (not PowerShell!) with elevated permissions. Additionally, be sure to change USERNAME to your computer username and PROFILENAME to your Anki profile. mklink \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\addons21\\181103283\\user_files\\field.css\" \"C:\\Users\\USERNAME\\AppData\\Roaming\\Anki2\\PROFILENAME\\collection.media\\_field.css\" Note There are two USERNAME 's to replace, and one PROFILENAME to replace in the above command. Make sure to replace all the fields! Note If you've never used command prompt before, check this . For Mac users, run the following command (be sure to change PROFILENAME to your Anki profile): ln -s \"~/Library/Application Support/Anki2/PROFILENAME/collection.media/_field.css\" \"~/Library/Application Support/Anki2/addons21/181103283/user_files/field.css\" For Linux users, run the following command (be sure to change PROFILENAME to your Anki profile): ln -s \"~/.local/share/Anki2/PROFILENAME/collection.media/_field.css\" \"~/.local/share/Anki2/addons21/181103283/user_files/field.css\" (Option 2) Manually without respecting updates Navigate to css injector add-on directory ( Anki2/addons21/181103283/user_files ) Remove the existing field.css file Manually copy the _field.css file (found under your profile's media directory) into the css injector add-on directory Rename _field.css into field.css . Note If the _field.css file ever updates, you will have to manually copy and rename the file again into the correct position. Optional Add-ons \u00b6 These are a set of optional, but useful add-ons that can easily work with the card. AJT Furigana \u00b6 (Official page) Code: 1344485230 Alternative and up-to-date version of JapaneseSupport. Automatically generates furigana upon Yomichan card creation. This add-on is optional, because the card will simply show the sentence without furigana if there is no furigana generated sentence. Note Furigana generation is occasionally incorrect, so if you plan on using these regularly, you should double-check the readings to make sure they are correct. Config Changes \u00b6 To change the config of any Anki add-on, head over to Tools \u2192 Add-ons \u2192 (select the add-on) \u2192 Config . The important things to change in the config are generate_on_note_add , fields and note_types . Click here to see the full AJT Furigana config { \"context_menu\" : { \"generate_furigana\" : true , \"generate_furigana_no_kanji\" : true , \"to_hiragana\" : true , \"to_katakana\" : true }, \"fields\" : [ // (1)! { \"destination\" : \"SentenceReading\" , \"source\" : \"Sentence\" } ], \"furigana_suffix\" : \" (furigana)\" , \"generate_on_note_add\" : true , // (2)! \"note_types\" : [ // (3)! \"jp\" ], \"skip_numbers\" : false , \"skip_words\" : \"\" , \"toolbar\" : { \"clean_furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+u\" , \"text\" : \"\u524a\" }, \"furigana_button\" : { \"enable\" : false , \"shortcut\" : \"Alt+o\" , \"text\" : \"\u632f\" } } } We change the field names to match this note type. This ensures that the pitch accent is added upon initial note creation. Note that this is technically optional. If you are likely to change the sentence after adding the note, then it is possible to leave this as false , and bulk add the furigana later. Similarly to the fields change, we change this to properly detect this note type. AJT Pitch Accent \u00b6 (Official page) Code: 1225470483 Automatically adds pitch accent info given the word. For the purposes of the card, the only purpose that this add-on serves is the following: - Adds devoiced and nasal information to the existing reading. - If your Yomichan pitch accent dictionaries did not contain any pitch accent info for the word but the add-on does, then it will use the add-on data. Config Changes \u00b6 The important things to change in the config are generate_on_note_add , destination_fields , source_fields note_types , and styles . Click here to see the full AJT Pitch Accent config { \"destination_fields\" : [ \"AJTWordPitch\" ], \"generate_on_note_add\" : true , \"kana_lookups\" : true , \"lookup_shortcut\" : \"Ctrl+8\" , \"note_types\" : [ \"jp\" ], \"regenerate_readings\" : false , \"skip_words\" : \"\u3078,\u304b,\u3088,\u3093,\u3060,\u3073,\u306e,\u3084,\u306d,\u3070,\u3066,\u3068,\u305f,\u304c,\u306b,\u306a,\u306f,\u3082,\u307e\u3059,\u304b\u3089,\u3044\u308b,\u305f\u3061,\u3066\u308b,\u3046,\u307e\u3057\u3087,\u305f\u3044,\u3067\u3059\" , \"source_fields\" : [ \"Word\" ], \"styles\" : { \"&#42780;\" : \"<span class=\\\"downstep\\\"><span class=\\\"downstep-inner\\\">&#42780;</span></span>\" , \"class=\\\"overline\\\"\" : \"style=\\\"text-decoration:overline;\\\" class=\\\"pitchoverline\\\"\" }, \"use_hiragana\" : false , \"use_mecab\" : true } To explain the changes: generate_on_note_add and note_types are changed similarly in the previous section. destination_fields and source_fields are changed similarily to fields in the previous section. styles adds custom stylization that creates the pitch accent lines and downsteps as you see in the example note. Final Steps \u00b6 After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other. Transfer Existing Notes \u00b6 If you wish to transfer existing cards into this note type, please see this page . Updating the Note \u00b6 If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update. Yomichan Setup \u00b6 Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working. Preliminary Steps \u00b6 If you have used Yomichan before, please make a backup of your settings (just in case): Navigate to Yomichan Settings. Go to the Backup section Select Export Settings Yomichan Fields \u00b6 To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note : Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable. Yomichan Templates \u00b6 Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 3 types : \"bilingual\" , \"monolingual\" , or \"pitch-accent\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#if (op \"!= = \" (regexMatch (get \" ignored-dict-regex \") \" gu \" dictionaryName) \"\")~}} ignored {{~else if (op \" != = \" (regexMatch (get \" bilingual-dict-regex \") \" gu \" dictionaryName) \"\")~}} bilingual {{~else if (op \" != = \" (regexMatch (get \" utility-dict-regex \") \" gu \" dictionaryName) \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/inline~}} {{~! primary def: first monolingual (or first bilingual if no monolingual dicts found) ~}} {{~#*inline \" jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! custom glossary-single function for additional regex parsing per dictionary ~}} {{~! OVERRIDES brief and noDictionaryTag ~}} {{#*inline \" jpmn-glossary-single \"}} {{~#scope~}} {{~#if (op \" == = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} <div class=\" frequencies \"> {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner2\"> {{ ~dictionary~ }} </span> {{ ~s~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} </div> {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ #*inline \"jpmn-min-freq\" }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0 }}{{ /set~ }} {{ #each definition.frequencies }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{/each}} {{get \" min-freq \"}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : bilingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-secondary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }} Make an example card! \u00b6 At this point, you should be able to make an example card with Yomichan! Here's an excerpt of text you can test Yomichan on: \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right. Yomichan Templates Settings \u00b6 Monolingual Definition \u00b6 If you want the first definition you see (the PrimaryDefinition field) to be monolingual, change the following line at the top of the templates code: {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} to {{ ~#set \"opt-first-definition-type\" \"monolingual\" }}{{ /set~ }} Categorization of Dictionaries \u00b6 If your dictionaries are ending up in the wrong sections, then it is likely a problem with how the template code categorizes the dictionaries. If you made a card above, check that your dictionaries are in the expected places. The foolproof way to check that your dictionaries are correctly categorized is with the {jpmn-test-dict-type} (new as of 0.9.1.2) marker. Under the Anki Templates code, replace Card field with {jpmn-test-dict-type} and press Test . An example output of the above (on the word \u7d50\u69cb) is the following: \u300c\u65fa\u6587\u793e\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u5341\u4e00\u7248\u300d: monolingual \u300c\u660e\u93e1\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e8c\u7248\u300d: monolingual \u300c\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b0\u8f9e\u6797\u300d: monolingual \u300c\u65b0\u660e\u89e3\u56fd\u8a9e\u8f9e\u5178 \u7b2c\u4e94\u7248\u300d: monolingual \u300c\u30c7\u30b8\u30bf\u30eb\u5927\u8f9e\u6cc9\u300d: monolingual \u300cNHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178\u300d: utility \u300cJMDict Surface Forms\u300d: utility \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300cJMdict (English)\u300d: bilingual \u300c\u65b0\u548c\u82f1\u300d: bilingual If a dictionary is miscategorized, you will have to edit bilingual-dict-regex or utility-dict-regex at the top of the template code. Monolingual dictionaries are considered to be dictionaries that aren't either of the two above, so no handlebars code has to be changed if one were to use more monolingual dictionaries. To see how to edit the regex, go to this section . Ignoring a Dictionary \u00b6 If you want to see the dictionary on Yomichan but not have it show on Anki, you can use the ignored-dict-regex option. To see how to edit the option, see the section below . Conversely, if you want to not see the dictionary on Yomichan but want it to show up on Anki, see here . Editing the dictionary regex \u00b6 To modify a regex string: Determine the exact tag your dictionary has. To see this, take a word that has a definition in the desired dictionary, and test {jpmn-test-dict-type} like above. The string inside the quotes \u300c\u300d is exactly the tag of the dictionary. Add the dictionary tag to the string, by replacing ADD_x_DICTIONARIES_HERE . For example, if your bilingual dictionary tag is Amazing Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary . If you want to add more than one dictionary, they have to be joined with the | character. For example, if you want to add the bilingual dictionaries Amazing Dictionary and Somewhat-Okay-Dictionary , change ADD_BILINGUAL_DICTIONARIES_HERE to Amazing Dictionary|Somewhat-Okay-Dictionary . For completeness, here is the modified line for the second example: {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|Amazing Dictionary|Somewhat-Okay-Dictionary)(\\[object Object\\])?$ {{ ~/set~ }} Other Yomichan Settings \u00b6 Again, if you have never used Yomichan before, I recommend checking out this page . If you are planning on using the JMDict dictionary, I recommend downloading from the official site and using yomichan-import to get the latest jmdict version available. This is because other sources could have older definitions, which usually means less accurate definitions. This link has further template code, which creates markers for individual dictionaries. This has certain extended capabilities over my template code, such as removing the first line. Instructions on adding Forvo as an alternate audio source to Yomichan can be found here Creating the Cards \u00b6 I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files. This texthooker process has already been explained in great detail by many other smart people in the following links: Texthooker basics Texthooker basics & Visual Novels The setup also works with video files if the video player supports automated copying of subtitles, and if you have the correct subtitle files. MPV with either mpvacious or Immersive add-ons supports this workflow, as detailed in the next section. Many anime subtitle files can be found under kitsuneko . Automating Pictures and Sentence Audio \u00b6 If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! Yomichan is able to automatically generate everything EXCEPT the pictures and sentence audio from the media you are consuming. Fortunately, that can be automated as well. However, the tools to automate that will likely be slightly different for each individual user as it depends on what media they consume, operating system / device, etc. Instead of walking you through how to get these to work, I will instead provide a list of resources you can use. Of course, this list is incomplete, and there could be tools better suited for your workflow. mpvacious add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. Immersive A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. asbplayer Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Animebook Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. ShareX Windows media recorder which can both take screenshots and record audio. Personally tested. This can be automated to add audio and pictures to the most recently added anki card by following the instructions here . Useful for things that don't have an easy way of getting audio, such as visual novels. ames ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added anki card. jidoujisho Android reader and media player, which can also create Anki cards. Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically mokuro This is not something that can automatically add images or audio to your cards, BUT it allows you to use popup-dictionaries like Yomichan on manga (an actual game-changer). Other \u00b6 Anki add-on(s) \u00b6 These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link) Separate Pitch Accent Deck \u00b6 If you want card types to go to a different deck by default, you can change it by doing the following: Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override... Conclusion \u00b6 If everything is setup correctly, then the difficult part is finally done! The cards can now be created at ease, and now all that's left is understanding how to use and edit the card itself. Head over to Usage to see exactly that.","title":"Setup"},{"location":"setup/#prerequisites","text":"It is highly recommend that you are using the latest Anki version (or as close as you can get to the latest Anki version), as the note is primarily tested and maintained on the latest versions of Anki. Worst case scenario, if any essential add-ons no longer work, you can downgrade back to your current version. Similarly, if you downloaded Yomichan from a file, I recommend updating that as well. (Most users should have installed it from their browser's extension page, in which case nothing has to be done).","title":"Prerequisites"},{"location":"setup/#installing-the-card","text":"There are two ways of installing the card: (Option 1) The Automatic Way If you know what git and python is, here's all you have to do: git clone \"https://github.com/Aquafina-water-bottle/jp-mining-note.git\" cd jp-mining-note # Ensure you have Anki open, and with anki-connect running # Also ensure that you have python 3.10+ installed. # It *MAY* work with lower versions of python, but I make no such guarantee. ;) # You may have to use `python3` instead of `python`. # Additionally, on Windows machines, your file path should be `tools\\install.py` python tools/install.py The above does the following: - Installs the latest version of the note - Installs the fonts required for the note (Option 2) The Manual Way If the above made literally no sense to you, or you just want to install this normally, see below: Go to the releases page and download the cards from the latest release. You should download the {version}-jpmn_example_cards.apkg file. After you download the cards, import them by navigating to Anki by doing the following: File (top left corner) \u2192 Import... By default, the custom fonts do not come with the .apkg file. To install these fonts, head over to this repository's media folder and download the 4 .otf files. Move the .otf files into the media folder of your profile ( Anki2/PROFILENAME/collections.media ).","title":"Installing the Card"},{"location":"setup/#verifying-the-note-works","text":"You should see a deck JPMN-Examples in your collection. View one of the cards and make sure the card looks similar to the one below: Please check the following in particular: The fonts should match very similarly with the above example. Notice how at the top left corner, the info circle (the \"i\" encased within the circle) is the default grey color. If this is red, that means something is wrong with the note's javascript. Please see this section for basic troubleshooting. Clicking on the image to zoom should work out of the box.","title":"Verifying the Note Works"},{"location":"setup/#anki-setup","text":"For this card type to work, some Anki add-ons are required to connect to external sources and to auto-generate certain fields. There are also certain add-ons that will not be supported by this note type. Please disable them and restart Anki before continuing.","title":"Anki Setup"},{"location":"setup/#conflicting-add-ons","text":"None since I'm not aware of any currently. Let me know if you find one!","title":"Conflicting add-ons"},{"location":"setup/#required-anki-add-ons","text":"To download all the required add-ons, copy and paste the following numbers into the Add-ons window. ( Tools \u2192 Add-ons \u2192 Get Add-ons... ) 2055492159 181103283 After installing the add-ons, you will have to change the configs of the add-ons to work with this note type. Continue reading to see the required config changes.","title":"Required Anki add-ons"},{"location":"setup/#optional-add-ons","text":"These are a set of optional, but useful add-ons that can easily work with the card.","title":"Optional Add-ons"},{"location":"setup/#final-steps","text":"After the above setup, make sure to restart Anki for the add-ons and config changes to take effect. If the css injector add-on is installed correctly, your Anki field editor should now have color! Additionally, now that Anki-Connect is installed, kanji hover should also be functioning. Hover over a kanji within the word reading to make sure that a popup appears. In particular, the \u8005 kanji in the example \u507d\u8005 and \u4e0d\u5be9\u8005 cards should point to each other.","title":"Final Steps"},{"location":"setup/#transfer-existing-notes","text":"If you wish to transfer existing cards into this note type, please see this page .","title":"Transfer Existing Notes"},{"location":"setup/#updating-the-note","text":"If you wish to update the note, follow the steps in this page . Be assured that this note doesn't auto-update, and you have to manually update the note if you want it to update.","title":"Updating the Note"},{"location":"setup/#yomichan-setup","text":"Yomichan is the main program that will create the cards. You can download Yomichan as a Firefox extension or under the Chrome web store. This section will go over the minimal Yomichan setup to work with this card type. If you have never used Yomichan before , please see this page first to get it working.","title":"Yomichan Setup"},{"location":"setup/#preliminary-steps","text":"If you have used Yomichan before, please make a backup of your settings (just in case): Navigate to Yomichan Settings. Go to the Backup section Select Export Settings","title":"Preliminary Steps"},{"location":"setup/#yomichan-fields","text":"To edit the fields that Yomichan will automatically fill out, do the following: Navigate to Yomichan Settings. Go to the Anki section. Select Anki card format... . Set \"Model\" as JP Mining Note . Copy and paste the following values into the fields (the custom markers won't be available in the dropdown arrow): Click here to see the fields to copy and paste. Anki Fields Yomichan Format Key {expression} Word {expression} WordReading {furigana-plain} PAOverride AJTWordPitch PrimaryDefinition {jpmn-primary-definition} Sentence {cloze-prefix}<b>{cloze-body}</b>{cloze-suffix} SentenceReading AltDisplay AltDisplayPASentenceCard AdditionalNotes *IsSentenceCard *IsClickCard *IsHoverCard *IsTargetedSentenceCard *PAShowInfo *PATestOnlyWord *PADoNotTest *PASeparateWordCard *PASeparateSentenceCard *SeparateClozeDeletionCard Hint HintNotHidden Picture WordAudio {audio} SentenceAudio PAGraphs {jpmn-pitch-accent-graphs} PAPositions {jpmn-pitch-accent-positions} PASilence [sound:_silence.wav] FrequenciesStylized {jpmn-frequencies} FrequencySort {jpmn-min-freq} SecondaryDefinition {jpmn-secondary-definition} ExtraDefinitions {jpmn-extra-definitions} UtilityDictionaries {jpmn-utility-dictionaries} Comment The above fields will create, by default, a basic vocab card in bilingual format , with all other definitions in collapsable fields. Note : Anything field marked with * are binary fields, and should be configured to each user's personal preferences. To change the default value of any of the fields, simply fill the field in within the aforementioned Anki card format... section. The custom markers like {jpmn-primary-definition} is not provided by Yomichan by default. See the section below to make these markers usable.","title":"Yomichan Fields"},{"location":"setup/#yomichan-templates","text":"Yomichan supports user inserted template code that allows the automatic separation of bilingual and monolingual dictionary definitions, custom stylization, etc. This note type makes heavy use of these custom templates. To make the new markers usable, do the following: Navigate to Yomichan Settings. Make sure that advanced settings are turned on (bottom left corner). Go to the Anki section Select Configure Anki card templates... If you have existing template code already, I highly recommend resetting the templates (bottom right corner, red button) unless you know exactly what you are doing. After resetting the templates, without removing any of the existing template code, add the following template code as follows: Copy and paste the code below to the top of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this MUST be put at the very top of the templates section ! ~ }} {{ ~! REGEX ~ }} {{ ~! matches most JMdict dictionaries and \u65b0\u548c\u82f1 ~ }} {{ ~#set \"bilingual-dict-regex\" ~ }} ^(([Jj][Mm][Dd]ict)(?! Surface Forms)(.*)|\u65b0\u548c\u82f1.*|\u65e5\u672c\u8a9e\u6587\u6cd5\u8f9e\u5178.*|ADD_BILINGUAL_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"utility-dict-regex\" ~ }} ^(NHK.*|\u30b7\u30f3\u30fb\u6f22\u5b57\u9063\u3044\u53c2\u8003|JMDict Surface Forms|ADD_UTILITY_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~#set \"ignored-dict-regex\" ~ }} ^(ADD_IGNORED_DICTIONARIES_HERE)(\\[object Object\\])?$ {{ ~/set~ }} {{ ~! OPTIONS ~ }} {{ ~! valid values : \"bilingual\" , \"monolingual\" ~ }} {{ ~#set \"opt-first-definition-type\" \"bilingual\" }}{{ /set~ }} Copy and paste the code below to the bottom of the default Yomichan template code: Click here to show the template code to copy. {{ ~! NOTE : this should be put at the very bottom of the templates section ! ~ }} {{ ~! ================= = helper functions ================= = ~ }} {{ #*inline \"s\" }}{{ /inline }} {{ ~! categorizes into 3 types : \"bilingual\" , \"monolingual\" , or \"pitch-accent\" ~ }} {{ ~#*inline \"jpmn-get-dict-type\" ~ }} {{ ~#if (op \"!= = \" (regexMatch (get \" ignored-dict-regex \") \" gu \" dictionaryName) \"\")~}} ignored {{~else if (op \" != = \" (regexMatch (get \" bilingual-dict-regex \") \" gu \" dictionaryName) \"\")~}} bilingual {{~else if (op \" != = \" (regexMatch (get \" utility-dict-regex \") \" gu \" dictionaryName) \"\")~}} utility {{~else~}} {{~! assumed that anything else is a monolingual dictionary ~}} monolingual {{~/if~}} {{~/inline~}} {{~! primary def: first monolingual (or first bilingual if no monolingual dicts found) ~}} {{~#*inline \" jpmn-get-primary-definition-dict \"~}} {{~#scope~}} {{~#if (op \" == = \" (get \" opt-first-definition-type \") \" bilingual \")~}} {{~#set \" first-definition-search-type-1 \" \" bilingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" monolingual \"}}{{/set~}} {{~else~}} {{~#set \" first-definition-search-type-1 \" \" monolingual \"}}{{/set~}} {{~#set \" first-definition-search-type-2 \" \" bilingual \"}}{{/set~}} {{~/if~}} {{~! first-dictionary === null <=> no valid dictionary was found ~}} {{~#set \" first-dictionary \" null}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-1 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~! uses other dictionary type, last resort ~}} {{~#if (op \" == = \" (get \" first-dictionary \") null)~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") (get \" first-definition-search-type-2 \"))~}} {{~#if (op \" == = \" null (get \" first-dictionary \"))~}} {{~#set \" first-dictionary \" dictionary~}}{{~/set~}} {{~/if~}} {{~/if~}} {{~/each~}} {{~/if~}} {{~#get \" first-dictionary \"~}}{{~/get~}} {{~/scope~}} {{~/inline~}} {{~! custom glossary-single function for additional regex parsing per dictionary ~}} {{~! OVERRIDES brief and noDictionaryTag ~}} {{#*inline \" jpmn-glossary-single \"}} {{~#scope~}} {{~#if (op \" == = \" dictionary \" NHK\u65e5\u672c\u8a9e\u767a\u97f3\u30a2\u30af\u30bb\u30f3\u30c8\u65b0\u8f9e\u5178 \")~}} {{~#regexReplace \" < br > \u30fb \" \" < br > \" \" g \"~}} {{~> jpmn-glossary-single-override . ~}} {{~/regexReplace~}} {{~else~}} {{~> jpmn-glossary-single-override . ~}} {{~/if~}} {{~/scope~}} {{/inline}} {{~! custom glossary-single function to add custom html around the dictionary and tags ~}} {{#*inline \" jpmn-glossary-single-override \"}} {{~#scope~}} <span class=\" dict-group__tag-list \"> {{~s~}} {{~! only italics if jp-characters-regex finds no matches ~}} {{~#set \" italics-start \"}}{{/set~}} {{~#set \" italics-end \"}}{{/set~}} {{~#set \" any \" false}}{{/set~}} {{~#each definitionTags~}} <span class=\" dict-group__tag dict-group__tag--name \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~name~}} </span> {{~s~}} </span> {{~s~}} {{~/each~}} {{~#unless noDictionaryTag~}} <span class=\" dict-group__tag dict-group__tag--dict \"> {{~s~}} <span class=\" dict-group__tag-inner \"> {{~s~}} {{~dictionary~}} </span> {{~s~}} </span> {{~s~}} {{~/unless~}} {{~#if (get \" any \")}}){{#get \" italics-end \"}}{{/get}} {{/if~}} </span> {{~s~}} <span class=\" dict-group__glossary \"> {{~s~}} {{~#each glossary}}{{#formatGlossary ../dictionary}}{{{.}}}{{/formatGlossary}}{{#unless @last}} | {{/unless}}{{/each~}} </span> {{~s~}} {{~/scope~}} {{~#if only~}}({{#each only}}{{.}}{{#unless @last}}, {{/unless}}{{/each}} only) {{/if~}} {{/inline}} {{~! ============= frequencies ============= ~}} {{#*inline \" jpmn-frequencies \"}} {{~#if (op \" > \" definition.frequencies.length 0)~}} <div class=\" frequencies \"> {{~#each definition.frequencies~}} <div class=\" frequencies__group \" data-details=\" {{~ dictionary ~ }} \"> {{ ~s~ }} <div class=\"frequencies__number\"> {{ ~s~ }} <span class=\"frequencies__number-inner\"> {{ ~s~ }} {{ ~! removes the \"X\" in JPDB ' s frequency and replaces it with a less assuming character (it interferes with the color of the card , since you see red at the top corner which is somewhat distracting) ~ }} {{ ~#regexReplace \"\u274c\" \"\u2716\" \"g\" ~ }} {{ ~frequency~ }} {{ ~/regexReplace~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} <div class=\"frequencies__dictionary\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner\"> {{ ~s~ }} <span class=\"frequencies__dictionary-inner2\"> {{ ~dictionary~ }} </span> {{ ~s~ }} </span> {{ ~s~ }} </div> {{ ~s~ }} </div> {{ ~/each~ }} </div> {{ ~/if~ }} {{ /inline }} {{ ~! taken from here : https : //github.com/MarvNC/JP-Resources # sorting-mined-anki-cards-by-frequency ~ }} {{ #*inline \"jpmn-min-freq\" }} {{ ~#scope~ }} {{ ~#set \"min-freq\" 0 }}{{ /set~ }} {{ #each definition.frequencies }} {{ ~#if (op \"||\" (op \"== = \" (get \" min-freq \") 0) (op \" > \" (op \" + \" (get \" min-freq \")) (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))))}} {{~#set \" min-freq \" (op \" + \" (regexMatch \" \\ d \" \" g \" this.frequency))}}{{/set~}} {{~/if~}} {{/each}} {{get \" min-freq \"}} {{~/scope~}} {{/inline}} {{~! ============== pitch accent ============== ~}} {{#*inline \" jpmn-pitch-accent-graphs \"}} {{~#if (op \" > \" pitchCount 0)~}} {{~#each pitches~}} <div class=\" pa-graphs__group \" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-graphs__dictionary\"> {{ ~s~ }} <div class=\"pa-graphs__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"graph\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ #*inline \"jpmn-pitch-accent-positions\" }} {{ ~#if (op \">\" pitchCount 0 ) ~ }} {{ ~#each pitches ~ }} <div class=\"pa-positions__group\" data-details=\" {{ dictionary }} \"> {{ ~s~ }} <div class=\"pa-positions__dictionary\"> {{ ~s~ }} <div class=\"pa-positions__dictionary-inner\"> {{ ~s~ }} {{ ~dictionary~ }} </div> {{ ~s~ }} </div> {{ ~s~ }} <ol> {{ ~s~ }} {{ ~#each pitches ~ }} <li> {{ ~> pitch-accent-item-disambiguation ~ }} {{ ~#scope~ }} {{ ~#set \"any\" false }}{{ /set~ }} {{ ~#each tags ~ }} {{ ~#if (get \"any\" ) }} , {{ else }} ( {{ /if~ }} {{ name }} {{ ~#set \"any\" true }}{{ /set~ }} {{ ~/each~ }} {{ ~#if (get \"any\" ) }} ) {{ /if~ }} {{ ~/scope~ }} {{ ~> pitch-accent-item format = \"position\" ~ }} </li> {{ ~/each~ }} </ol> {{ ~s~ }} </div> {{ ~/each~ }} {{ ~/if~ }} {{ /inline }} {{ ~! ============= = dictionaries ============= = ~ }} {{ ~! primary def : first monolingual (or first bilingual if no monolingual dicts found) ~ }} {{ ~! does the reverse if opt-first-definition-type is \"bilingual\" ~ }} {{ ~#*inline \"jpmn-primary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} <ol> {{~#each definition.definitions~}} {{~#if (op \" == = \" dictionary (get \" primary-dictionary \"))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : bilingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-secondary-definition\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" bilingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! extra def : monolingual defs (excluding primary def) ~ }} {{ ~#*inline \"jpmn-extra-definitions\" ~ }} {{ ~#scope~ }} {{ ~#set \"primary-dictionary\" }}{{ ~> jpmn-get-primary-definition-dict . ~ }}{{ /set~ }} {{ ~#if (op \"!= = \" (get \" primary-dictionary \") \"\")~}} {{~! looks to see if another dictionary exists ~}} {{~#set \" valid-dict \" false}}{{/set~}} {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" && \" (op \" == = \" (get \" test-dict-name \") \" monolingual \") (op \" != = \" (get \" primary-dictionary \") dictionary))~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! pitch accent info : all pitch accent info dictionaries ~ }} {{ ~#*inline \"jpmn-utility-dictionaries\" ~ }} {{ ~#scope~ }} {{ ~! looks to see if another dictionary exists ~ }} {{ ~#set \"valid-dict\" false }}{{ /set~ }} {{ ~#each definition.definitions ~ }} {{ ~#set \"test-dict-name\" }}{{ ~> jpmn-get-dict-type . dictionaryName = dictionary ~ }}{{ /set~ }} {{ ~#if (op \"== = \" (get \" test-dict-name \") \" utility \")~}} {{~#set \" valid-dict \" true}}{{/set~}} {{~/if~}} {{~/each~}} {{~#if (get \" valid-dict \") ~}} <ol> {{~#each definition.definitions~}} {{~#set \" test-dict-name \"}}{{~> jpmn-get-dict-type . dictionaryName=dictionary ~}}{{/set~}} {{~#if (op \" == = \" (get \" test-dict-name \") \" utility \")~}} <li data-details=\" {{~ dictionary ~ }} \"> {{ ~> jpmn-glossary-single . brief = ../brief noDictionaryTag = ../noDictionaryTag ~ }} </li> {{ ~/if~ }} {{ ~/each~ }} </ol> {{ ~/if~ }} {{ ~/scope~ }} {{ ~/inline~ }} {{ ~! a test to check if your dictionaries are correctly classified . ~ }} {{ ~! Only meant to be used for debugging purposes , not Anki . ~ }} {{ ~#*inline \"jpmn-test-dict-type\" ~ }} {{ ~#scope~ }} {{ ~#each definition.definitions ~ }} \u300c {{ dictionary }} \u300d: {{ > jpmn-get-dict-type . dictionaryName = dictionary }} {{ /each~ }} {{ ~/scope~ }} {{ ~/inline~ }}","title":"Yomichan Templates"},{"location":"setup/#make-an-example-card","text":"At this point, you should be able to make an example card with Yomichan! Here's an excerpt of text you can test Yomichan on: \u300c\u3084\u3001\u3044\u3089\u3063\u3057\u3083\u3044\u3002\u307e\u3001\u6bd2\u3092\u98df\u3089\u308f\u3070\u76bf\u307e\u3067\u3063\u3066\u8a00\u3046\u3057\u306d\u3002\u3042\u3001\u9055\u3046\u304b\u3002\u4e57\u308a\u639b\u304b\u3063\u305f\u8239\uff1f\u300d Obviously, just Yomichan alone doesn't fill every field. Notably, the picture and sentence audio is missing. Outside of that, there are some final settings you can adjust within the Yomichan templates if the card doesn't look quite right.","title":"Make an example card!"},{"location":"setup/#yomichan-templates-settings","text":"","title":"Yomichan Templates Settings"},{"location":"setup/#other-yomichan-settings","text":"Again, if you have never used Yomichan before, I recommend checking out this page . If you are planning on using the JMDict dictionary, I recommend downloading from the official site and using yomichan-import to get the latest jmdict version available. This is because other sources could have older definitions, which usually means less accurate definitions. This link has further template code, which creates markers for individual dictionaries. This has certain extended capabilities over my template code, such as removing the first line. Instructions on adding Forvo as an alternate audio source to Yomichan can be found here","title":"Other Yomichan Settings"},{"location":"setup/#creating-the-cards","text":"I use a texthooker setup, which is able to extract subtitles or text into the browser. Once the text is on the browser, you can use Yomichan to select the word and create the Anki card (click on the green plus button). The classic texthooker setup works for most games, and any show with subtitle files. This texthooker process has already been explained in great detail by many other smart people in the following links: Texthooker basics Texthooker basics & Visual Novels The setup also works with video files if the video player supports automated copying of subtitles, and if you have the correct subtitle files. MPV with either mpvacious or Immersive add-ons supports this workflow, as detailed in the next section. Many anime subtitle files can be found under kitsuneko .","title":"Creating the Cards"},{"location":"setup/#automating-pictures-and-sentence-audio","text":"If you've made it this far, then congratulations! Most fields of the cards have been automatically filled out, just from Yomichan alone! Yomichan is able to automatically generate everything EXCEPT the pictures and sentence audio from the media you are consuming. Fortunately, that can be automated as well. However, the tools to automate that will likely be slightly different for each individual user as it depends on what media they consume, operating system / device, etc. Instead of walking you through how to get these to work, I will instead provide a list of resources you can use. Of course, this list is incomplete, and there could be tools better suited for your workflow. mpvacious add-on for MPV , a cross platform media player. Personally tested. Given a subtitle file for a movie file, it can automatically add sentence audio and images with one Ctrl+n command. Immersive A powerful alternative to the mpvacious add-on above, with certain different capabilities. Can also be used to automatically extract sentence audio and pictures. asbplayer Cross platform (chromium) browser video player. Personally tested. This also has card image and audio exporting capabilities. Works on video streaming sites as well. Animebook Cross platform (chromium) browser video player. This also has card image and audio exporting capabilities. ShareX Windows media recorder which can both take screenshots and record audio. Personally tested. This can be automated to add audio and pictures to the most recently added anki card by following the instructions here . Useful for things that don't have an easy way of getting audio, such as visual novels. ames ShareX alternative for Linux. Personally tested. Primarily used to automate audio and picture extraction to the most recently added anki card. jidoujisho Android reader and media player, which can also create Anki cards. Note that this app does NOT use Yomichan, which means that certain fields may not be filled automatically mokuro This is not something that can automatically add images or audio to your cards, BUT it allows you to use popup-dictionaries like Yomichan on manga (an actual game-changer).","title":"Automating Pictures and Sentence Audio"},{"location":"setup/#other","text":"","title":"Other"},{"location":"setup/#anki-add-ons","text":"These add-on(s) assist in card creation, but are ultimately optional. Paste Images As WebP (link)","title":"Anki add-on(s)"},{"location":"setup/#separate-pitch-accent-deck","text":"If you want card types to go to a different deck by default, you can change it by doing the following: Browse (top middle) \u2192 Cards... (around the middle of the screen, right above first field of the note. This is NOT the Cards dropdown menu at the top right corner) \u2192 Card Type dropdown (top of the screen) \u2192 (choose pitch accent card type) \u2192 Options (the first Options you see at the very top of the screen) \u2192 Deck Override...","title":"Separate Pitch Accent Deck"},{"location":"setup/#conclusion","text":"If everything is setup correctly, then the difficult part is finally done! The cards can now be created at ease, and now all that's left is understanding how to use and edit the card itself. Head over to Usage to see exactly that.","title":"Conclusion"}]}